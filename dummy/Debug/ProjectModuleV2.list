
ProjectModuleV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edd8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800ef70  0800ef70  0001ef70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f218  0800f218  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f218  0800f218  0001f218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f220  0800f220  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f220  0800f220  0001f220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f224  0800f224  0001f224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800f228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000102c  200002a4  0800f4cc  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012d0  0800f4cc  000212d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c007  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004344  00000000  00000000  0003c2db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  00040620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00041a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c3c7  00000000  00000000  00042ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021acd  00000000  00000000  0005f0af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0170  00000000  00000000  00080b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00120cec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005754  00000000  00000000  00120d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002a4 	.word	0x200002a4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800ef58 	.word	0x0800ef58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002a8 	.word	0x200002a8
 80001d4:	0800ef58 	.word	0x0800ef58

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b974 	b.w	8000eb4 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	4604      	mov	r4, r0
 8000bec:	468e      	mov	lr, r1
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d14d      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf2:	428a      	cmp	r2, r1
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	d969      	bls.n	8000ccc <__udivmoddi4+0xe8>
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	b152      	cbz	r2, 8000c14 <__udivmoddi4+0x30>
 8000bfe:	fa01 f302 	lsl.w	r3, r1, r2
 8000c02:	f1c2 0120 	rsb	r1, r2, #32
 8000c06:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000c12:	4094      	lsls	r4, r2
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	0c21      	lsrs	r1, r4, #16
 8000c1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fb08 e316 	mls	r3, r8, r6, lr
 8000c26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2a:	fb06 f107 	mul.w	r1, r6, r7
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 811f 	bcs.w	8000e7c <__udivmoddi4+0x298>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 811c 	bls.w	8000e7c <__udivmoddi4+0x298>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 f707 	mul.w	r7, r0, r7
 8000c5c:	42a7      	cmp	r7, r4
 8000c5e:	d90a      	bls.n	8000c76 <__udivmoddi4+0x92>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c68:	f080 810a 	bcs.w	8000e80 <__udivmoddi4+0x29c>
 8000c6c:	42a7      	cmp	r7, r4
 8000c6e:	f240 8107 	bls.w	8000e80 <__udivmoddi4+0x29c>
 8000c72:	4464      	add	r4, ip
 8000c74:	3802      	subs	r0, #2
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	1be4      	subs	r4, r4, r7
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa4>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xc2>
 8000c92:	2d00      	cmp	r5, #0
 8000c94:	f000 80ef 	beq.w	8000e76 <__udivmoddi4+0x292>
 8000c98:	2600      	movs	r6, #0
 8000c9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f683 	clz	r6, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d14a      	bne.n	8000d44 <__udivmoddi4+0x160>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd4>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80f9 	bhi.w	8000eaa <__udivmoddi4+0x2c6>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	469e      	mov	lr, r3
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa4>
 8000cc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xec>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 8092 	bne.w	8000dfe <__udivmoddi4+0x21a>
 8000cda:	eba1 010c 	sub.w	r1, r1, ip
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2601      	movs	r6, #1
 8000ce8:	0c20      	lsrs	r0, r4, #16
 8000cea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cee:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cf6:	fb0e f003 	mul.w	r0, lr, r3
 8000cfa:	4288      	cmp	r0, r1
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x12c>
 8000cfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000d02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x12a>
 8000d08:	4288      	cmp	r0, r1
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2c0>
 8000d0e:	4643      	mov	r3, r8
 8000d10:	1a09      	subs	r1, r1, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d18:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x156>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x154>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2ca>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d42:	e79c      	b.n	8000c7e <__udivmoddi4+0x9a>
 8000d44:	f1c6 0720 	rsb	r7, r6, #32
 8000d48:	40b3      	lsls	r3, r6
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa20 f407 	lsr.w	r4, r0, r7
 8000d56:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	40f9      	lsrs	r1, r7
 8000d5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d62:	fa00 f306 	lsl.w	r3, r0, r6
 8000d66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6a:	0c20      	lsrs	r0, r4, #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fb09 1118 	mls	r1, r9, r8, r1
 8000d74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d78:	fb08 f00e 	mul.w	r0, r8, lr
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b8>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d90:	4288      	cmp	r0, r1
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2bc>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4461      	add	r1, ip
 8000d9c:	1a09      	subs	r1, r1, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da4:	fb09 1110 	mls	r1, r9, r0, r1
 8000da8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db0:	458e      	cmp	lr, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1e2>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2b4>
 8000dbe:	458e      	cmp	lr, r1
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2b4>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dca:	fba0 9402 	umull	r9, r4, r0, r2
 8000dce:	eba1 010e 	sub.w	r1, r1, lr
 8000dd2:	42a1      	cmp	r1, r4
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46a6      	mov	lr, r4
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x2a4>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x2a0>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x212>
 8000dde:	ebb3 0208 	subs.w	r2, r3, r8
 8000de2:	eb61 010e 	sbc.w	r1, r1, lr
 8000de6:	fa01 f707 	lsl.w	r7, r1, r7
 8000dea:	fa22 f306 	lsr.w	r3, r2, r6
 8000dee:	40f1      	lsrs	r1, r6
 8000df0:	431f      	orrs	r7, r3
 8000df2:	e9c5 7100 	strd	r7, r1, [r5]
 8000df6:	2600      	movs	r6, #0
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	40d8      	lsrs	r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0c:	4091      	lsls	r1, r2
 8000e0e:	4301      	orrs	r1, r0
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000e20:	0c0b      	lsrs	r3, r1, #16
 8000e22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e26:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2a:	429e      	cmp	r6, r3
 8000e2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x260>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b8>
 8000e3c:	429e      	cmp	r6, r3
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b8>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1b9b      	subs	r3, r3, r6
 8000e46:	b289      	uxth	r1, r1
 8000e48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb06 f30e 	mul.w	r3, r6, lr
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x28a>
 8000e5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2b0>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2b0>
 8000e6a:	3e02      	subs	r6, #2
 8000e6c:	4461      	add	r1, ip
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0x104>
 8000e76:	462e      	mov	r6, r5
 8000e78:	4628      	mov	r0, r5
 8000e7a:	e705      	b.n	8000c88 <__udivmoddi4+0xa4>
 8000e7c:	4606      	mov	r6, r0
 8000e7e:	e6e3      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6f8      	b.n	8000c76 <__udivmoddi4+0x92>
 8000e84:	454b      	cmp	r3, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f8>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e90:	3801      	subs	r0, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f8>
 8000e94:	4646      	mov	r6, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x28a>
 8000e98:	4620      	mov	r0, r4
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1e2>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x260>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b8>
 8000ea4:	3b02      	subs	r3, #2
 8000ea6:	4461      	add	r1, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x12c>
 8000eaa:	4630      	mov	r0, r6
 8000eac:	e709      	b.n	8000cc2 <__udivmoddi4+0xde>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x156>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <Endeffector_Read_Status>:
	TestMode_Status = (ReadData >> 3) & 0b00000001;
	RunMode_Status = (ReadData >> 2) & 0b00000001;
	GripperMode_Status = ReadData & 0b00000011;
}

void Endeffector_Read_Status(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af02      	add	r7, sp, #8
	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <Endeffector_Read_Status+0x38>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d10d      	bne.n	8000ee2 <Endeffector_Read_Status+0x2a>
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <Endeffector_Read_Status+0x3c>)
 8000ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b20      	cmp	r3, #32
 8000ed0:	d107      	bne.n	8000ee2 <Endeffector_Read_Status+0x2a>
		HAL_I2C_Master_Receive(&hi2c1, SlaveAddr, &ReadData, sizeof(ReadData), 35);
 8000ed2:	2323      	movs	r3, #35	; 0x23
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <Endeffector_Read_Status+0x40>)
 8000eda:	212a      	movs	r1, #42	; 0x2a
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <Endeffector_Read_Status+0x3c>)
 8000ede:	f006 fd59 	bl	8007994 <HAL_I2C_Master_Receive>
	}

	Stamp = 0;
 8000ee2:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <Endeffector_Read_Status+0x38>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200002c0 	.word	0x200002c0
 8000ef4:	2000038c 	.word	0x2000038c
 8000ef8:	200002c2 	.word	0x200002c2

08000efc <Endeffector_SoftReset>:

void Endeffector_SoftReset(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af02      	add	r7, sp, #8
	static uint8_t CommandSeq[4] = {SoftReset_Seq1, SoftReset_Seq2, SoftReset_Seq3, SoftReset_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <Endeffector_SoftReset+0x38>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d10d      	bne.n	8000f26 <Endeffector_SoftReset+0x2a>
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <Endeffector_SoftReset+0x3c>)
 8000f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	d107      	bne.n	8000f26 <Endeffector_SoftReset+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, CommandSeq, sizeof(CommandSeq), 35);
 8000f16:	2323      	movs	r3, #35	; 0x23
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <Endeffector_SoftReset+0x40>)
 8000f1e:	212a      	movs	r1, #42	; 0x2a
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <Endeffector_SoftReset+0x3c>)
 8000f22:	f006 fc39 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 8000f26:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <Endeffector_SoftReset+0x38>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]

}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002c0 	.word	0x200002c0
 8000f38:	2000038c 	.word	0x2000038c
 8000f3c:	20000000 	.word	0x20000000

08000f40 <Endeffector_EmergencyTrigger>:

void Endeffector_EmergencyTrigger(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af02      	add	r7, sp, #8
	static uint8_t EmergencyCommand[1] = {EmergencyTrigger};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <Endeffector_EmergencyTrigger+0x38>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d10d      	bne.n	8000f6a <Endeffector_EmergencyTrigger+0x2a>
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <Endeffector_EmergencyTrigger+0x3c>)
 8000f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b20      	cmp	r3, #32
 8000f58:	d107      	bne.n	8000f6a <Endeffector_EmergencyTrigger+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, EmergencyCommand, sizeof(EmergencyCommand), 35);
 8000f5a:	2323      	movs	r3, #35	; 0x23
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4a07      	ldr	r2, [pc, #28]	; (8000f80 <Endeffector_EmergencyTrigger+0x40>)
 8000f62:	212a      	movs	r1, #42	; 0x2a
 8000f64:	4805      	ldr	r0, [pc, #20]	; (8000f7c <Endeffector_EmergencyTrigger+0x3c>)
 8000f66:	f006 fc17 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <Endeffector_EmergencyTrigger+0x38>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200002c0 	.word	0x200002c0
 8000f7c:	2000038c 	.word	0x2000038c
 8000f80:	20000004 	.word	0x20000004

08000f84 <Endeffector_EmergencyExit>:

void Endeffector_EmergencyExit(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af02      	add	r7, sp, #8
	static uint8_t EmergencySeq[4] = {EmergencyOut_Seq1, EmergencyOut_Seq2, EmergencyOut_Seq3, EmergencyOut_Seq4};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <Endeffector_EmergencyExit+0x38>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10d      	bne.n	8000fae <Endeffector_EmergencyExit+0x2a>
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <Endeffector_EmergencyExit+0x3c>)
 8000f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b20      	cmp	r3, #32
 8000f9c:	d107      	bne.n	8000fae <Endeffector_EmergencyExit+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, EmergencySeq, sizeof(EmergencySeq), 35);
 8000f9e:	2323      	movs	r3, #35	; 0x23
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <Endeffector_EmergencyExit+0x40>)
 8000fa6:	212a      	movs	r1, #42	; 0x2a
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <Endeffector_EmergencyExit+0x3c>)
 8000faa:	f006 fbf5 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 8000fae:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <Endeffector_EmergencyExit+0x38>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200002c0 	.word	0x200002c0
 8000fc0:	2000038c 	.word	0x2000038c
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <Endeffector_TestModeOn>:

void Endeffector_TestModeOn(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af02      	add	r7, sp, #8
	static uint8_t TestModeON[2] = {TestMode_Command, TestMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8000fce:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <Endeffector_TestModeOn+0x38>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d10d      	bne.n	8000ff2 <Endeffector_TestModeOn+0x2a>
 8000fd6:	4b0b      	ldr	r3, [pc, #44]	; (8001004 <Endeffector_TestModeOn+0x3c>)
 8000fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b20      	cmp	r3, #32
 8000fe0:	d107      	bne.n	8000ff2 <Endeffector_TestModeOn+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, TestModeON, sizeof(TestModeON), 35);
 8000fe2:	2323      	movs	r3, #35	; 0x23
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <Endeffector_TestModeOn+0x40>)
 8000fea:	212a      	movs	r1, #42	; 0x2a
 8000fec:	4805      	ldr	r0, [pc, #20]	; (8001004 <Endeffector_TestModeOn+0x3c>)
 8000fee:	f006 fbd3 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 8000ff2:	4b03      	ldr	r3, [pc, #12]	; (8001000 <Endeffector_TestModeOn+0x38>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200002c0 	.word	0x200002c0
 8001004:	2000038c 	.word	0x2000038c
 8001008:	2000000c 	.word	0x2000000c

0800100c <Endeffector_TestModeOff>:

void Endeffector_TestModeOff(){
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af02      	add	r7, sp, #8
	static uint8_t TestModeOff[2] = {TestMode_Command, TestMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001012:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <Endeffector_TestModeOff+0x38>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d10d      	bne.n	8001036 <Endeffector_TestModeOff+0x2a>
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <Endeffector_TestModeOff+0x3c>)
 800101c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b20      	cmp	r3, #32
 8001024:	d107      	bne.n	8001036 <Endeffector_TestModeOff+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, TestModeOff, sizeof(TestModeOff), 35);
 8001026:	2323      	movs	r3, #35	; 0x23
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2302      	movs	r3, #2
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <Endeffector_TestModeOff+0x40>)
 800102e:	212a      	movs	r1, #42	; 0x2a
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <Endeffector_TestModeOff+0x3c>)
 8001032:	f006 fbb1 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 8001036:	4b03      	ldr	r3, [pc, #12]	; (8001044 <Endeffector_TestModeOff+0x38>)
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200002c0 	.word	0x200002c0
 8001048:	2000038c 	.word	0x2000038c
 800104c:	20000010 	.word	0x20000010

08001050 <Endeffector_GripperModeOn>:

void Endeffector_GripperModeOn(){
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af02      	add	r7, sp, #8
	static uint8_t GripperOn[2] = {GripperMode_Command, GripperMode_On};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <Endeffector_GripperModeOn+0x38>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d10d      	bne.n	800107a <Endeffector_GripperModeOn+0x2a>
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <Endeffector_GripperModeOn+0x3c>)
 8001060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b20      	cmp	r3, #32
 8001068:	d107      	bne.n	800107a <Endeffector_GripperModeOn+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, GripperOn, sizeof(GripperOn), 35);
 800106a:	2323      	movs	r3, #35	; 0x23
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2302      	movs	r3, #2
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <Endeffector_GripperModeOn+0x40>)
 8001072:	212a      	movs	r1, #42	; 0x2a
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <Endeffector_GripperModeOn+0x3c>)
 8001076:	f006 fb8f 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <Endeffector_GripperModeOn+0x38>)
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002c0 	.word	0x200002c0
 800108c:	2000038c 	.word	0x2000038c
 8001090:	20000014 	.word	0x20000014

08001094 <Endeffector_GripperModeOff>:

void Endeffector_GripperModeOff(){
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af02      	add	r7, sp, #8
	static uint8_t GripperOff[2] = {GripperMode_Command, GripperMode_Off};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <Endeffector_GripperModeOff+0x38>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d10d      	bne.n	80010be <Endeffector_GripperModeOff+0x2a>
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <Endeffector_GripperModeOff+0x3c>)
 80010a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b20      	cmp	r3, #32
 80010ac:	d107      	bne.n	80010be <Endeffector_GripperModeOff+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, GripperOff, sizeof(GripperOff), 35);
 80010ae:	2323      	movs	r3, #35	; 0x23
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2302      	movs	r3, #2
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <Endeffector_GripperModeOff+0x40>)
 80010b6:	212a      	movs	r1, #42	; 0x2a
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <Endeffector_GripperModeOff+0x3c>)
 80010ba:	f006 fb6d 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 80010be:	4b03      	ldr	r3, [pc, #12]	; (80010cc <Endeffector_GripperModeOff+0x38>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200002c0 	.word	0x200002c0
 80010d0:	2000038c 	.word	0x2000038c
 80010d4:	20000018 	.word	0x20000018

080010d8 <Endeffector_PickUp>:

void Endeffector_PickUp(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af02      	add	r7, sp, #8
	static uint8_t PickUp[2] = {GripperMode_Command, GripperMode_PickUp};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <Endeffector_PickUp+0x38>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10d      	bne.n	8001102 <Endeffector_PickUp+0x2a>
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <Endeffector_PickUp+0x3c>)
 80010e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b20      	cmp	r3, #32
 80010f0:	d107      	bne.n	8001102 <Endeffector_PickUp+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, PickUp, sizeof(PickUp), 35);
 80010f2:	2323      	movs	r3, #35	; 0x23
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2302      	movs	r3, #2
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <Endeffector_PickUp+0x40>)
 80010fa:	212a      	movs	r1, #42	; 0x2a
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <Endeffector_PickUp+0x3c>)
 80010fe:	f006 fb4b 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <Endeffector_PickUp+0x38>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200002c0 	.word	0x200002c0
 8001114:	2000038c 	.word	0x2000038c
 8001118:	2000001c 	.word	0x2000001c

0800111c <Endeffector_PlaceDown>:

void Endeffector_PlaceDown(){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af02      	add	r7, sp, #8
	static uint8_t PlaceDown[2] = {GripperMode_Command, GripperMode_PlaceDown};

	if(Stamp == 1 && hi2c1.State == HAL_I2C_STATE_READY){
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <Endeffector_PlaceDown+0x38>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10d      	bne.n	8001146 <Endeffector_PlaceDown+0x2a>
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <Endeffector_PlaceDown+0x3c>)
 800112c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b20      	cmp	r3, #32
 8001134:	d107      	bne.n	8001146 <Endeffector_PlaceDown+0x2a>
		HAL_I2C_Master_Transmit(&hi2c1, SlaveAddr, PlaceDown, sizeof(PlaceDown), 35);
 8001136:	2323      	movs	r3, #35	; 0x23
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2302      	movs	r3, #2
 800113c:	4a07      	ldr	r2, [pc, #28]	; (800115c <Endeffector_PlaceDown+0x40>)
 800113e:	212a      	movs	r1, #42	; 0x2a
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <Endeffector_PlaceDown+0x3c>)
 8001142:	f006 fb29 	bl	8007798 <HAL_I2C_Master_Transmit>
	}

	Stamp = 0;
 8001146:	4b03      	ldr	r3, [pc, #12]	; (8001154 <Endeffector_PlaceDown+0x38>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200002c0 	.word	0x200002c0
 8001158:	2000038c 	.word	0x2000038c
 800115c:	20000020 	.word	0x20000020

08001160 <TestMode>:

void TestMode(){
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	switch(testState){
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <TestMode+0x7c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b09      	cmp	r3, #9
 800116a:	d835      	bhi.n	80011d8 <TestMode+0x78>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <TestMode+0x14>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	0800119d 	.word	0x0800119d
 8001178:	080011a3 	.word	0x080011a3
 800117c:	080011a9 	.word	0x080011a9
 8001180:	080011af 	.word	0x080011af
 8001184:	080011b5 	.word	0x080011b5
 8001188:	080011bb 	.word	0x080011bb
 800118c:	080011c1 	.word	0x080011c1
 8001190:	080011c7 	.word	0x080011c7
 8001194:	080011cd 	.word	0x080011cd
 8001198:	080011d3 	.word	0x080011d3
	case ReadStatus :
		Endeffector_Read_Status();
 800119c:	f7ff fe8c 	bl	8000eb8 <Endeffector_Read_Status>
		break;
 80011a0:	e01a      	b.n	80011d8 <TestMode+0x78>
	case SoftReset :
		Endeffector_SoftReset();
 80011a2:	f7ff feab 	bl	8000efc <Endeffector_SoftReset>
		break;
 80011a6:	e017      	b.n	80011d8 <TestMode+0x78>
	case TestOn :
		Endeffector_TestModeOn();
 80011a8:	f7ff ff0e 	bl	8000fc8 <Endeffector_TestModeOn>
		break;
 80011ac:	e014      	b.n	80011d8 <TestMode+0x78>
	case TestOff :
		Endeffector_TestModeOff();
 80011ae:	f7ff ff2d 	bl	800100c <Endeffector_TestModeOff>
		break;
 80011b2:	e011      	b.n	80011d8 <TestMode+0x78>
	case GripOn:
		Endeffector_GripperModeOn();
 80011b4:	f7ff ff4c 	bl	8001050 <Endeffector_GripperModeOn>
		break;
 80011b8:	e00e      	b.n	80011d8 <TestMode+0x78>
	case PickUp :
		Endeffector_PickUp();
 80011ba:	f7ff ff8d 	bl	80010d8 <Endeffector_PickUp>
		break;
 80011be:	e00b      	b.n	80011d8 <TestMode+0x78>
	case PlaceDown :
		Endeffector_PlaceDown();
 80011c0:	f7ff ffac 	bl	800111c <Endeffector_PlaceDown>
		break;
 80011c4:	e008      	b.n	80011d8 <TestMode+0x78>
	case GripOff :
		Endeffector_GripperModeOff();
 80011c6:	f7ff ff65 	bl	8001094 <Endeffector_GripperModeOff>
		break;
 80011ca:	e005      	b.n	80011d8 <TestMode+0x78>
	case EmerTrig :
		Endeffector_EmergencyTrigger();
 80011cc:	f7ff feb8 	bl	8000f40 <Endeffector_EmergencyTrigger>
		break;
 80011d0:	e002      	b.n	80011d8 <TestMode+0x78>
	case EmerExit :
		Endeffector_EmergencyExit();
 80011d2:	f7ff fed7 	bl	8000f84 <Endeffector_EmergencyExit>
		break;
 80011d6:	bf00      	nop

	}
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002c4 	.word	0x200002c4

080011e0 <CheckJoystick>:
uint8_t enableX = 0;
uint8_t StateSpeed = 0;
uint8_t speed = 30;

void CheckJoystick()
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
	if ((VR[0] >= 1800) && (VR[0] <= 2200) && (VR[1] >= 1800) && (VR[1] <= 2200))
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <CheckJoystick+0xe0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80011ec:	d317      	bcc.n	800121e <CheckJoystick+0x3e>
 80011ee:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <CheckJoystick+0xe0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f640 0298 	movw	r2, #2200	; 0x898
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d811      	bhi.n	800121e <CheckJoystick+0x3e>
 80011fa:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <CheckJoystick+0xe0>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8001202:	d30c      	bcc.n	800121e <CheckJoystick+0x3e>
 8001204:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <CheckJoystick+0xe0>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f640 0298 	movw	r2, #2200	; 0x898
 800120c:	4293      	cmp	r3, r2
 800120e:	d806      	bhi.n	800121e <CheckJoystick+0x3e>
	{
	Joy.X = 0;
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <CheckJoystick+0xe4>)
 8001212:	2200      	movs	r2, #0
 8001214:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <CheckJoystick+0xe4>)
 8001218:	2200      	movs	r2, #0
 800121a:	805a      	strh	r2, [r3, #2]
 800121c:	e04b      	b.n	80012b6 <CheckJoystick+0xd6>
   }

  // down
	else if ((VR[0] <= 100) && (VR[1] <= 2200))
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <CheckJoystick+0xe0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d80d      	bhi.n	8001242 <CheckJoystick+0x62>
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <CheckJoystick+0xe0>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f640 0298 	movw	r2, #2200	; 0x898
 800122e:	4293      	cmp	r3, r2
 8001230:	d807      	bhi.n	8001242 <CheckJoystick+0x62>
	{
	Joy.X = 0;
 8001232:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <CheckJoystick+0xe4>)
 8001234:	2200      	movs	r2, #0
 8001236:	801a      	strh	r2, [r3, #0]
	Joy.Y = -1;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <CheckJoystick+0xe4>)
 800123a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123e:	805a      	strh	r2, [r3, #2]
 8001240:	e039      	b.n	80012b6 <CheckJoystick+0xd6>
   }
 // up
  else if ((VR[0] >= 3900) && (VR[1] >= 2100))
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <CheckJoystick+0xe0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f640 723b 	movw	r2, #3899	; 0xf3b
 800124a:	4293      	cmp	r3, r2
 800124c:	d90c      	bls.n	8001268 <CheckJoystick+0x88>
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <CheckJoystick+0xe0>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f640 0233 	movw	r2, #2099	; 0x833
 8001256:	4293      	cmp	r3, r2
 8001258:	d906      	bls.n	8001268 <CheckJoystick+0x88>
	{
	Joy.X = 0;
 800125a:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <CheckJoystick+0xe4>)
 800125c:	2200      	movs	r2, #0
 800125e:	801a      	strh	r2, [r3, #0]
	Joy.Y = 1;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <CheckJoystick+0xe4>)
 8001262:	2201      	movs	r2, #1
 8001264:	805a      	strh	r2, [r3, #2]
 8001266:	e026      	b.n	80012b6 <CheckJoystick+0xd6>
   }

  // left
  else if ((VR[0] <= 2100) && (VR[1] <= 1500))
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <CheckJoystick+0xe0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f640 0234 	movw	r2, #2100	; 0x834
 8001270:	4293      	cmp	r3, r2
 8001272:	d80d      	bhi.n	8001290 <CheckJoystick+0xb0>
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <CheckJoystick+0xe0>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800127c:	4293      	cmp	r3, r2
 800127e:	d807      	bhi.n	8001290 <CheckJoystick+0xb0>
	{
	Joy.X = -1;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <CheckJoystick+0xe4>)
 8001282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001286:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <CheckJoystick+0xe4>)
 800128a:	2200      	movs	r2, #0
 800128c:	805a      	strh	r2, [r3, #2]
 800128e:	e012      	b.n	80012b6 <CheckJoystick+0xd6>
   }

  // right
  else if ((VR[0] >= 1900) && (VR[1] >= 2100))
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <CheckJoystick+0xe0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f240 726b 	movw	r2, #1899	; 0x76b
 8001298:	4293      	cmp	r3, r2
 800129a:	d90c      	bls.n	80012b6 <CheckJoystick+0xd6>
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <CheckJoystick+0xe0>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f640 0233 	movw	r2, #2099	; 0x833
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d906      	bls.n	80012b6 <CheckJoystick+0xd6>
   {
	Joy.X = 1;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <CheckJoystick+0xe4>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	801a      	strh	r2, [r3, #0]
	Joy.Y = 0;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <CheckJoystick+0xe4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	805a      	strh	r2, [r3, #2]
   }
}
 80012b4:	e7ff      	b.n	80012b6 <CheckJoystick+0xd6>
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	200002d4 	.word	0x200002d4
 80012c4:	200002c8 	.word	0x200002c8

080012c8 <CheckButton>:

int CheckButton()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	// Button 1
		if(Joy.B1Log == 0 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 80012cc:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <CheckButton+0xec>)
 80012ce:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10d      	bne.n	80012f2 <CheckButton+0x2a>
 80012d6:	2110      	movs	r1, #16
 80012d8:	4837      	ldr	r0, [pc, #220]	; (80013b8 <CheckButton+0xf0>)
 80012da:	f006 f8cf 	bl	800747c <HAL_GPIO_ReadPin>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d106      	bne.n	80012f2 <CheckButton+0x2a>
			Joy.status = 1;
 80012e4:	4b33      	ldr	r3, [pc, #204]	; (80013b4 <CheckButton+0xec>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 1;
 80012ea:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <CheckButton+0xec>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	80da      	strh	r2, [r3, #6]
 80012f0:	e024      	b.n	800133c <CheckButton+0x74>
		}
		// Button 2
		else if(Joy.B2Log ==  0 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 0){
 80012f2:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <CheckButton+0xec>)
 80012f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10d      	bne.n	8001318 <CheckButton+0x50>
 80012fc:	2101      	movs	r1, #1
 80012fe:	482f      	ldr	r0, [pc, #188]	; (80013bc <CheckButton+0xf4>)
 8001300:	f006 f8bc 	bl	800747c <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <CheckButton+0x50>
			Joy.status = 2;
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <CheckButton+0xec>)
 800130c:	2202      	movs	r2, #2
 800130e:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 1;
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <CheckButton+0xec>)
 8001312:	2201      	movs	r2, #1
 8001314:	811a      	strh	r2, [r3, #8]
 8001316:	e011      	b.n	800133c <CheckButton+0x74>
	//		UpdatePosition();

		}
		// Button 3
		else if(Joy.B3Log ==  0 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2) == 0){
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <CheckButton+0xec>)
 800131a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10c      	bne.n	800133c <CheckButton+0x74>
 8001322:	2104      	movs	r1, #4
 8001324:	4826      	ldr	r0, [pc, #152]	; (80013c0 <CheckButton+0xf8>)
 8001326:	f006 f8a9 	bl	800747c <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <CheckButton+0x74>
			Joy.status = 3;
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <CheckButton+0xec>)
 8001332:	2203      	movs	r2, #3
 8001334:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 1;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <CheckButton+0xec>)
 8001338:	2201      	movs	r2, #1
 800133a:	815a      	strh	r2, [r3, #10]
		}

		// Check log
		if(Joy.B1Log == 1 && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)){
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <CheckButton+0xec>)
 800133e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d10d      	bne.n	8001362 <CheckButton+0x9a>
 8001346:	2110      	movs	r1, #16
 8001348:	481b      	ldr	r0, [pc, #108]	; (80013b8 <CheckButton+0xf0>)
 800134a:	f006 f897 	bl	800747c <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <CheckButton+0x9a>
			Joy.status = 0;
 8001354:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <CheckButton+0xec>)
 8001356:	2200      	movs	r2, #0
 8001358:	809a      	strh	r2, [r3, #4]
			Joy.B1Log = 0;
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <CheckButton+0xec>)
 800135c:	2200      	movs	r2, #0
 800135e:	80da      	strh	r2, [r3, #6]
 8001360:	e024      	b.n	80013ac <CheckButton+0xe4>
			// start
		}
		else if(Joy.B2Log == 1 && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)){
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <CheckButton+0xec>)
 8001364:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d10d      	bne.n	8001388 <CheckButton+0xc0>
 800136c:	2101      	movs	r1, #1
 800136e:	4813      	ldr	r0, [pc, #76]	; (80013bc <CheckButton+0xf4>)
 8001370:	f006 f884 	bl	800747c <HAL_GPIO_ReadPin>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <CheckButton+0xc0>
			Joy.status = 0;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <CheckButton+0xec>)
 800137c:	2200      	movs	r2, #0
 800137e:	809a      	strh	r2, [r3, #4]
			Joy.B2Log = 0;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <CheckButton+0xec>)
 8001382:	2200      	movs	r2, #0
 8001384:	811a      	strh	r2, [r3, #8]
 8001386:	e011      	b.n	80013ac <CheckButton+0xe4>
		}
		else if(Joy.B3Log == 1 && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <CheckButton+0xec>)
 800138a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10c      	bne.n	80013ac <CheckButton+0xe4>
 8001392:	2104      	movs	r1, #4
 8001394:	480a      	ldr	r0, [pc, #40]	; (80013c0 <CheckButton+0xf8>)
 8001396:	f006 f871 	bl	800747c <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <CheckButton+0xe4>
			Joy.status = 0;
 80013a0:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <CheckButton+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	809a      	strh	r2, [r3, #4]
			Joy.B3Log = 0;
 80013a6:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <CheckButton+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	815a      	strh	r2, [r3, #10]
		}

	return Joy.status;
 80013ac:	4b01      	ldr	r3, [pc, #4]	; (80013b4 <CheckButton+0xec>)
 80013ae:	889b      	ldrh	r3, [r3, #4]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002c8 	.word	0x200002c8
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800

080013c4 <InitKalmanStruct>:
extern arm_matrix_instance_f32 mat_P, mat_P_minus, mat_Q;
extern arm_matrix_instance_f32 mat_C, mat_R, mat_S, mat_K;
extern arm_matrix_instance_f32 mat_temp3x3A,mat_temp3x3B, mat_temp3x1,mat_temp1x3, mat_temp1x1;

void InitKalmanStruct(Kalman* KF,float32_t q,float32_t r)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b0a0      	sub	sp, #128	; 0x80
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	60f8      	str	r0, [r7, #12]
 80013cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d0:	edc7 0a01 	vstr	s1, [r7, #4]
	KF->R = r;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
	KF->var_Q = q;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	659a      	str	r2, [r3, #88]	; 0x58
	KF->D = 0;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	float32_t a[9] = {
 80013ea:	4b8d      	ldr	r3, [pc, #564]	; (8001620 <InitKalmanStruct+0x25c>)
 80013ec:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80013f0:	461d      	mov	r5, r3
 80013f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fa:	682b      	ldr	r3, [r5, #0]
 80013fc:	6023      	str	r3, [r4, #0]
			1.0, 0.001/2.5, 0.0000005/(2.5*2.5),
			0  , 1.0      , 0.001/2.5,
			0  , 0        , 1.0
	};
	float iden[9] = {
 80013fe:	4b89      	ldr	r3, [pc, #548]	; (8001624 <InitKalmanStruct+0x260>)
 8001400:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001404:	461d      	mov	r5, r3
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140e:	682b      	ldr	r3, [r5, #0]
 8001410:	6023      	str	r3, [r4, #0]
			1.0, 0  , 0,
			0  , 1.0, 0,
			0  , 0  , 1.0
	};
	int i;
	for(i=0;i<9;i++)
 8001412:	2300      	movs	r3, #0
 8001414:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001416:	e023      	b.n	8001460 <InitKalmanStruct+0x9c>
	{
		KF->A[i] = a[i];
 8001418:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	3380      	adds	r3, #128	; 0x80
 800141e:	443b      	add	r3, r7
 8001420:	3b28      	subs	r3, #40	; 0x28
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	68f9      	ldr	r1, [r7, #12]
 8001426:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001428:	3318      	adds	r3, #24
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	601a      	str	r2, [r3, #0]
		KF->I[i] = iden[i];
 8001430:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	3380      	adds	r3, #128	; 0x80
 8001436:	443b      	add	r3, r7
 8001438:	3b4c      	subs	r3, #76	; 0x4c
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68f9      	ldr	r1, [r7, #12]
 800143e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001440:	332e      	adds	r3, #46	; 0x2e
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	601a      	str	r2, [r3, #0]
		KF->P[i] = 0;
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800144c:	3302      	adds	r3, #2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	3304      	adds	r3, #4
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	for(i=0;i<9;i++)
 800145a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800145c:	3301      	adds	r3, #1
 800145e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001460:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001462:	2b08      	cmp	r3, #8
 8001464:	ddd8      	ble.n	8001418 <InitKalmanStruct+0x54>
	}
	float32_t b[3] = {
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001472:	f04f 0300 	mov.w	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
			0, 0, 0
	};
	float32_t c[3] = {
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
			0, 1, 0
	};
	float32_t g[3] = {
 800148a:	4a67      	ldr	r2, [pc, #412]	; (8001628 <InitKalmanStruct+0x264>)
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	ca07      	ldmia	r2, {r0, r1, r2}
 8001492:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0.001 * 0.001 * 0.001 / (6*2.5*2.5*2.5),
			0.0000005/(2.5*2.5),
			0.001/2.5
	};

	for(i=0;i<3;i++)
 8001496:	2300      	movs	r3, #0
 8001498:	67fb      	str	r3, [r7, #124]	; 0x7c
 800149a:	e02e      	b.n	80014fa <InitKalmanStruct+0x136>
	{
		KF->B[i] = b[i];
 800149c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	3380      	adds	r3, #128	; 0x80
 80014a2:	443b      	add	r3, r7
 80014a4:	3b58      	subs	r3, #88	; 0x58
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68f9      	ldr	r1, [r7, #12]
 80014aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014ac:	3320      	adds	r3, #32
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	440b      	add	r3, r1
 80014b2:	3304      	adds	r3, #4
 80014b4:	601a      	str	r2, [r3, #0]
		KF->C[i] = c[i];
 80014b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	3380      	adds	r3, #128	; 0x80
 80014bc:	443b      	add	r3, r7
 80014be:	3b64      	subs	r3, #100	; 0x64
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68f9      	ldr	r1, [r7, #12]
 80014c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014c6:	3324      	adds	r3, #36	; 0x24
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	601a      	str	r2, [r3, #0]
		KF->G[i] = g[i];
 80014ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	3380      	adds	r3, #128	; 0x80
 80014d4:	443b      	add	r3, r7
 80014d6:	3b70      	subs	r3, #112	; 0x70
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68f9      	ldr	r1, [r7, #12]
 80014dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014de:	3328      	adds	r3, #40	; 0x28
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	601a      	str	r2, [r3, #0]
		KF->x_hat[i] = 0;
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
	for(i=0;i<3;i++)
 80014f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014f6:	3301      	adds	r3, #1
 80014f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80014fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	ddcd      	ble.n	800149c <InitKalmanStruct+0xd8>
	}

	  arm_mat_init_f32(&mat_A, 3, 3,KF->A);//3x3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3360      	adds	r3, #96	; 0x60
 8001504:	2203      	movs	r2, #3
 8001506:	2103      	movs	r1, #3
 8001508:	4848      	ldr	r0, [pc, #288]	; (800162c <InitKalmanStruct+0x268>)
 800150a:	f003 ffd6 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat, 3, 1, KF->x_hat);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2201      	movs	r2, #1
 8001512:	2103      	movs	r1, #3
 8001514:	4846      	ldr	r0, [pc, #280]	; (8001630 <InitKalmanStruct+0x26c>)
 8001516:	f003 ffd0 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_x_hat_minus, 3, 1, KF->x_hat_minus);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	33dc      	adds	r3, #220	; 0xdc
 800151e:	2201      	movs	r2, #1
 8001520:	2103      	movs	r1, #3
 8001522:	4844      	ldr	r0, [pc, #272]	; (8001634 <InitKalmanStruct+0x270>)
 8001524:	f003 ffc9 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_B, 3, 1, KF->B);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3384      	adds	r3, #132	; 0x84
 800152c:	2201      	movs	r2, #1
 800152e:	2103      	movs	r1, #3
 8001530:	4841      	ldr	r0, [pc, #260]	; (8001638 <InitKalmanStruct+0x274>)
 8001532:	f003 ffc2 	bl	80054ba <arm_mat_init_f32>
	  //arm_mat_init_f32(&mat_u, 1, 1, NULL);  // Set the input control vector if needed
	  arm_mat_init_f32(&mat_P, 3, 3, KF->P);//3x3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	330c      	adds	r3, #12
 800153a:	2203      	movs	r2, #3
 800153c:	2103      	movs	r1, #3
 800153e:	483f      	ldr	r0, [pc, #252]	; (800163c <InitKalmanStruct+0x278>)
 8001540:	f003 ffbb 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_P_minus, 3, 3, KF->P_minus);//3x3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	33e8      	adds	r3, #232	; 0xe8
 8001548:	2203      	movs	r2, #3
 800154a:	2103      	movs	r1, #3
 800154c:	483c      	ldr	r0, [pc, #240]	; (8001640 <InitKalmanStruct+0x27c>)
 800154e:	f003 ffb4 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_Q, 3, 3,KF->Q);//3x3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3330      	adds	r3, #48	; 0x30
 8001556:	2203      	movs	r2, #3
 8001558:	2103      	movs	r1, #3
 800155a:	483a      	ldr	r0, [pc, #232]	; (8001644 <InitKalmanStruct+0x280>)
 800155c:	f003 ffad 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_C, 1, 3, KF->C);//1x3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	3390      	adds	r3, #144	; 0x90
 8001564:	2203      	movs	r2, #3
 8001566:	2101      	movs	r1, #1
 8001568:	4837      	ldr	r0, [pc, #220]	; (8001648 <InitKalmanStruct+0x284>)
 800156a:	f003 ffa6 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_R, 1, 1, &KF->R);//1x1
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3354      	adds	r3, #84	; 0x54
 8001572:	2201      	movs	r2, #1
 8001574:	2101      	movs	r1, #1
 8001576:	4835      	ldr	r0, [pc, #212]	; (800164c <InitKalmanStruct+0x288>)
 8001578:	f003 ff9f 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_S, 1, 1, KF->S);//1x1
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8001582:	2201      	movs	r2, #1
 8001584:	2101      	movs	r1, #1
 8001586:	4832      	ldr	r0, [pc, #200]	; (8001650 <InitKalmanStruct+0x28c>)
 8001588:	f003 ff97 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_K, 3, 1, KF->K);//3x1
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8001592:	2201      	movs	r2, #1
 8001594:	2103      	movs	r1, #3
 8001596:	482f      	ldr	r0, [pc, #188]	; (8001654 <InitKalmanStruct+0x290>)
 8001598:	f003 ff8f 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3A, 3, 3, KF->temp3x3A);//3x3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80015a2:	2203      	movs	r2, #3
 80015a4:	2103      	movs	r1, #3
 80015a6:	482c      	ldr	r0, [pc, #176]	; (8001658 <InitKalmanStruct+0x294>)
 80015a8:	f003 ff87 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x3B, 3, 3, KF->temp3x3B);//3x3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80015b2:	2203      	movs	r2, #3
 80015b4:	2103      	movs	r1, #3
 80015b6:	4829      	ldr	r0, [pc, #164]	; (800165c <InitKalmanStruct+0x298>)
 80015b8:	f003 ff7f 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp3x1, 3, 1, KF->temp3x1);//3x1
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80015c2:	2201      	movs	r2, #1
 80015c4:	2103      	movs	r1, #3
 80015c6:	4826      	ldr	r0, [pc, #152]	; (8001660 <InitKalmanStruct+0x29c>)
 80015c8:	f003 ff77 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x3, 1, 3, KF->temp1x3);//1x3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 80015d2:	2203      	movs	r2, #3
 80015d4:	2101      	movs	r1, #1
 80015d6:	4823      	ldr	r0, [pc, #140]	; (8001664 <InitKalmanStruct+0x2a0>)
 80015d8:	f003 ff6f 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_temp1x1, 1, 1, &KF->temp1x1);//1x1
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80015e2:	2201      	movs	r2, #1
 80015e4:	2101      	movs	r1, #1
 80015e6:	4820      	ldr	r0, [pc, #128]	; (8001668 <InitKalmanStruct+0x2a4>)
 80015e8:	f003 ff67 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_G, 3, 1, KF->G);//3x1
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	33a0      	adds	r3, #160	; 0xa0
 80015f0:	2201      	movs	r2, #1
 80015f2:	2103      	movs	r1, #3
 80015f4:	481d      	ldr	r0, [pc, #116]	; (800166c <InitKalmanStruct+0x2a8>)
 80015f6:	f003 ff60 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&mat_GT, 1, 3, KF->GT);//1x3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	33ac      	adds	r3, #172	; 0xac
 80015fe:	2203      	movs	r2, #3
 8001600:	2101      	movs	r1, #1
 8001602:	481b      	ldr	r0, [pc, #108]	; (8001670 <InitKalmanStruct+0x2ac>)
 8001604:	f003 ff59 	bl	80054ba <arm_mat_init_f32>
	  arm_mat_init_f32(&eye, 3, 3, KF->I);//1x3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	33b8      	adds	r3, #184	; 0xb8
 800160c:	2203      	movs	r2, #3
 800160e:	2103      	movs	r1, #3
 8001610:	4818      	ldr	r0, [pc, #96]	; (8001674 <InitKalmanStruct+0x2b0>)
 8001612:	f003 ff52 	bl	80054ba <arm_mat_init_f32>

}
 8001616:	bf00      	nop
 8001618:	3780      	adds	r7, #128	; 0x80
 800161a:	46bd      	mov	sp, r7
 800161c:	bdb0      	pop	{r4, r5, r7, pc}
 800161e:	bf00      	nop
 8001620:	0800ef70 	.word	0x0800ef70
 8001624:	0800ef94 	.word	0x0800ef94
 8001628:	0800efb8 	.word	0x0800efb8
 800162c:	2000065c 	.word	0x2000065c
 8001630:	20000664 	.word	0x20000664
 8001634:	2000066c 	.word	0x2000066c
 8001638:	20000674 	.word	0x20000674
 800163c:	20000684 	.word	0x20000684
 8001640:	2000068c 	.word	0x2000068c
 8001644:	20000694 	.word	0x20000694
 8001648:	200006ac 	.word	0x200006ac
 800164c:	200006b4 	.word	0x200006b4
 8001650:	200006bc 	.word	0x200006bc
 8001654:	200006c4 	.word	0x200006c4
 8001658:	200006cc 	.word	0x200006cc
 800165c:	200006d4 	.word	0x200006d4
 8001660:	200006dc 	.word	0x200006dc
 8001664:	200006e4 	.word	0x200006e4
 8001668:	200006ec 	.word	0x200006ec
 800166c:	200006a4 	.word	0x200006a4
 8001670:	2000069c 	.word	0x2000069c
 8001674:	2000067c 	.word	0x2000067c

08001678 <kalman_filter>:

void kalman_filter()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    //Process model: x_hat_minus = mat_A*x_hat
    arm_mat_mult_f32(&mat_A, &mat_x_hat, &mat_x_hat_minus);			//A*X
 800167c:	4a39      	ldr	r2, [pc, #228]	; (8001764 <kalman_filter+0xec>)
 800167e:	493a      	ldr	r1, [pc, #232]	; (8001768 <kalman_filter+0xf0>)
 8001680:	483a      	ldr	r0, [pc, #232]	; (800176c <kalman_filter+0xf4>)
 8001682:	f004 faa9 	bl	8005bd8 <arm_mat_mult_f32>
    // If an input control vector is used:
    // arm_mat_mult_f32(&mat_B, &mat_u, &mat_temp3x3A);
    // arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x3A, &mat_x_hat_minus);

    // Predict covariance matrix: P_minus = A * P * A^T + Q
    arm_mat_trans_f32(&mat_A, &mat_temp3x3A);					    //AT
 8001686:	493a      	ldr	r1, [pc, #232]	; (8001770 <kalman_filter+0xf8>)
 8001688:	4838      	ldr	r0, [pc, #224]	; (800176c <kalman_filter+0xf4>)
 800168a:	f004 fb90 	bl	8005dae <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_A, &mat_P, &mat_temp3x3B);			    //A*P
 800168e:	4a39      	ldr	r2, [pc, #228]	; (8001774 <kalman_filter+0xfc>)
 8001690:	4939      	ldr	r1, [pc, #228]	; (8001778 <kalman_filter+0x100>)
 8001692:	4836      	ldr	r0, [pc, #216]	; (800176c <kalman_filter+0xf4>)
 8001694:	f004 faa0 	bl	8005bd8 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3B, &mat_temp3x3A, &mat_P_minus);	//A*P*AT
 8001698:	4a38      	ldr	r2, [pc, #224]	; (800177c <kalman_filter+0x104>)
 800169a:	4935      	ldr	r1, [pc, #212]	; (8001770 <kalman_filter+0xf8>)
 800169c:	4835      	ldr	r0, [pc, #212]	; (8001774 <kalman_filter+0xfc>)
 800169e:	f004 fa9b 	bl	8005bd8 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_G, &mat_GT);								//GT
 80016a2:	4937      	ldr	r1, [pc, #220]	; (8001780 <kalman_filter+0x108>)
 80016a4:	4837      	ldr	r0, [pc, #220]	; (8001784 <kalman_filter+0x10c>)
 80016a6:	f004 fb82 	bl	8005dae <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_G, &mat_GT, &mat_Q);						//G*GT
 80016aa:	4a37      	ldr	r2, [pc, #220]	; (8001788 <kalman_filter+0x110>)
 80016ac:	4934      	ldr	r1, [pc, #208]	; (8001780 <kalman_filter+0x108>)
 80016ae:	4835      	ldr	r0, [pc, #212]	; (8001784 <kalman_filter+0x10c>)
 80016b0:	f004 fa92 	bl	8005bd8 <arm_mat_mult_f32>
    arm_mat_scale_f32(&mat_Q,KF.var_Q, &mat_Q);						//G*GT*var_q
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <kalman_filter+0x114>)
 80016b6:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80016ba:	4933      	ldr	r1, [pc, #204]	; (8001788 <kalman_filter+0x110>)
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	4831      	ldr	r0, [pc, #196]	; (8001788 <kalman_filter+0x110>)
 80016c2:	f004 fb03 	bl	8005ccc <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_P_minus, &mat_Q, &mat_P_minus);			//A * P * A^T + Q
 80016c6:	4a2d      	ldr	r2, [pc, #180]	; (800177c <kalman_filter+0x104>)
 80016c8:	492f      	ldr	r1, [pc, #188]	; (8001788 <kalman_filter+0x110>)
 80016ca:	482c      	ldr	r0, [pc, #176]	; (800177c <kalman_filter+0x104>)
 80016cc:	f003 feba 	bl	8005444 <arm_mat_add_f32>

    // Calculate innovation covariance: S = C * P_minus * C^T + R
    arm_mat_mult_f32(&mat_C, &mat_P_minus, &mat_temp1x3);			//C*P
 80016d0:	4a2f      	ldr	r2, [pc, #188]	; (8001790 <kalman_filter+0x118>)
 80016d2:	492a      	ldr	r1, [pc, #168]	; (800177c <kalman_filter+0x104>)
 80016d4:	482f      	ldr	r0, [pc, #188]	; (8001794 <kalman_filter+0x11c>)
 80016d6:	f004 fa7f 	bl	8005bd8 <arm_mat_mult_f32>
    arm_mat_trans_f32(&mat_C, &mat_temp3x1);						//CT
 80016da:	492f      	ldr	r1, [pc, #188]	; (8001798 <kalman_filter+0x120>)
 80016dc:	482d      	ldr	r0, [pc, #180]	; (8001794 <kalman_filter+0x11c>)
 80016de:	f004 fb66 	bl	8005dae <arm_mat_trans_f32>
    arm_mat_mult_f32(&mat_temp1x3, &mat_temp3x1, &mat_temp1x1);		//C*P*C^T
 80016e2:	4a2e      	ldr	r2, [pc, #184]	; (800179c <kalman_filter+0x124>)
 80016e4:	492c      	ldr	r1, [pc, #176]	; (8001798 <kalman_filter+0x120>)
 80016e6:	482a      	ldr	r0, [pc, #168]	; (8001790 <kalman_filter+0x118>)
 80016e8:	f004 fa76 	bl	8005bd8 <arm_mat_mult_f32>
    arm_mat_add_f32(&mat_temp1x1, &mat_R, &mat_S);					//C*P*C^T + R
 80016ec:	4a2c      	ldr	r2, [pc, #176]	; (80017a0 <kalman_filter+0x128>)
 80016ee:	492d      	ldr	r1, [pc, #180]	; (80017a4 <kalman_filter+0x12c>)
 80016f0:	482a      	ldr	r0, [pc, #168]	; (800179c <kalman_filter+0x124>)
 80016f2:	f003 fea7 	bl	8005444 <arm_mat_add_f32>

    //==> Calculate Kalman gain: K = P_minus * C^T * S^(-1)
    arm_mat_inverse_f32(&mat_S, &mat_temp1x1);						//inv(S)
 80016f6:	4929      	ldr	r1, [pc, #164]	; (800179c <kalman_filter+0x124>)
 80016f8:	4829      	ldr	r0, [pc, #164]	; (80017a0 <kalman_filter+0x128>)
 80016fa:	f003 fef6 	bl	80054ea <arm_mat_inverse_f32>
    arm_mat_mult_f32(&mat_P_minus, &mat_temp3x1, &mat_temp3x3A);	//P*CT
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <kalman_filter+0xf8>)
 8001700:	4925      	ldr	r1, [pc, #148]	; (8001798 <kalman_filter+0x120>)
 8001702:	481e      	ldr	r0, [pc, #120]	; (800177c <kalman_filter+0x104>)
 8001704:	f004 fa68 	bl	8005bd8 <arm_mat_mult_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_temp1x1, &mat_K);			//P*CT*inv(S)
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <kalman_filter+0x130>)
 800170a:	4924      	ldr	r1, [pc, #144]	; (800179c <kalman_filter+0x124>)
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <kalman_filter+0xf8>)
 800170e:	f004 fa63 	bl	8005bd8 <arm_mat_mult_f32>

    //==> Update state estimate: x_hat = x_hat_minus + K * (z - C * x_hat_minus)
    arm_mat_mult_f32(&mat_C, &mat_x_hat_minus, &mat_temp1x1);		//C*X
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <kalman_filter+0x124>)
 8001714:	4913      	ldr	r1, [pc, #76]	; (8001764 <kalman_filter+0xec>)
 8001716:	481f      	ldr	r0, [pc, #124]	; (8001794 <kalman_filter+0x11c>)
 8001718:	f004 fa5e 	bl	8005bd8 <arm_mat_mult_f32>
    //float32_t innovation = z - temp1x1;								//Z-C*X
    arm_mat_scale_f32(&mat_K, KF.z - KF.temp1x1, &mat_temp3x1);			//K*(Z-C*X)
 800171c:	4b1b      	ldr	r3, [pc, #108]	; (800178c <kalman_filter+0x114>)
 800171e:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001722:	4b1a      	ldr	r3, [pc, #104]	; (800178c <kalman_filter+0x114>)
 8001724:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	491a      	ldr	r1, [pc, #104]	; (8001798 <kalman_filter+0x120>)
 800172e:	eeb0 0a67 	vmov.f32	s0, s15
 8001732:	481d      	ldr	r0, [pc, #116]	; (80017a8 <kalman_filter+0x130>)
 8001734:	f004 faca 	bl	8005ccc <arm_mat_scale_f32>
    arm_mat_add_f32(&mat_x_hat_minus, &mat_temp3x1, &mat_x_hat);	//X - K*(Z-C*X) ========> X estimate
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <kalman_filter+0xf0>)
 800173a:	4917      	ldr	r1, [pc, #92]	; (8001798 <kalman_filter+0x120>)
 800173c:	4809      	ldr	r0, [pc, #36]	; (8001764 <kalman_filter+0xec>)
 800173e:	f003 fe81 	bl	8005444 <arm_mat_add_f32>

    // Update covariance matrix: P = (I - K * C) * P_minus
    arm_mat_mult_f32(&mat_K, &mat_C, &mat_temp3x3B);				//K*C
 8001742:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <kalman_filter+0xfc>)
 8001744:	4913      	ldr	r1, [pc, #76]	; (8001794 <kalman_filter+0x11c>)
 8001746:	4818      	ldr	r0, [pc, #96]	; (80017a8 <kalman_filter+0x130>)
 8001748:	f004 fa46 	bl	8005bd8 <arm_mat_mult_f32>
    arm_mat_sub_f32(&eye, &mat_P_minus, &mat_temp3x3A);				//I - K*C
 800174c:	4a08      	ldr	r2, [pc, #32]	; (8001770 <kalman_filter+0xf8>)
 800174e:	490b      	ldr	r1, [pc, #44]	; (800177c <kalman_filter+0x104>)
 8001750:	4816      	ldr	r0, [pc, #88]	; (80017ac <kalman_filter+0x134>)
 8001752:	f004 faf1 	bl	8005d38 <arm_mat_sub_f32>
    arm_mat_mult_f32(&mat_temp3x3A, &mat_P_minus, &mat_P);			//(I - K*C)*P ===========> P estimate
 8001756:	4a08      	ldr	r2, [pc, #32]	; (8001778 <kalman_filter+0x100>)
 8001758:	4908      	ldr	r1, [pc, #32]	; (800177c <kalman_filter+0x104>)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <kalman_filter+0xf8>)
 800175c:	f004 fa3c 	bl	8005bd8 <arm_mat_mult_f32>
}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	2000066c 	.word	0x2000066c
 8001768:	20000664 	.word	0x20000664
 800176c:	2000065c 	.word	0x2000065c
 8001770:	200006cc 	.word	0x200006cc
 8001774:	200006d4 	.word	0x200006d4
 8001778:	20000684 	.word	0x20000684
 800177c:	2000068c 	.word	0x2000068c
 8001780:	2000069c 	.word	0x2000069c
 8001784:	200006a4 	.word	0x200006a4
 8001788:	20000694 	.word	0x20000694
 800178c:	200004dc 	.word	0x200004dc
 8001790:	200006e4 	.word	0x200006e4
 8001794:	200006ac 	.word	0x200006ac
 8001798:	200006dc 	.word	0x200006dc
 800179c:	200006ec 	.word	0x200006ec
 80017a0:	200006bc 	.word	0x200006bc
 80017a4:	200006b4 	.word	0x200006b4
 80017a8:	200006c4 	.word	0x200006c4
 80017ac:	2000067c 	.word	0x2000067c

080017b0 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <modbus_1t5_Timeout+0x1c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	751a      	strb	r2, [r3, #20]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	200002e0 	.word	0x200002e0

080017d0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <modbus_3t5_Timeout+0x1c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	755a      	strb	r2, [r3, #21]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	200002e0 	.word	0x200002e0

080017f0 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <modbus_UART_Recived+0x60>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <modbus_UART_Recived+0x60>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 800180a:	1c59      	adds	r1, r3, #1
 800180c:	b289      	uxth	r1, r1
 800180e:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8001812:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001816:	d210      	bcs.n	800183a <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <modbus_UART_Recived+0x60>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68d8      	ldr	r0, [r3, #12]
 800181e:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <modbus_UART_Recived+0x60>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <modbus_UART_Recived+0x60>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800182a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800182e:	4413      	add	r3, r2
 8001830:	3302      	adds	r3, #2
 8001832:	2201      	movs	r2, #1
 8001834:	4619      	mov	r1, r3
 8001836:	f00a fd21 	bl	800c27c <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <modbus_UART_Recived+0x60>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002e0 	.word	0x200002e0

08001854 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 800185e:	4a24      	ldr	r2, [pc, #144]	; (80018f0 <Modbus_init+0x9c>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8001864:	4b22      	ldr	r3, [pc, #136]	; (80018f0 <Modbus_init+0x9c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 800186c:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <Modbus_init+0x9c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	4a20      	ldr	r2, [pc, #128]	; (80018f4 <Modbus_init+0xa0>)
 8001874:	2114      	movs	r1, #20
 8001876:	4618      	mov	r0, r3
 8001878:	f009 ff04 	bl	800b684 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800187c:	4b1c      	ldr	r3, [pc, #112]	; (80018f0 <Modbus_init+0x9c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <Modbus_init+0xa4>)
 8001884:	210e      	movs	r1, #14
 8001886:	4618      	mov	r0, r3
 8001888:	f009 fefc 	bl	800b684 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <Modbus_init+0x9c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	4a1a      	ldr	r2, [pc, #104]	; (80018fc <Modbus_init+0xa8>)
 8001894:	2103      	movs	r1, #3
 8001896:	4618      	mov	r0, r3
 8001898:	f00a fc48 	bl	800c12c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <Modbus_init+0x9c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68d8      	ldr	r0, [r3, #12]
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <Modbus_init+0x9c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <Modbus_init+0x9c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80018ae:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80018b2:	4413      	add	r3, r2
 80018b4:	3302      	adds	r3, #2
 80018b6:	2201      	movs	r2, #1
 80018b8:	4619      	mov	r1, r3
 80018ba:	f00a fcdf 	bl	800c27c <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80018be:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <Modbus_init+0x9c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d10c      	bne.n	80018e8 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <Modbus_init+0x9c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f008 ff7f 	bl	800a7d8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80018da:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <Modbus_init+0x9c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f009 f9be 	bl	800ac64 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200002e0 	.word	0x200002e0
 80018f4:	080017b1 	.word	0x080017b1
 80018f8:	080017d1 	.word	0x080017d1
 80018fc:	080017f1 	.word	0x080017f1

08001900 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800190c:	23ff      	movs	r3, #255	; 0xff
 800190e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001910:	23ff      	movs	r3, #255	; 0xff
 8001912:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001914:	e013      	b.n	800193e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	4053      	eors	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <CRC16+0x64>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4413      	add	r3, r2
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	4053      	eors	r3, r2
 8001932:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001934:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <CRC16+0x68>)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	4413      	add	r3, r2
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800193e:	883b      	ldrh	r3, [r7, #0]
 8001940:	1e5a      	subs	r2, r3, #1
 8001942:	803a      	strh	r2, [r7, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1e6      	bne.n	8001916 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b21a      	sxth	r2, r3
 800194e:	7bbb      	ldrb	r3, [r7, #14]
 8001950:	b21b      	sxth	r3, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	b21b      	sxth	r3, r3
 8001956:	b29b      	uxth	r3, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	20000124 	.word	0x20000124
 8001968:	20000024 	.word	0x20000024

0800196c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001972:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
 8001978:	3b01      	subs	r3, #1
 800197a:	2b03      	cmp	r3, #3
 800197c:	d80a      	bhi.n	8001994 <Modbus_Protocal_Worker+0x28>
 800197e:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <Modbus_Protocal_Worker+0x18>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	0800199f 	.word	0x0800199f
 8001988:	08001b3f 	.word	0x08001b3f
 800198c:	08001a2b 	.word	0x08001a2b
 8001990:	08001a51 	.word	0x08001a51
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001994:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2201      	movs	r2, #1
 800199a:	761a      	strb	r2, [r3, #24]
		break;
 800199c:	e0e8      	b.n	8001b70 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d002      	beq.n	80019b0 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 80019aa:	f000 f9dd 	bl	8001d68 <Modbus_Emission>
 80019ae:	e01c      	b.n	80019ea <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 80019b0:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	7d9b      	ldrb	r3, [r3, #22]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d017      	beq.n	80019ea <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80019ba:	4b6f      	ldr	r3, [pc, #444]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80019c2:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2200      	movs	r2, #0
 80019c8:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80019ca:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b68      	ldr	r3, [pc, #416]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2203      	movs	r2, #3
 80019e8:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b20      	cmp	r3, #32
 80019f8:	f040 80b3 	bne.w	8001b62 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80019fc:	4b5e      	ldr	r3, [pc, #376]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68d8      	ldr	r0, [r3, #12]
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4b59      	ldr	r3, [pc, #356]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001a18:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	2201      	movs	r2, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	f00a fc2a 	bl	800c27c <HAL_UART_Receive_IT>
		}
		break;
 8001a28:	e09b      	b.n	8001b62 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001a2a:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	7d1b      	ldrb	r3, [r3, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 8098 	beq.w	8001b66 <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8001a36:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	22fe      	movs	r2, #254	; 0xfe
 8001a44:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001a4e:	e08a      	b.n	8001b66 <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001a50:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	7d9b      	ldrb	r3, [r3, #22]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d103      	bne.n	8001a6e <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001a66:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	22ff      	movs	r2, #255	; 0xff
 8001a6c:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001a6e:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001a76:	f113 0f02 	cmn.w	r3, #2
 8001a7a:	d150      	bne.n	8001b1e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001a8c:	4b3a      	ldr	r3, [pc, #232]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001a94:	3b02      	subs	r3, #2
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f7ff ff31 	bl	8001900 <CRC16>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001aa2:	793a      	ldrb	r2, [r7, #4]
 8001aa4:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001aa6:	6819      	ldr	r1, [r3, #0]
 8001aa8:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001ab0:	3b02      	subs	r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d10c      	bne.n	8001ad6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001abc:	797a      	ldrb	r2, [r7, #5]
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001ac0:	6819      	ldr	r1, [r3, #0]
 8001ac2:	4b2d      	ldr	r3, [pc, #180]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001aca:	3b01      	subs	r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d004      	beq.n	8001ae0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001ad6:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	22ff      	movs	r2, #255	; 0xff
 8001adc:	75da      	strb	r2, [r3, #23]
				break;
 8001ade:	e047      	b.n	8001b70 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001ae8:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d113      	bne.n	8001b1a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001af2:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001afa:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8001b02:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001b0c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f00b fd76 	bl	800d600 <memcpy>

			//execute command
			Modbus_frame_response();
 8001b14:	f000 f910 	bl	8001d38 <Modbus_frame_response>
 8001b18:	e001      	b.n	8001b1e <Modbus_Protocal_Worker+0x1b2>
				break;
 8001b1a:	bf00      	nop
					}
		break;


	}
}
 8001b1c:	e028      	b.n	8001b70 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	7d5b      	ldrb	r3, [r3, #21]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00a fc4e 	bl	800c3d8 <HAL_UART_AbortReceive>
		break;
 8001b3c:	e015      	b.n	8001b6a <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d10f      	bne.n	8001b6e <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001b4e:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <Modbus_Protocal_Worker+0x20c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	761a      	strb	r2, [r3, #24]
		break;
 8001b60:	e005      	b.n	8001b6e <Modbus_Protocal_Worker+0x202>
		break;
 8001b62:	bf00      	nop
 8001b64:	e004      	b.n	8001b70 <Modbus_Protocal_Worker+0x204>
		break;
 8001b66:	bf00      	nop
 8001b68:	e002      	b.n	8001b70 <Modbus_Protocal_Worker+0x204>
		break;
 8001b6a:	bf00      	nop
 8001b6c:	e000      	b.n	8001b70 <Modbus_Protocal_Worker+0x204>
		break;
 8001b6e:	bf00      	nop
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200002e0 	.word	0x200002e0

08001b7c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <modbusWrite1Register+0x80>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	7e9b      	ldrb	r3, [r3, #26]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	021b      	lsls	r3, r3, #8
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <modbusWrite1Register+0x80>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	7edb      	ldrb	r3, [r3, #27]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <modbusWrite1Register+0x80>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d903      	bls.n	8001bae <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f000 f8a4 	bl	8001cf4 <ModbusErrorReply>
			 return;
 8001bac:	e023      	b.n	8001bf6 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <modbusWrite1Register+0x80>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <modbusWrite1Register+0x80>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	440b      	add	r3, r1
 8001bbe:	7f12      	ldrb	r2, [r2, #28]
 8001bc0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <modbusWrite1Register+0x80>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <modbusWrite1Register+0x80>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	440b      	add	r3, r1
 8001bd2:	7f52      	ldrb	r2, [r2, #29]
 8001bd4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <modbusWrite1Register+0x80>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001bde:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <modbusWrite1Register+0x80>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8001be4:	2208      	movs	r2, #8
 8001be6:	4619      	mov	r1, r3
 8001be8:	f00b fd0a 	bl	800d600 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001bec:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <modbusWrite1Register+0x80>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200002e0 	.word	0x200002e0

08001c00 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001c06:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	7f1b      	ldrb	r3, [r3, #28]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	7f5b      	ldrb	r3, [r3, #29]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	7e9b      	ldrb	r3, [r3, #26]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	7edb      	ldrb	r3, [r3, #27]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <modbusRead1Register+0x42>
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b7d      	cmp	r3, #125	; 0x7d
 8001c40:	d903      	bls.n	8001c4a <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001c42:	2003      	movs	r0, #3
 8001c44:	f000 f856 	bl	8001cf4 <ModbusErrorReply>
		 return;
 8001c48:	e04e      	b.n	8001ce8 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d808      	bhi.n	8001c68 <modbusRead1Register+0x68>
 8001c56:	88ba      	ldrh	r2, [r7, #4]
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b24      	ldr	r3, [pc, #144]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d903      	bls.n	8001c70 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f000 f843 	bl	8001cf4 <ModbusErrorReply>
		 return;
 8001c6e:	e03b      	b.n	8001ce8 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001c70:	4b1f      	ldr	r3, [pc, #124]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2203      	movs	r2, #3
 8001c76:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0052      	lsls	r2, r2, #1
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001c8a:	2400      	movs	r4, #0
 8001c8c:	e020      	b.n	8001cd0 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001c8e:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	4423      	add	r3, r4
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	18d1      	adds	r1, r2, r3
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	1c63      	adds	r3, r4, #1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	7849      	ldrb	r1, [r1, #1]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	460a      	mov	r2, r1
 8001caa:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	4423      	add	r3, r4
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	18d1      	adds	r1, r2, r3
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	0063      	lsls	r3, r4, #1
 8001cc2:	3303      	adds	r3, #3
 8001cc4:	7809      	ldrb	r1, [r1, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	460a      	mov	r2, r1
 8001cca:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001cce:	3401      	adds	r4, #1
 8001cd0:	88fb      	ldrh	r3, [r7, #6]
 8001cd2:	429c      	cmp	r4, r3
 8001cd4:	dbdb      	blt.n	8001c8e <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <modbusRead1Register+0xf0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0052      	lsls	r2, r2, #1
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002e0 	.word	0x200002e0

08001cf4 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <ModbusErrorReply+0x40>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	7e5a      	ldrb	r2, [r3, #25]
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <ModbusErrorReply+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <ModbusErrorReply+0x40>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	79fa      	ldrb	r2, [r7, #7]
 8001d18:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <ModbusErrorReply+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2202      	movs	r2, #2
 8001d22:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200002e0 	.word	0x200002e0

08001d38 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <Modbus_frame_response+0x2c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	7e5b      	ldrb	r3, [r3, #25]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	d004      	beq.n	8001d50 <Modbus_frame_response+0x18>
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d105      	bne.n	8001d56 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001d4a:	f7ff ff17 	bl	8001b7c <modbusWrite1Register>
		break;
 8001d4e:	e006      	b.n	8001d5e <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001d50:	f7ff ff56 	bl	8001c00 <modbusRead1Register>
		break;
 8001d54:	e003      	b.n	8001d5e <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001d56:	2001      	movs	r0, #1
 8001d58:	f7ff ffcc 	bl	8001cf4 <ModbusErrorReply>
		break;
 8001d5c:	bf00      	nop

	}
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	200002e0 	.word	0x200002e0

08001d68 <Modbus_Emission>:

void Modbus_Emission()
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	; (8001e64 <Modbus_Emission+0xfc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d15e      	bne.n	8001e3c <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001d7e:	4b39      	ldr	r3, [pc, #228]	; (8001e64 <Modbus_Emission+0xfc>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b38      	ldr	r3, [pc, #224]	; (8001e64 <Modbus_Emission+0xfc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	7812      	ldrb	r2, [r2, #0]
 8001d88:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <Modbus_Emission+0xfc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8001d94:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001d96:	4b33      	ldr	r3, [pc, #204]	; (8001e64 <Modbus_Emission+0xfc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001d9e:	4b31      	ldr	r3, [pc, #196]	; (8001e64 <Modbus_Emission+0xfc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8001da6:	461a      	mov	r2, r3
 8001da8:	f00b fc2a 	bl	800d600 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <Modbus_Emission+0xfc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b2b      	ldr	r3, [pc, #172]	; (8001e64 <Modbus_Emission+0xfc>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3203      	adds	r2, #3
 8001dbc:	b292      	uxth	r2, r2
 8001dbe:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001dc2:	4b28      	ldr	r3, [pc, #160]	; (8001e64 <Modbus_Emission+0xfc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001dca:	4b26      	ldr	r3, [pc, #152]	; (8001e64 <Modbus_Emission+0xfc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001dd2:	3b02      	subs	r3, #2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4610      	mov	r0, r2
 8001dd8:	f7ff fd92 	bl	8001900 <CRC16>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <Modbus_Emission+0xfc>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <Modbus_Emission+0xfc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001dec:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001dee:	7939      	ldrb	r1, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	460a      	mov	r2, r1
 8001df4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001df8:	4b1a      	ldr	r3, [pc, #104]	; (8001e64 <Modbus_Emission+0xfc>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <Modbus_Emission+0xfc>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e04:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001e06:	7979      	ldrb	r1, [r7, #5]
 8001e08:	4413      	add	r3, r2
 8001e0a:	460a      	mov	r2, r1
 8001e0c:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b20      	cmp	r3, #32
 8001e1e:	d10d      	bne.n	8001e3c <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001e26:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e30:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e32:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001e36:	461a      	mov	r2, r3
 8001e38:	f00a fa50 	bl	800c2dc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2200      	movs	r2, #0
 8001e42:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2200      	movs	r2, #0
 8001e52:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <Modbus_Emission+0xfc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	761a      	strb	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200002e0 	.word	0x200002e0

08001e68 <PIDSetup>:
 */

#include "PIDController.h"

void PIDSetup(PID* temp,float32_t Kp, float32_t Ki, float32_t Kd, float32_t tolerance)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6178      	str	r0, [r7, #20]
 8001e70:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e74:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e78:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e7c:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Kp = Kp;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	601a      	str	r2, [r3, #0]
	temp->Ki = Ki;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]
	temp->Kd = Kd;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	609a      	str	r2, [r3, #8]
	temp->tolerance = tolerance;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
	temp->U = 0;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
	temp->Delta_U = 0;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
	temp->U_minus = 0;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	615a      	str	r2, [r3, #20]
	temp->Error = 0;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
	temp->Error_minus = 0;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
	temp->Error_minus2 = 0;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
}
 8001ebc:	bf00      	nop
 8001ebe:	371c      	adds	r7, #28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <PIDRun>:

void PIDRun(PID* temp, float32_t Feedback, float32_t Ref)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ed4:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->Error = Ref - Feedback;
 8001ed8:	ed97 7a01 	vldr	s14, [r7, #4]
 8001edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	ee17 2a90 	vmov	r2, s15
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	619a      	str	r2, [r3, #24]
	if(temp->Error > 0)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	dd04      	ble.n	8001f02 <PIDRun+0x3a>
	{
		temp->MotorDir = 0;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f00:	e007      	b.n	8001f12 <PIDRun+0x4a>
	}
	else if (temp->Error < 0)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	699b      	ldr	r3, [r3, #24]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da03      	bge.n	8001f12 <PIDRun+0x4a>
	{
		temp->MotorDir = 1;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	}
	//U Update
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	ed93 7a00 	vldr	s14, [r3]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f38:	ee27 7a27 	vmul.f32	s14, s14, s15
			  - (temp->Kp + 2*temp->Kd) * temp->Error_minus
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	edd3 6a00 	vldr	s13, [r3]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	ee07 3a90 	vmov	s15, r3
 8001f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f60:	ee37 7a67 	vsub.f32	s14, s14, s15
			  + temp->Kd * temp->Error_minus2;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edd3 6a02 	vldr	s13, [r3, #8]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
	temp->Delta_U = (temp->Kp + temp->Ki + temp->Kd) * temp->Error
 8001f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f82:	ee17 2a90 	vmov	r2, s15
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	611a      	str	r2, [r3, #16]
	temp->U = temp->Delta_U + temp->U_minus;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	441a      	add	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	60da      	str	r2, [r3, #12]
	temp->U_minus = temp->U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	615a      	str	r2, [r3, #20]
	//Error Update
	temp->Error_minus2 = temp->Error_minus;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	621a      	str	r2, [r3, #32]
	temp->Error_minus = temp->Error;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	61da      	str	r2, [r3, #28]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <CascadeLoop>:

void CascadeLoop(PID* Pos, PID* Velo, float32_t xPosFeedback, float32_t VeloFeedback, QuinticTraj* TrajReference, float32_t tolerance)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b088      	sub	sp, #32
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6178      	str	r0, [r7, #20]
 8001fc4:	6139      	str	r1, [r7, #16]
 8001fc6:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fca:	edc7 0a02 	vstr	s1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	ed87 1a00 	vstr	s2, [r7]
	int32_t PosFeedback = __HAL_TIM_GET_COUNTER(&htim2);
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	; (80020c0 <CascadeLoop+0x104>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	61fb      	str	r3, [r7, #28]
	if(TrajReference->time >= TrajReference->TotalTime)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001fe8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	db27      	blt.n	8002042 <CascadeLoop+0x86>
	{
		//int32_t CurrentError = TrajReference->current_pos - PosFeedback;
		if((TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2) <= 13) || (TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2) >= -13))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b31      	ldr	r3, [pc, #196]	; (80020c0 <CascadeLoop+0x104>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b0d      	cmp	r3, #13
 8002002:	d909      	bls.n	8002018 <CascadeLoop+0x5c>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	461a      	mov	r2, r3
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <CascadeLoop+0x104>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	f113 0f0e 	cmn.w	r3, #14
 8002016:	d93c      	bls.n	8002092 <CascadeLoop+0xd6>
		{
				Pos->IsSteady = 1;
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				Velo->U = 0;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
				Pos->ESS = TrajReference->final_pos - __HAL_TIM_GET_COUNTER(&htim2);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <CascadeLoop+0x104>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	b2db      	uxtb	r3, r3
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	b25a      	sxtb	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8002040:	e027      	b.n	8002092 <CascadeLoop+0xd6>
		}
	}
	else
	{
		Pos->IsSteady = 0;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		PIDRun(Pos, PosFeedback, TrajReference->current_pos);
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	ee07 3a10 	vmov	s14, r3
 800205c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002060:	eef0 0a47 	vmov.f32	s1, s14
 8002064:	eeb0 0a67 	vmov.f32	s0, s15
 8002068:	6978      	ldr	r0, [r7, #20]
 800206a:	f7ff ff2d 	bl	8001ec8 <PIDRun>
		float32_t veloRef = Pos->U + TrajReference->current_velo;
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	4413      	add	r3, r2
 8002078:	ee07 3a90 	vmov	s15, r3
 800207c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002080:	edc7 7a06 	vstr	s15, [r7, #24]
		PIDRun(Velo, VeloFeedback, veloRef);
 8002084:	edd7 0a06 	vldr	s1, [r7, #24]
 8002088:	ed97 0a02 	vldr	s0, [r7, #8]
 800208c:	6938      	ldr	r0, [r7, #16]
 800208e:	f7ff ff1b 	bl	8001ec8 <PIDRun>
	}
	if(Velo->U > 40000)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f649 4240 	movw	r2, #40000	; 0x9c40
 800209a:	4293      	cmp	r3, r2
 800209c:	dd04      	ble.n	80020a8 <CascadeLoop+0xec>
	{
		Velo->U = 40000;
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80020a4:	60da      	str	r2, [r3, #12]
	{
		Velo->U = -40000;
	}


}
 80020a6:	e007      	b.n	80020b8 <CascadeLoop+0xfc>
	else if (Velo->U < -40000)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <CascadeLoop+0x108>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	da02      	bge.n	80020b8 <CascadeLoop+0xfc>
		Velo->U = -40000;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	4a03      	ldr	r2, [pc, #12]	; (80020c4 <CascadeLoop+0x108>)
 80020b6:	60da      	str	r2, [r3, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3720      	adds	r7, #32
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000e74 	.word	0x20000e74
 80020c4:	ffff63c0 	.word	0xffff63c0

080020c8 <QuinticSetup>:
 *      Author: tanawatp
 */
#include "QuinticTrajectory.h"

void QuinticSetup(QuinticTraj* temp, float32_t vmax, float32_t amax)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020d4:	edc7 0a01 	vstr	s1, [r7, #4]
	temp->v_max = vmax;
 80020d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e0:	ee17 2a90 	vmov	r2, s15
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	619a      	str	r2, [r3, #24]
	temp->a_max = amax;
 80020e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f0:	ee17 2a90 	vmov	r2, s15
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	61da      	str	r2, [r3, #28]
	temp->State = Ready;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	//temp->final_pos = 300;
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	0000      	movs	r0, r0
	...

08002110 <QuinticGenerator>:
void QuinticGenerator(QuinticTraj* temp,int8_t ess)
{
 8002110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	70fb      	strb	r3, [r7, #3]
	//temp->final_pos = temp->final_pos * 8192/120;
	temp->displacement = temp->final_pos - temp->start_pos;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1ad2      	subs	r2, r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	609a      	str	r2, [r3, #8]
	if(temp->displacement<0)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	da04      	bge.n	800213e <QuinticGenerator+0x2e>
	{
		temp->Dir = 1;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2020 	strb.w	r2, [r3, #32]
 800213c:	e007      	b.n	800214e <QuinticGenerator+0x3e>
	}
	else if (temp->displacement>0)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	dd03      	ble.n	800214e <QuinticGenerator+0x3e>
	{
		temp->Dir = 0;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2020 	strb.w	r2, [r3, #32]
	}
	temp->timeAcc = 0.5*sqrtf(23.094*fabs(temp->displacement)/temp->a_max);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f992 	bl	800047c <__aeabi_i2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4690      	mov	r8, r2
 800215e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002162:	a388      	add	r3, pc, #544	; (adr r3, 8002384 <QuinticGenerator+0x274>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	4640      	mov	r0, r8
 800216a:	4649      	mov	r1, r9
 800216c:	f7fe f9f0 	bl	8000550 <__aeabi_dmul>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4690      	mov	r8, r2
 8002176:	4699      	mov	r9, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f97d 	bl	800047c <__aeabi_i2d>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4640      	mov	r0, r8
 8002188:	4649      	mov	r1, r9
 800218a:	f7fe fb0b 	bl	80007a4 <__aeabi_ddiv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fcbd 	bl	8000b14 <__aeabi_d2f>
 800219a:	4603      	mov	r3, r0
 800219c:	ee00 3a10 	vmov	s0, r3
 80021a0:	f00b fb4a 	bl	800d838 <sqrtf>
 80021a4:	ee10 3a10 	vmov	r3, s0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f979 	bl	80004a0 <__aeabi_f2d>
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <QuinticGenerator+0x260>)
 80021b4:	f7fe f9cc 	bl	8000550 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f7fe fca8 	bl	8000b14 <__aeabi_d2f>
 80021c4:	4602      	mov	r2, r0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
	temp->timeVelo = 1.875*fabs(temp->displacement)/temp->v_max;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f954 	bl	800047c <__aeabi_i2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4614      	mov	r4, r2
 80021da:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	4b64      	ldr	r3, [pc, #400]	; (8002374 <QuinticGenerator+0x264>)
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fe f9b2 	bl	8000550 <__aeabi_dmul>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4614      	mov	r4, r2
 80021f2:	461d      	mov	r5, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f93f 	bl	800047c <__aeabi_i2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4620      	mov	r0, r4
 8002204:	4629      	mov	r1, r5
 8002206:	f7fe facd 	bl	80007a4 <__aeabi_ddiv>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7fe fc7f 	bl	8000b14 <__aeabi_d2f>
 8002216:	4602      	mov	r2, r0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	649a      	str	r2, [r3, #72]	; 0x48
	temp->TotalTime = MAX(temp->timeAcc,temp->timeVelo);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002228:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002230:	dd02      	ble.n	8002238 <QuinticGenerator+0x128>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	e001      	b.n	800223c <QuinticGenerator+0x12c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	63d3      	str	r3, [r2, #60]	; 0x3c
	temp->coeff[0] = temp->start_pos;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	temp->coeff[1] = 0;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	629a      	str	r2, [r3, #40]	; 0x28
	temp->coeff[2] = 0;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	62da      	str	r2, [r3, #44]	; 0x2c
	temp->coeff[3] = 10.0*temp->displacement/powf(temp->TotalTime,3);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe f908 	bl	800047c <__aeabi_i2d>
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	4b41      	ldr	r3, [pc, #260]	; (8002378 <QuinticGenerator+0x268>)
 8002272:	f7fe f96d 	bl	8000550 <__aeabi_dmul>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4614      	mov	r4, r2
 800227c:	461d      	mov	r5, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002284:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002288:	eeb0 0a67 	vmov.f32	s0, s15
 800228c:	f00b fa7c 	bl	800d788 <powf>
 8002290:	ee10 3a10 	vmov	r3, s0
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f903 	bl	80004a0 <__aeabi_f2d>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4620      	mov	r0, r4
 80022a0:	4629      	mov	r1, r5
 80022a2:	f7fe fa7f 	bl	80007a4 <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc31 	bl	8000b14 <__aeabi_d2f>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
	temp->coeff[4] = -15.0*temp->displacement/powf(temp->TotalTime,4);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7fe f8dd 	bl	800047c <__aeabi_i2d>
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	4b2d      	ldr	r3, [pc, #180]	; (800237c <QuinticGenerator+0x26c>)
 80022c8:	f7fe f942 	bl	8000550 <__aeabi_dmul>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	461d      	mov	r5, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80022da:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80022de:	eeb0 0a67 	vmov.f32	s0, s15
 80022e2:	f00b fa51 	bl	800d788 <powf>
 80022e6:	ee10 3a10 	vmov	r3, s0
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe f8d8 	bl	80004a0 <__aeabi_f2d>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	4620      	mov	r0, r4
 80022f6:	4629      	mov	r1, r5
 80022f8:	f7fe fa54 	bl	80007a4 <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc06 	bl	8000b14 <__aeabi_d2f>
 8002308:	4602      	mov	r2, r0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	635a      	str	r2, [r3, #52]	; 0x34
	temp->coeff[5] = 6.0*temp->displacement/powf(temp->TotalTime,5);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f8b2 	bl	800047c <__aeabi_i2d>
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <QuinticGenerator+0x270>)
 800231e:	f7fe f917 	bl	8000550 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4614      	mov	r4, r2
 8002328:	461d      	mov	r5, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002330:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8002334:	eeb0 0a67 	vmov.f32	s0, s15
 8002338:	f00b fa26 	bl	800d788 <powf>
 800233c:	ee10 3a10 	vmov	r3, s0
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe f8ad 	bl	80004a0 <__aeabi_f2d>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f7fe fa29 	bl	80007a4 <__aeabi_ddiv>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	f7fe fbdb 	bl	8000b14 <__aeabi_d2f>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800236e:	bf00      	nop
 8002370:	3fe00000 	.word	0x3fe00000
 8002374:	3ffe0000 	.word	0x3ffe0000
 8002378:	40240000 	.word	0x40240000
 800237c:	c02e0000 	.word	0xc02e0000
 8002380:	40180000 	.word	0x40180000
 8002384:	624dd2f2 	.word	0x624dd2f2
 8002388:	40371810 	.word	0x40371810

0800238c <QuinticEvaluator>:
void QuinticEvaluator(QuinticTraj* temp)
{
 800238c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002390:	ed2d 8b02 	vpush	{d8}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
	float32_t time = temp->time;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	60fb      	str	r3, [r7, #12]
	temp->current_pos = temp->coeff[0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
						+ temp->coeff[1]*time
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 80023ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80023b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b4:	ee37 8a27 	vadd.f32	s16, s14, s15
						+ temp->coeff[2]*powf(time,2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	edd3 8a0b 	vldr	s17, [r3, #44]	; 0x2c
 80023be:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80023c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80023c6:	f00b f9df 	bl	800d788 <powf>
 80023ca:	eef0 7a40 	vmov.f32	s15, s0
 80023ce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80023d2:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[3]*powf(time,3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	edd3 8a0c 	vldr	s17, [r3, #48]	; 0x30
 80023dc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80023e0:	ed97 0a03 	vldr	s0, [r7, #12]
 80023e4:	f00b f9d0 	bl	800d788 <powf>
 80023e8:	eef0 7a40 	vmov.f32	s15, s0
 80023ec:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80023f0:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[4]*powf(time,4)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 80023fa:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80023fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8002402:	f00b f9c1 	bl	800d788 <powf>
 8002406:	eef0 7a40 	vmov.f32	s15, s0
 800240a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800240e:	ee38 8a27 	vadd.f32	s16, s16, s15
						+ temp->coeff[5]*powf(time,5);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	edd3 8a0e 	vldr	s17, [r3, #56]	; 0x38
 8002418:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 800241c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002420:	f00b f9b2 	bl	800d788 <powf>
 8002424:	eef0 7a40 	vmov.f32	s15, s0
 8002428:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800242c:	ee78 7a27 	vadd.f32	s15, s16, s15
	temp->current_pos = temp->coeff[0]
 8002430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002434:	ee17 2a90 	vmov	r2, s15
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	60da      	str	r2, [r3, #12]

	temp->current_velo = temp->coeff[1]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	4618      	mov	r0, r3
 8002442:	f7fe f82d 	bl	80004a0 <__aeabi_f2d>
 8002446:	4604      	mov	r4, r0
 8002448:	460d      	mov	r5, r1
						+ 2.0*temp->coeff[2]*time
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe f826 	bl	80004a0 <__aeabi_f2d>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	f7fd fec4 	bl	80001e4 <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4690      	mov	r8, r2
 8002462:	4699      	mov	r9, r3
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7fe f81b 	bl	80004a0 <__aeabi_f2d>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4640      	mov	r0, r8
 8002470:	4649      	mov	r1, r9
 8002472:	f7fe f86d 	bl	8000550 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4620      	mov	r0, r4
 800247c:	4629      	mov	r1, r5
 800247e:	f7fd feb1 	bl	80001e4 <__adddf3>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4614      	mov	r4, r2
 8002488:	461d      	mov	r5, r3
						+ 3.0*temp->coeff[3]*powf(time,2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f806 	bl	80004a0 <__aeabi_f2d>
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b8e      	ldr	r3, [pc, #568]	; (80026d4 <QuinticEvaluator+0x348>)
 800249a:	f7fe f859 	bl	8000550 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4690      	mov	r8, r2
 80024a4:	4699      	mov	r9, r3
 80024a6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80024aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80024ae:	f00b f96b 	bl	800d788 <powf>
 80024b2:	ee10 3a10 	vmov	r3, s0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fd fff2 	bl	80004a0 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4640      	mov	r0, r8
 80024c2:	4649      	mov	r1, r9
 80024c4:	f7fe f844 	bl	8000550 <__aeabi_dmul>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4620      	mov	r0, r4
 80024ce:	4629      	mov	r1, r5
 80024d0:	f7fd fe88 	bl	80001e4 <__adddf3>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4614      	mov	r4, r2
 80024da:	461d      	mov	r5, r3
						+ 4.0*temp->coeff[4]*powf(time,3)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fd ffdd 	bl	80004a0 <__aeabi_f2d>
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	4b7b      	ldr	r3, [pc, #492]	; (80026d8 <QuinticEvaluator+0x34c>)
 80024ec:	f7fe f830 	bl	8000550 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4690      	mov	r8, r2
 80024f6:	4699      	mov	r9, r3
 80024f8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80024fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8002500:	f00b f942 	bl	800d788 <powf>
 8002504:	ee10 3a10 	vmov	r3, s0
 8002508:	4618      	mov	r0, r3
 800250a:	f7fd ffc9 	bl	80004a0 <__aeabi_f2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4640      	mov	r0, r8
 8002514:	4649      	mov	r1, r9
 8002516:	f7fe f81b 	bl	8000550 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4620      	mov	r0, r4
 8002520:	4629      	mov	r1, r5
 8002522:	f7fd fe5f 	bl	80001e4 <__adddf3>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4614      	mov	r4, r2
 800252c:	461d      	mov	r5, r3
						+ 5.0*temp->coeff[5]*powf(time,4);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd ffb4 	bl	80004a0 <__aeabi_f2d>
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	4b67      	ldr	r3, [pc, #412]	; (80026dc <QuinticEvaluator+0x350>)
 800253e:	f7fe f807 	bl	8000550 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4690      	mov	r8, r2
 8002548:	4699      	mov	r9, r3
 800254a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 800254e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002552:	f00b f919 	bl	800d788 <powf>
 8002556:	ee10 3a10 	vmov	r3, s0
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd ffa0 	bl	80004a0 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4640      	mov	r0, r8
 8002566:	4649      	mov	r1, r9
 8002568:	f7fd fff2 	bl	8000550 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4620      	mov	r0, r4
 8002572:	4629      	mov	r1, r5
 8002574:	f7fd fe36 	bl	80001e4 <__adddf3>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
	temp->current_velo = temp->coeff[1]
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fa80 	bl	8000a84 <__aeabi_d2iz>
 8002584:	4602      	mov	r2, r0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	611a      	str	r2, [r3, #16]

	temp->current_acc = 2.0*temp->coeff[2]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ff86 	bl	80004a0 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	f7fd fe24 	bl	80001e4 <__adddf3>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4614      	mov	r4, r2
 80025a2:	461d      	mov	r5, r3
						+ 6.0*temp->coeff[3]*time
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff79 	bl	80004a0 <__aeabi_f2d>
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <QuinticEvaluator+0x354>)
 80025b4:	f7fd ffcc 	bl	8000550 <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4690      	mov	r8, r2
 80025be:	4699      	mov	r9, r3
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7fd ff6d 	bl	80004a0 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4640      	mov	r0, r8
 80025cc:	4649      	mov	r1, r9
 80025ce:	f7fd ffbf 	bl	8000550 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4620      	mov	r0, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	f7fd fe03 	bl	80001e4 <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4614      	mov	r4, r2
 80025e4:	461d      	mov	r5, r3
						+ 12.0*temp->coeff[4]*powf(time,2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ff58 	bl	80004a0 <__aeabi_f2d>
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <QuinticEvaluator+0x358>)
 80025f6:	f7fd ffab 	bl	8000550 <__aeabi_dmul>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4690      	mov	r8, r2
 8002600:	4699      	mov	r9, r3
 8002602:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002606:	ed97 0a03 	vldr	s0, [r7, #12]
 800260a:	f00b f8bd 	bl	800d788 <powf>
 800260e:	ee10 3a10 	vmov	r3, s0
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff44 	bl	80004a0 <__aeabi_f2d>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	4640      	mov	r0, r8
 800261e:	4649      	mov	r1, r9
 8002620:	f7fd ff96 	bl	8000550 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4620      	mov	r0, r4
 800262a:	4629      	mov	r1, r5
 800262c:	f7fd fdda 	bl	80001e4 <__adddf3>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4614      	mov	r4, r2
 8002636:	461d      	mov	r5, r3
						+ 20.0*temp->coeff[5]*powf(time,3);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ff2f 	bl	80004a0 <__aeabi_f2d>
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <QuinticEvaluator+0x35c>)
 8002648:	f7fd ff82 	bl	8000550 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4690      	mov	r8, r2
 8002652:	4699      	mov	r9, r3
 8002654:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8002658:	ed97 0a03 	vldr	s0, [r7, #12]
 800265c:	f00b f894 	bl	800d788 <powf>
 8002660:	ee10 3a10 	vmov	r3, s0
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff1b 	bl	80004a0 <__aeabi_f2d>
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	4640      	mov	r0, r8
 8002670:	4649      	mov	r1, r9
 8002672:	f7fd ff6d 	bl	8000550 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4620      	mov	r0, r4
 800267c:	4629      	mov	r1, r5
 800267e:	f7fd fdb1 	bl	80001e4 <__adddf3>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
	temp->current_acc = 2.0*temp->coeff[2]
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f7fe f9fb 	bl	8000a84 <__aeabi_d2iz>
 800268e:	4602      	mov	r2, r0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	615a      	str	r2, [r3, #20]
	if(time >= temp->TotalTime)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800269a:	ed97 7a03 	vldr	s14, [r7, #12]
 800269e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a6:	da00      	bge.n	80026aa <QuinticEvaluator+0x31e>
		temp->start_pos = temp->final_pos;
		temp->current_pos = temp->start_pos;
		temp->current_velo = 0;
		temp->current_acc = 0;
	}
}
 80026a8:	e00d      	b.n	80026c6 <QuinticEvaluator+0x33a>
		temp->start_pos = temp->final_pos;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
		temp->current_pos = temp->start_pos;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	60da      	str	r2, [r3, #12]
		temp->current_velo = 0;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
		temp->current_acc = 0;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	615a      	str	r2, [r3, #20]
}
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	ecbd 8b02 	vpop	{d8}
 80026d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026d4:	40080000 	.word	0x40080000
 80026d8:	40100000 	.word	0x40100000
 80026dc:	40140000 	.word	0x40140000
 80026e0:	40180000 	.word	0x40180000
 80026e4:	40280000 	.word	0x40280000
 80026e8:	40340000 	.word	0x40340000

080026ec <QuinticRun>:
void QuinticRun(QuinticTraj* temp, int8_t ess, float32_t dt)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	460b      	mov	r3, r1
 80026f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80026fa:	72fb      	strb	r3, [r7, #11]
	switch(temp->State)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002702:	2b02      	cmp	r3, #2
 8002704:	d020      	beq.n	8002748 <QuinticRun+0x5c>
 8002706:	2b02      	cmp	r3, #2
 8002708:	dc3d      	bgt.n	8002786 <QuinticRun+0x9a>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <QuinticRun+0x28>
 800270e:	2b01      	cmp	r3, #1
 8002710:	d00b      	beq.n	800272a <QuinticRun+0x3e>
		{
			temp->State = Ready;
		}
		break;
	}
}
 8002712:	e038      	b.n	8002786 <QuinticRun+0x9a>
		if(temp->start_pos != temp->final_pos)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	429a      	cmp	r2, r3
 800271e:	d031      	beq.n	8002784 <QuinticRun+0x98>
			temp->State = PreCal;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002728:	e02c      	b.n	8002784 <QuinticRun+0x98>
		temp->time = 0;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	641a      	str	r2, [r3, #64]	; 0x40
		QuinticGenerator(temp,ess);
 8002732:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff fce9 	bl	8002110 <QuinticGenerator>
		temp->State = Run;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002746:	e01e      	b.n	8002786 <QuinticRun+0x9a>
		temp->time = temp->time + dt;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800274e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
		QuinticEvaluator(temp);
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff fe15 	bl	800238c <QuinticEvaluator>
		if(temp->time > temp->TotalTime)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800276e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	dc00      	bgt.n	800277a <QuinticRun+0x8e>
		break;
 8002778:	e005      	b.n	8002786 <QuinticRun+0x9a>
			temp->State = Ready;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		break;
 8002782:	e000      	b.n	8002786 <QuinticRun+0x9a>
		break;
 8002784:	bf00      	nop
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <InitReadEncoder>:
//{ //get time in micros
//	return __HAL_TIM_GET_COUNTER(&htim5)+ ReadEncoderParam._micros;
//}

void InitReadEncoder(ReadEncoder* Read, uint32_t samplingtime)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
	Read->MotorSetDuty = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
	Read->Pulse_Compare = 0;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	805a      	strh	r2, [r3, #2]
	Read->DIR = 0;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	711a      	strb	r2, [r3, #4]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <QEIGetFeedback>:
//	//Delay
//	QEIData.data[1] = QEIData.data[0];
//	QEIData.timestamp[1] = QEIData.timestamp[0];
//}
void QEIGetFeedback(QEI* temp, uint16_t Hz)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	807b      	strh	r3, [r7, #2]
	temp->QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 80027c4:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <QEIGetFeedback+0x4c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	461a      	mov	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
	temp->QEIVelocity = (temp->QEIPosition - temp->QEIPosition_minus) * Hz;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	fb02 f303 	mul.w	r3, r2, r3
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	edc3 7a02 	vstr	s15, [r3, #8]
	temp->QEIPosition_minus = temp->QEIPosition;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	601a      	str	r2, [r3, #0]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000e74 	.word	0x20000e74

08002808 <SetHome>:
 */
#include "Storage.h"
extern u16u8_t registerFrame[200];

void SetHome(OperationVar* temp)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	temp->HomingKey = 1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	761a      	strb	r2, [r3, #24]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,35*500);
 8002816:	4b07      	ldr	r3, [pc, #28]	; (8002834 <SetHome+0x2c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f244 425c 	movw	r2, #17500	; 0x445c
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8002820:	2201      	movs	r2, #1
 8002822:	2140      	movs	r1, #64	; 0x40
 8002824:	4804      	ldr	r0, [pc, #16]	; (8002838 <SetHome+0x30>)
 8002826:	f004 fe41 	bl	80074ac <HAL_GPIO_WritePin>
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000f28 	.word	0x20000f28
 8002838:	40020800 	.word	0x40020800

0800283c <RunX_Axis>:

void RunX_Axis(int32_t XFinalPos, uint16_t velo, uint16_t accel)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
 8002848:	4613      	mov	r3, r2
 800284a:	803b      	strh	r3, [r7, #0]
	registerFrame[0x41].U16 = XFinalPos;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <RunX_Axis+0x40>)
 8002852:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	registerFrame[0x42].U16 = velo;	//250 mm/s
 8002856:	4a09      	ldr	r2, [pc, #36]	; (800287c <RunX_Axis+0x40>)
 8002858:	887b      	ldrh	r3, [r7, #2]
 800285a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
	registerFrame[0x43].U16 = accel;	//1000 mm/s^2
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <RunX_Axis+0x40>)
 8002860:	883b      	ldrh	r3, [r7, #0]
 8002862:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
	registerFrame[0x40].U16 = 0b0010;	//Run
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <RunX_Axis+0x40>)
 8002868:	2202      	movs	r2, #2
 800286a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000ca0 	.word	0x20000ca0

08002880 <TraySetup>:
 */
#include "TrayLocalization.h"
#include "arm_math.h"
#include  "math.h"
void TraySetup(Tray* temp, float32_t x1, float32_t y1, float32_t x2, float32_t y2)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6178      	str	r0, [r7, #20]
 8002888:	ed87 0a04 	vstr	s0, [r7, #16]
 800288c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002890:	ed87 1a02 	vstr	s2, [r7, #8]
 8002894:	edc7 1a01 	vstr	s3, [r7, #4]
	temp->Edge1_X = x1;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	601a      	str	r2, [r3, #0]
	temp->Edge1_Y = y1;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	605a      	str	r2, [r3, #4]
	temp->Edge2_X = x2;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	609a      	str	r2, [r3, #8]
	temp->Edge2_Y = y2;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	60da      	str	r2, [r3, #12]

	float32_t Cal_OriginX = x2 * 10;
 80028b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	edc7 7a07 	vstr	s15, [r7, #28]
	float32_t Cal_OriginY = ( (y2*120.0/8192.0) - 350) * 10;
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7fd fded 	bl	80004a0 <__aeabi_f2d>
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	4b31      	ldr	r3, [pc, #196]	; (8002990 <TraySetup+0x110>)
 80028cc:	f7fd fe40 	bl	8000550 <__aeabi_dmul>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <TraySetup+0x114>)
 80028de:	f7fd ff61 	bl	80007a4 <__aeabi_ddiv>
 80028e2:	4602      	mov	r2, r0
 80028e4:	460b      	mov	r3, r1
 80028e6:	4610      	mov	r0, r2
 80028e8:	4619      	mov	r1, r3
 80028ea:	a327      	add	r3, pc, #156	; (adr r3, 8002988 <TraySetup+0x108>)
 80028ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f0:	f7fd fc76 	bl	80001e0 <__aeabi_dsub>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4610      	mov	r0, r2
 80028fa:	4619      	mov	r1, r3
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <TraySetup+0x118>)
 8002902:	f7fd fe25 	bl	8000550 <__aeabi_dmul>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4610      	mov	r0, r2
 800290c:	4619      	mov	r1, r3
 800290e:	f7fe f901 	bl	8000b14 <__aeabi_d2f>
 8002912:	4603      	mov	r3, r0
 8002914:	61bb      	str	r3, [r7, #24]
	if(Cal_OriginX < 0){
 8002916:	edd7 7a07 	vldr	s15, [r7, #28]
 800291a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002922:	d507      	bpl.n	8002934 <TraySetup+0xb4>
		Cal_OriginX = 65536 + Cal_OriginX;
 8002924:	edd7 7a07 	vldr	s15, [r7, #28]
 8002928:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800299c <TraySetup+0x11c>
 800292c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002930:	edc7 7a07 	vstr	s15, [r7, #28]
	}
	if(Cal_OriginY < 0){
 8002934:	edd7 7a06 	vldr	s15, [r7, #24]
 8002938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	d507      	bpl.n	8002952 <TraySetup+0xd2>
		Cal_OriginY = 65536 + Cal_OriginY;
 8002942:	edd7 7a06 	vldr	s15, [r7, #24]
 8002946:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800299c <TraySetup+0x11c>
 800294a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800294e:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	temp->ForBaseOriginX = Cal_OriginX ;
 8002952:	edd7 7a07 	vldr	s15, [r7, #28]
 8002956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800295a:	ee17 3a90 	vmov	r3, s15
 800295e:	b29a      	uxth	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	821a      	strh	r2, [r3, #16]
	temp->ForBaseOriginY = Cal_OriginY - 100 ;
 8002964:	edd7 7a06 	vldr	s15, [r7, #24]
 8002968:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80029a0 <TraySetup+0x120>
 800296c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002974:	ee17 3a90 	vmov	r3, s15
 8002978:	b29a      	uxth	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	825a      	strh	r2, [r3, #18]
}
 800297e:	bf00      	nop
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	00000000 	.word	0x00000000
 800298c:	4075e000 	.word	0x4075e000
 8002990:	405e0000 	.word	0x405e0000
 8002994:	40c00000 	.word	0x40c00000
 8002998:	40240000 	.word	0x40240000
 800299c:	47800000 	.word	0x47800000
 80029a0:	42c80000 	.word	0x42c80000

080029a4 <TrayLocalization>:
void TrayLocalization(Tray* temp)
{
 80029a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029a8:	b08e      	sub	sp, #56	; 0x38
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
	float32_t RefX_case2[3] = {10.0,25.0,40.0};
 80029ae:	4abe      	ldr	r2, [pc, #760]	; (8002ca8 <TrayLocalization+0x304>)
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80029b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t RefY_case2[3] = {50*8192.0/120.0,30*8192.0/120.0,10*8192.0/120.0};
 80029ba:	4abc      	ldr	r2, [pc, #752]	; (8002cac <TrayLocalization+0x308>)
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80029c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	float32_t deltaX = (temp->Edge2_X - temp->Edge1_X)*8192.0/120.0;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	ee17 0a90 	vmov	r0, s15
 80029da:	f7fd fd61 	bl	80004a0 <__aeabi_f2d>
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	4bb3      	ldr	r3, [pc, #716]	; (8002cb0 <TrayLocalization+0x30c>)
 80029e4:	f7fd fdb4 	bl	8000550 <__aeabi_dmul>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	4baf      	ldr	r3, [pc, #700]	; (8002cb4 <TrayLocalization+0x310>)
 80029f6:	f7fd fed5 	bl	80007a4 <__aeabi_ddiv>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f887 	bl	8000b14 <__aeabi_d2f>
 8002a06:	4603      	mov	r3, r0
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	float32_t deltaY = temp->Edge2_Y - temp->Edge1_Y;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a1a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float32_t theta;
	arm_atan2_f32(deltaY,deltaX,&theta);
 8002a1e:	f107 030c 	add.w	r3, r7, #12
 8002a22:	4618      	mov	r0, r3
 8002a24:	edd7 0a0b 	vldr	s1, [r7, #44]	; 0x2c
 8002a28:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8002a2c:	f002 fae4 	bl	8004ff8 <arm_atan2_f32>
	temp->angle = theta;
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	665a      	str	r2, [r3, #100]	; 0x64

	float32_t Cal_Orientation = -(theta * (180/PI) ) - 90;
 8002a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a3a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8002cb8 <TrayLocalization+0x314>
 8002a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a42:	eef1 7a67 	vneg.f32	s15, s15
 8002a46:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002cbc <TrayLocalization+0x318>
 8002a4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a4e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	if(Cal_Orientation < 0){
 8002a52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	d507      	bpl.n	8002a70 <TrayLocalization+0xcc>
		Cal_Orientation = Cal_Orientation + 360;
 8002a60:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a64:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002cc0 <TrayLocalization+0x31c>
 8002a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a6c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	}
	temp->ForBaseOrientation = Cal_Orientation * 100;
 8002a70:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002a74:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002cc4 <TrayLocalization+0x320>
 8002a78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a80:	ee17 3a90 	vmov	r3, s15
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	829a      	strh	r2, [r3, #20]

	int8_t i;
	int8_t j;
	uint8_t ind = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	for(i=0;i<3;i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002a96:	e0fb      	b.n	8002c90 <TrayLocalization+0x2ec>
	{
		for(j=0;j<3;j++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002a9e:	e0eb      	b.n	8002c78 <TrayLocalization+0x2d4>
		{
			temp->Holes_X[ind] = temp->Edge1_X
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fcfb 	bl	80004a0 <__aeabi_f2d>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	460d      	mov	r5, r1
							+ (cos(theta)*RefX_case2[i])
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fcf5 	bl	80004a0 <__aeabi_f2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	ec43 2b10 	vmov	d0, r2, r3
 8002abe:	f00a fdb7 	bl	800d630 <cos>
 8002ac2:	ec59 8b10 	vmov	r8, r9, d0
 8002ac6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	3338      	adds	r3, #56	; 0x38
 8002ace:	443b      	add	r3, r7
 8002ad0:	3b1c      	subs	r3, #28
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fce3 	bl	80004a0 <__aeabi_f2d>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4640      	mov	r0, r8
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	f7fd fd35 	bl	8000550 <__aeabi_dmul>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4620      	mov	r0, r4
 8002aec:	4629      	mov	r1, r5
 8002aee:	f7fd fb79 	bl	80001e4 <__adddf3>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4614      	mov	r4, r2
 8002af8:	461d      	mov	r5, r3
							- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fccf 	bl	80004a0 <__aeabi_f2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	ec43 2b10 	vmov	d0, r2, r3
 8002b0a:	f00a fde5 	bl	800d6d8 <sin>
 8002b0e:	ec59 8b10 	vmov	r8, r9, d0
 8002b12:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	3338      	adds	r3, #56	; 0x38
 8002b1a:	443b      	add	r3, r7
 8002b1c:	3b28      	subs	r3, #40	; 0x28
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fd fcbd 	bl	80004a0 <__aeabi_f2d>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4640      	mov	r0, r8
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	f7fd fd0f 	bl	8000550 <__aeabi_dmul>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	; (8002cb4 <TrayLocalization+0x310>)
 8002b40:	f7fd fd06 	bl	8000550 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <TrayLocalization+0x30c>)
 8002b52:	f7fd fe27 	bl	80007a4 <__aeabi_ddiv>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fb3f 	bl	80001e0 <__aeabi_dsub>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
			temp->Holes_X[ind] = temp->Edge1_X
 8002b66:	f897 4031 	ldrb.w	r4, [r7, #49]	; 0x31
							- (sin(theta)*RefY_case2[j]*120.0/8192.0);
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f7fd ffd1 	bl	8000b14 <__aeabi_d2f>
 8002b72:	4601      	mov	r1, r0
			temp->Holes_X[ind] = temp->Edge1_X
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	1da3      	adds	r3, r4, #6
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	6019      	str	r1, [r3, #0]
			temp->Holes_Y[ind] = temp->Edge1_Y
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fd fc8c 	bl	80004a0 <__aeabi_f2d>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	460d      	mov	r5, r1
							+ (cos(theta)*RefY_case2[j])
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fd fc86 	bl	80004a0 <__aeabi_f2d>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	ec43 2b10 	vmov	d0, r2, r3
 8002b9c:	f00a fd48 	bl	800d630 <cos>
 8002ba0:	ec59 8b10 	vmov	r8, r9, d0
 8002ba4:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	3338      	adds	r3, #56	; 0x38
 8002bac:	443b      	add	r3, r7
 8002bae:	3b28      	subs	r3, #40	; 0x28
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fc74 	bl	80004a0 <__aeabi_f2d>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4640      	mov	r0, r8
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	f7fd fcc6 	bl	8000550 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4620      	mov	r0, r4
 8002bca:	4629      	mov	r1, r5
 8002bcc:	f7fd fb0a 	bl	80001e4 <__adddf3>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4614      	mov	r4, r2
 8002bd6:	461d      	mov	r5, r3
							+ (sin(theta)*RefX_case2[i]*8192.0/120.0);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc60 	bl	80004a0 <__aeabi_f2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	ec43 2b10 	vmov	d0, r2, r3
 8002be8:	f00a fd76 	bl	800d6d8 <sin>
 8002bec:	ec59 8b10 	vmov	r8, r9, d0
 8002bf0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	3338      	adds	r3, #56	; 0x38
 8002bf8:	443b      	add	r3, r7
 8002bfa:	3b1c      	subs	r3, #28
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc4e 	bl	80004a0 <__aeabi_f2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4640      	mov	r0, r8
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	f7fd fca0 	bl	8000550 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	4b24      	ldr	r3, [pc, #144]	; (8002cb0 <TrayLocalization+0x30c>)
 8002c1e:	f7fd fc97 	bl	8000550 <__aeabi_dmul>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <TrayLocalization+0x310>)
 8002c30:	f7fd fdb8 	bl	80007a4 <__aeabi_ddiv>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4620      	mov	r0, r4
 8002c3a:	4629      	mov	r1, r5
 8002c3c:	f7fd fad2 	bl	80001e4 <__adddf3>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
			temp->Holes_Y[ind] = temp->Edge1_Y
 8002c44:	f897 4031 	ldrb.w	r4, [r7, #49]	; 0x31
							+ (sin(theta)*RefX_case2[i]*8192.0/120.0);
 8002c48:	4610      	mov	r0, r2
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7fd ff62 	bl	8000b14 <__aeabi_d2f>
 8002c50:	4601      	mov	r1, r0
			temp->Holes_Y[ind] = temp->Edge1_Y
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	f104 030e 	add.w	r3, r4, #14
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	6019      	str	r1, [r3, #0]
			ind += 1;
 8002c60:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002c64:	3301      	adds	r3, #1
 8002c66:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		for(j=0;j<3;j++)
 8002c6a:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8002c78:	f997 3032 	ldrsb.w	r3, [r7, #50]	; 0x32
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	f77f af0f 	ble.w	8002aa0 <TrayLocalization+0xfc>
	for(i=0;i<3;i++)
 8002c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8002c90:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	f77f aeff 	ble.w	8002a98 <TrayLocalization+0xf4>
		}
	}
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	3738      	adds	r7, #56	; 0x38
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ca6:	bf00      	nop
 8002ca8:	0800efc4 	.word	0x0800efc4
 8002cac:	0800efd0 	.word	0x0800efd0
 8002cb0:	40c00000 	.word	0x40c00000
 8002cb4:	405e0000 	.word	0x405e0000
 8002cb8:	42652ee0 	.word	0x42652ee0
 8002cbc:	42b40000 	.word	0x42b40000
 8002cc0:	43b40000 	.word	0x43b40000
 8002cc4:	42c80000 	.word	0x42c80000

08002cc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002cce:	463b      	mov	r3, r7
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002cda:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002cdc:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <MX_ADC1_Init+0xb8>)
 8002cde:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002ce0:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002ce2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ce6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002cee:	4b23      	ldr	r3, [pc, #140]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d02:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d08:	4b1c      	ldr	r3, [pc, #112]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <MX_ADC1_Init+0xbc>)
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d16:	2202      	movs	r2, #2
 8002d18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d28:	4814      	ldr	r0, [pc, #80]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d2a:	f003 f8f3 	bl	8005f14 <HAL_ADC_Init>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002d34:	f001 fcf0 	bl	8004718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002d38:	230a      	movs	r3, #10
 8002d3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8002d40:	2306      	movs	r3, #6
 8002d42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d44:	463b      	mov	r3, r7
 8002d46:	4619      	mov	r1, r3
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d4a:	f003 fa35 	bl	80061b8 <HAL_ADC_ConfigChannel>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002d54:	f001 fce0 	bl	8004718 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8002d58:	230b      	movs	r3, #11
 8002d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d60:	463b      	mov	r3, r7
 8002d62:	4619      	mov	r1, r3
 8002d64:	4805      	ldr	r0, [pc, #20]	; (8002d7c <MX_ADC1_Init+0xb4>)
 8002d66:	f003 fa27 	bl	80061b8 <HAL_ADC_ConfigChannel>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002d70:	f001 fcd2 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200002e4 	.word	0x200002e4
 8002d80:	40012000 	.word	0x40012000
 8002d84:	0f000001 	.word	0x0f000001

08002d88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0314 	add.w	r3, r7, #20
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2f      	ldr	r2, [pc, #188]	; (8002e64 <HAL_ADC_MspInit+0xdc>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d157      	bne.n	8002e5a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_ADC_MspInit+0xe0>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a2d      	ldr	r2, [pc, #180]	; (8002e68 <HAL_ADC_MspInit+0xe0>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_ADC_MspInit+0xe0>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b27      	ldr	r3, [pc, #156]	; (8002e68 <HAL_ADC_MspInit+0xe0>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	4a26      	ldr	r2, [pc, #152]	; (8002e68 <HAL_ADC_MspInit+0xe0>)
 8002dd0:	f043 0304 	orr.w	r3, r3, #4
 8002dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd6:	4b24      	ldr	r3, [pc, #144]	; (8002e68 <HAL_ADC_MspInit+0xe0>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002de2:	2303      	movs	r3, #3
 8002de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002de6:	2303      	movs	r3, #3
 8002de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	4619      	mov	r1, r3
 8002df4:	481d      	ldr	r0, [pc, #116]	; (8002e6c <HAL_ADC_MspInit+0xe4>)
 8002df6:	f004 f9bd 	bl	8007174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	; (8002e74 <HAL_ADC_MspInit+0xec>)
 8002dfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e22:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e3e:	480c      	ldr	r0, [pc, #48]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e40:	f003 fd7c 	bl	800693c <HAL_DMA_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002e4a:	f001 fc65 	bl	8004718 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38
 8002e54:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <HAL_ADC_MspInit+0xe8>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e5a:	bf00      	nop
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40012000 	.word	0x40012000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	2000032c 	.word	0x2000032c
 8002e74:	40026410 	.word	0x40026410

08002e78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	607b      	str	r3, [r7, #4]
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <MX_DMA_Init+0x68>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <MX_DMA_Init+0x68>)
 8002e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <MX_DMA_Init+0x68>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <MX_DMA_Init+0x68>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	4a0f      	ldr	r2, [pc, #60]	; (8002ee0 <MX_DMA_Init+0x68>)
 8002ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <MX_DMA_Init+0x68>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2011      	movs	r0, #17
 8002ebc:	f003 fd07 	bl	80068ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002ec0:	2011      	movs	r0, #17
 8002ec2:	f003 fd20 	bl	8006906 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2038      	movs	r0, #56	; 0x38
 8002ecc:	f003 fcff 	bl	80068ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ed0:	2038      	movs	r0, #56	; 0x38
 8002ed2:	f003 fd18 	bl	8006906 <HAL_NVIC_EnableIRQ>

}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	609a      	str	r2, [r3, #8]
 8002ef6:	60da      	str	r2, [r3, #12]
 8002ef8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	4b7a      	ldr	r3, [pc, #488]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a79      	ldr	r2, [pc, #484]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b77      	ldr	r3, [pc, #476]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a72      	ldr	r2, [pc, #456]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b70      	ldr	r3, [pc, #448]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b6c      	ldr	r3, [pc, #432]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a6b      	ldr	r2, [pc, #428]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b69      	ldr	r3, [pc, #420]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	4b65      	ldr	r3, [pc, #404]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	4a64      	ldr	r2, [pc, #400]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5e:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	607b      	str	r3, [r7, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	603b      	str	r3, [r7, #0]
 8002f6e:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	4a5d      	ldr	r2, [pc, #372]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7a:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <MX_GPIO_Init+0x204>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f86:	2200      	movs	r2, #0
 8002f88:	2120      	movs	r1, #32
 8002f8a:	4858      	ldr	r0, [pc, #352]	; (80030ec <MX_GPIO_Init+0x208>)
 8002f8c:	f004 fa8e 	bl	80074ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002f90:	2200      	movs	r2, #0
 8002f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f96:	4856      	ldr	r0, [pc, #344]	; (80030f0 <MX_GPIO_Init+0x20c>)
 8002f98:	f004 fa88 	bl	80074ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8002fa2:	4854      	ldr	r0, [pc, #336]	; (80030f4 <MX_GPIO_Init+0x210>)
 8002fa4:	f004 fa82 	bl	80074ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2104      	movs	r1, #4
 8002fac:	4852      	ldr	r0, [pc, #328]	; (80030f8 <MX_GPIO_Init+0x214>)
 8002fae:	f004 fa7d 	bl	80074ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	484a      	ldr	r0, [pc, #296]	; (80030f4 <MX_GPIO_Init+0x210>)
 8002fca:	f004 f8d3 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fce:	2304      	movs	r3, #4
 8002fd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4844      	ldr	r0, [pc, #272]	; (80030f4 <MX_GPIO_Init+0x210>)
 8002fe2:	f004 f8c7 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002fe6:	2310      	movs	r3, #16
 8002fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	483c      	ldr	r0, [pc, #240]	; (80030ec <MX_GPIO_Init+0x208>)
 8002ffa:	f004 f8bb 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002ffe:	2320      	movs	r3, #32
 8003000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	4619      	mov	r1, r3
 8003014:	4835      	ldr	r0, [pc, #212]	; (80030ec <MX_GPIO_Init+0x208>)
 8003016:	f004 f8ad 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800301a:	2301      	movs	r3, #1
 800301c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003026:	f107 0314 	add.w	r3, r7, #20
 800302a:	4619      	mov	r1, r3
 800302c:	4830      	ldr	r0, [pc, #192]	; (80030f0 <MX_GPIO_Init+0x20c>)
 800302e:	f004 f8a1 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003032:	2304      	movs	r3, #4
 8003034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003036:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800303a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003040:	f107 0314 	add.w	r3, r7, #20
 8003044:	4619      	mov	r1, r3
 8003046:	482a      	ldr	r0, [pc, #168]	; (80030f0 <MX_GPIO_Init+0x20c>)
 8003048:	f004 f894 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800304c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003052:	2301      	movs	r3, #1
 8003054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800305e:	f107 0314 	add.w	r3, r7, #20
 8003062:	4619      	mov	r1, r3
 8003064:	4822      	ldr	r0, [pc, #136]	; (80030f0 <MX_GPIO_Init+0x20c>)
 8003066:	f004 f885 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800306a:	f44f 53e2 	mov.w	r3, #7232	; 0x1c40
 800306e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003070:	2301      	movs	r3, #1
 8003072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003078:	2300      	movs	r3, #0
 800307a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	4619      	mov	r1, r3
 8003082:	481c      	ldr	r0, [pc, #112]	; (80030f4 <MX_GPIO_Init+0x210>)
 8003084:	f004 f876 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003088:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800308c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800308e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003092:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003098:	f107 0314 	add.w	r3, r7, #20
 800309c:	4619      	mov	r1, r3
 800309e:	4813      	ldr	r0, [pc, #76]	; (80030ec <MX_GPIO_Init+0x208>)
 80030a0:	f004 f868 	bl	8007174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030a4:	2304      	movs	r3, #4
 80030a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b0:	2300      	movs	r3, #0
 80030b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b4:	f107 0314 	add.w	r3, r7, #20
 80030b8:	4619      	mov	r1, r3
 80030ba:	480f      	ldr	r0, [pc, #60]	; (80030f8 <MX_GPIO_Init+0x214>)
 80030bc:	f004 f85a 	bl	8007174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80030c0:	2200      	movs	r2, #0
 80030c2:	2100      	movs	r1, #0
 80030c4:	2008      	movs	r0, #8
 80030c6:	f003 fc02 	bl	80068ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80030ca:	2008      	movs	r0, #8
 80030cc:	f003 fc1b 	bl	8006906 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2100      	movs	r1, #0
 80030d4:	2028      	movs	r0, #40	; 0x28
 80030d6:	f003 fbfa 	bl	80068ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80030da:	2028      	movs	r0, #40	; 0x28
 80030dc:	f003 fc13 	bl	8006906 <HAL_NVIC_EnableIRQ>

}
 80030e0:	bf00      	nop
 80030e2:	3728      	adds	r7, #40	; 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40023800 	.word	0x40023800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	40020800 	.word	0x40020800
 80030f8:	40020c00 	.word	0x40020c00

080030fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003100:	4b12      	ldr	r3, [pc, #72]	; (800314c <MX_I2C1_Init+0x50>)
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <MX_I2C1_Init+0x54>)
 8003104:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003106:	4b11      	ldr	r3, [pc, #68]	; (800314c <MX_I2C1_Init+0x50>)
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <MX_I2C1_Init+0x58>)
 800310a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <MX_I2C1_Init+0x50>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003112:	4b0e      	ldr	r3, [pc, #56]	; (800314c <MX_I2C1_Init+0x50>)
 8003114:	2200      	movs	r2, #0
 8003116:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003118:	4b0c      	ldr	r3, [pc, #48]	; (800314c <MX_I2C1_Init+0x50>)
 800311a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800311e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <MX_I2C1_Init+0x50>)
 8003122:	2200      	movs	r2, #0
 8003124:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <MX_I2C1_Init+0x50>)
 8003128:	2200      	movs	r2, #0
 800312a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800312c:	4b07      	ldr	r3, [pc, #28]	; (800314c <MX_I2C1_Init+0x50>)
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <MX_I2C1_Init+0x50>)
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003138:	4804      	ldr	r0, [pc, #16]	; (800314c <MX_I2C1_Init+0x50>)
 800313a:	f004 f9e9 	bl	8007510 <HAL_I2C_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003144:	f001 fae8 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	2000038c 	.word	0x2000038c
 8003150:	40005400 	.word	0x40005400
 8003154:	000186a0 	.word	0x000186a0

08003158 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08a      	sub	sp, #40	; 0x28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003160:	f107 0314 	add.w	r3, r7, #20
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	605a      	str	r2, [r3, #4]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	60da      	str	r2, [r3, #12]
 800316e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_I2C_MspInit+0xa4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d13c      	bne.n	80031f4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_I2C_MspInit+0xa8>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <HAL_I2C_MspInit+0xa8>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <HAL_I2C_MspInit+0xa8>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003196:	f44f 7340 	mov.w	r3, #768	; 0x300
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800319c:	2312      	movs	r3, #18
 800319e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a4:	2303      	movs	r3, #3
 80031a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031a8:	2304      	movs	r3, #4
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	4814      	ldr	r0, [pc, #80]	; (8003204 <HAL_I2C_MspInit+0xac>)
 80031b4:	f003 ffde 	bl	8007174 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_I2C_MspInit+0xa8>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <HAL_I2C_MspInit+0xa8>)
 80031c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031c6:	6413      	str	r3, [r2, #64]	; 0x40
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_I2C_MspInit+0xa8>)
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2100      	movs	r1, #0
 80031d8:	201f      	movs	r0, #31
 80031da:	f003 fb78 	bl	80068ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80031de:	201f      	movs	r0, #31
 80031e0:	f003 fb91 	bl	8006906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2100      	movs	r1, #0
 80031e8:	2020      	movs	r0, #32
 80031ea:	f003 fb70 	bl	80068ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80031ee:	2020      	movs	r0, #32
 80031f0:	f003 fb89 	bl	8006906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80031f4:	bf00      	nop
 80031f6:	3728      	adds	r7, #40	; 0x28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40005400 	.word	0x40005400
 8003200:	40023800 	.word	0x40023800
 8003204:	40020400 	.word	0x40020400

08003208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003208:	b590      	push	{r4, r7, lr}
 800320a:	ed2d 8b02 	vpush	{d8}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003212:	f002 fe0d 	bl	8005e30 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003216:	f000 fdcb 	bl	8003db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800321a:	f7ff fe63 	bl	8002ee4 <MX_GPIO_Init>
  MX_DMA_Init();
 800321e:	f7ff fe2b 	bl	8002e78 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003222:	f001 fe11 	bl	8004e48 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8003226:	f001 fb53 	bl	80048d0 <MX_TIM2_Init>
  MX_TIM5_Init();
 800322a:	f001 fc69 	bl	8004b00 <MX_TIM5_Init>
  MX_TIM3_Init();
 800322e:	f001 fba3 	bl	8004978 <MX_TIM3_Init>
  MX_I2C1_Init();
 8003232:	f7ff ff63 	bl	80030fc <MX_I2C1_Init>
  MX_TIM4_Init();
 8003236:	f001 fc15 	bl	8004a64 <MX_TIM4_Init>
  MX_TIM11_Init();
 800323a:	f001 fcaf 	bl	8004b9c <MX_TIM11_Init>
  MX_ADC1_Init();
 800323e:	f7ff fd43 	bl	8002cc8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //Setup Initial vaules
  InitKalmanStruct(&KF,Var_Q,Var_R);
 8003242:	4b3e      	ldr	r3, [pc, #248]	; (800333c <main+0x134>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	4b3d      	ldr	r3, [pc, #244]	; (8003340 <main+0x138>)
 800324a:	ed93 7a00 	vldr	s14, [r3]
 800324e:	eef0 0a47 	vmov.f32	s1, s14
 8003252:	eeb0 0a67 	vmov.f32	s0, s15
 8003256:	483b      	ldr	r0, [pc, #236]	; (8003344 <main+0x13c>)
 8003258:	f7fe f8b4 	bl	80013c4 <InitKalmanStruct>

  InitReadEncoder(&ReadEncoderParam, 1000);
 800325c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003260:	4839      	ldr	r0, [pc, #228]	; (8003348 <main+0x140>)
 8003262:	f7ff fa94 	bl	800278e <InitReadEncoder>

  QuinticSetup(&QuinticVar, vmax, amax);
 8003266:	4b39      	ldr	r3, [pc, #228]	; (800334c <main+0x144>)
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	4b38      	ldr	r3, [pc, #224]	; (8003350 <main+0x148>)
 800326e:	ed93 7a00 	vldr	s14, [r3]
 8003272:	eef0 0a47 	vmov.f32	s1, s14
 8003276:	eeb0 0a67 	vmov.f32	s0, s15
 800327a:	4836      	ldr	r0, [pc, #216]	; (8003354 <main+0x14c>)
 800327c:	f7fe ff24 	bl	80020c8 <QuinticSetup>

  PIDSetup(&PositionLoop, 15, 2.5, 0.00001, 10);
 8003280:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003284:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8003358 <main+0x150>
 8003288:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
 800328c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8003290:	4832      	ldr	r0, [pc, #200]	; (800335c <main+0x154>)
 8003292:	f7fe fde9 	bl	8001e68 <PIDSetup>
  PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 8003296:	eddf 1a32 	vldr	s3, [pc, #200]	; 8003360 <main+0x158>
 800329a:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8003364 <main+0x15c>
 800329e:	eddf 0a32 	vldr	s1, [pc, #200]	; 8003368 <main+0x160>
 80032a2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80032a6:	4831      	ldr	r0, [pc, #196]	; (800336c <main+0x164>)
 80032a8:	f7fe fdde 	bl	8001e68 <PIDSetup>


  //Timers Start
  HAL_TIM_Base_Start_IT(&htim4);
 80032ac:	4830      	ldr	r0, [pc, #192]	; (8003370 <main+0x168>)
 80032ae:	f007 fa93 	bl	800a7d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);  //Start QEI
 80032b2:	2104      	movs	r1, #4
 80032b4:	482f      	ldr	r0, [pc, #188]	; (8003374 <main+0x16c>)
 80032b6:	f007 fdef 	bl	800ae98 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);//Start PWM
 80032ba:	2108      	movs	r1, #8
 80032bc:	482e      	ldr	r0, [pc, #184]	; (8003378 <main+0x170>)
 80032be:	f007 fbb9 	bl	800aa34 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 80032c2:	482e      	ldr	r0, [pc, #184]	; (800337c <main+0x174>)
 80032c4:	f007 fa88 	bl	800a7d8 <HAL_TIM_Base_Start_IT>

  hmodbus.huart = &huart2;
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <main+0x178>)
 80032ca:	4a2e      	ldr	r2, [pc, #184]	; (8003384 <main+0x17c>)
 80032cc:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80032ce:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <main+0x178>)
 80032d0:	4a2d      	ldr	r2, [pc, #180]	; (8003388 <main+0x180>)
 80032d2:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80032d4:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <main+0x178>)
 80032d6:	2215      	movs	r2, #21
 80032d8:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 200;
 80032da:	4b29      	ldr	r3, [pc, #164]	; (8003380 <main+0x178>)
 80032dc:	22c8      	movs	r2, #200	; 0xc8
 80032de:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80032e0:	492a      	ldr	r1, [pc, #168]	; (800338c <main+0x184>)
 80032e2:	4827      	ldr	r0, [pc, #156]	; (8003380 <main+0x178>)
 80032e4:	f7fe fab6 	bl	8001854 <Modbus_init>

  HAL_ADC_Start_DMA(&hadc1, VR, 2); // Start ADC
 80032e8:	2202      	movs	r2, #2
 80032ea:	4929      	ldr	r1, [pc, #164]	; (8003390 <main+0x188>)
 80032ec:	4829      	ldr	r0, [pc, #164]	; (8003394 <main+0x18c>)
 80032ee:	f002 fe55 	bl	8005f9c <HAL_ADC_Start_DMA>

//	//EndEff
	testState = SoftReset;
 80032f2:	4b29      	ldr	r3, [pc, #164]	; (8003398 <main+0x190>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
	Stamp = 1;
 80032f8:	4b28      	ldr	r3, [pc, #160]	; (800339c <main+0x194>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	701a      	strb	r2, [r3, #0]
	TestMode();
 80032fe:	f7fd ff2f 	bl	8001160 <TestMode>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 8003302:	f7fe fb33 	bl	800196c <Modbus_Protocal_Worker>
	static uint32_t timestamp =0;
	static uint32_t Modbustimestamp = 0;
	if((KF.x_hat[1] >= 1000) || (KF.x_hat[1] <= -1000))
 8003306:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <main+0x13c>)
 8003308:	edd3 7a01 	vldr	s15, [r3, #4]
 800330c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80033a0 <main+0x198>
 8003310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	da09      	bge.n	800332e <main+0x126>
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <main+0x13c>)
 800331c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003320:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80033a4 <main+0x19c>
 8003324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	d83e      	bhi.n	80033ac <main+0x1a4>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, SET);
 800332e:	2201      	movs	r2, #1
 8003330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003334:	481c      	ldr	r0, [pc, #112]	; (80033a8 <main+0x1a0>)
 8003336:	f004 f8b9 	bl	80074ac <HAL_GPIO_WritePin>
 800333a:	e03d      	b.n	80033b8 <main+0x1b0>
 800333c:	2000022c 	.word	0x2000022c
 8003340:	20000230 	.word	0x20000230
 8003344:	200004dc 	.word	0x200004dc
 8003348:	20000418 	.word	0x20000418
 800334c:	20000224 	.word	0x20000224
 8003350:	20000228 	.word	0x20000228
 8003354:	2000042c 	.word	0x2000042c
 8003358:	3727c5ac 	.word	0x3727c5ac
 800335c:	2000047c 	.word	0x2000047c
 8003360:	37fba882 	.word	0x37fba882
 8003364:	00000000 	.word	0x00000000
 8003368:	322bcc77 	.word	0x322bcc77
 800336c:	200004ac 	.word	0x200004ac
 8003370:	20000fdc 	.word	0x20000fdc
 8003374:	20000e74 	.word	0x20000e74
 8003378:	20000f28 	.word	0x20000f28
 800337c:	20001090 	.word	0x20001090
 8003380:	200007c8 	.word	0x200007c8
 8003384:	200011f8 	.word	0x200011f8
 8003388:	20001144 	.word	0x20001144
 800338c:	20000ca0 	.word	0x20000ca0
 8003390:	200002d4 	.word	0x200002d4
 8003394:	200002e4 	.word	0x200002e4
 8003398:	200002c4 	.word	0x200002c4
 800339c:	200002c0 	.word	0x200002c0
 80033a0:	447a0000 	.word	0x447a0000
 80033a4:	c47a0000 	.word	0xc47a0000
 80033a8:	40020800 	.word	0x40020800
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 80033ac:	2200      	movs	r2, #0
 80033ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033b2:	4897      	ldr	r0, [pc, #604]	; (8003610 <main+0x408>)
 80033b4:	f004 f87a 	bl	80074ac <HAL_GPIO_WritePin>
	}

	if (HAL_GetTick() >= Modbustimestamp)
 80033b8:	f002 fda0 	bl	8005efc <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b95      	ldr	r3, [pc, #596]	; (8003614 <main+0x40c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	f0c0 8175 	bcc.w	80036b2 <main+0x4aa>
	{
	  Modbustimestamp = HAL_GetTick() + 200;
 80033c8:	f002 fd98 	bl	8005efc <HAL_GetTick>
 80033cc:	4603      	mov	r3, r0
 80033ce:	33c8      	adds	r3, #200	; 0xc8
 80033d0:	4a90      	ldr	r2, [pc, #576]	; (8003614 <main+0x40c>)
 80033d2:	6013      	str	r3, [r2, #0]
	  registerFrame[0x00].U16 = 0b0101100101100001;
 80033d4:	4b90      	ldr	r3, [pc, #576]	; (8003618 <main+0x410>)
 80033d6:	f645 1261 	movw	r2, #22881	; 0x5961
 80033da:	801a      	strh	r2, [r3, #0]
	  //Update y axis position to basesystem
	  registerFrame[0x11].U16 = ((((QEIData.QEIPosition-OpVar.HomePosOffset) * 120) / 8192 ) + 1) * 10;
 80033dc:	4b8f      	ldr	r3, [pc, #572]	; (800361c <main+0x414>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	461a      	mov	r2, r3
 80033e2:	4b8f      	ldr	r3, [pc, #572]	; (8003620 <main+0x418>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	1ad2      	subs	r2, r2, r3
 80033e8:	4613      	mov	r3, r2
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	1a9b      	subs	r3, r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	0b5b      	lsrs	r3, r3, #13
 80033f2:	3301      	adds	r3, #1
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	461a      	mov	r2, r3
 80033f8:	0092      	lsls	r2, r2, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4b85      	ldr	r3, [pc, #532]	; (8003618 <main+0x410>)
 8003402:	845a      	strh	r2, [r3, #34]	; 0x22
	  registerFrame[0x12].U16 = (KF.x_hat[1] * 120/8192) * 10;
 8003404:	4b87      	ldr	r3, [pc, #540]	; (8003624 <main+0x41c>)
 8003406:	edd3 7a01 	vldr	s15, [r3, #4]
 800340a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8003628 <main+0x420>
 800340e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003412:	eddf 6a86 	vldr	s13, [pc, #536]	; 800362c <main+0x424>
 8003416:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800341a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800341e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003426:	ee17 3a90 	vmov	r3, s15
 800342a:	b29a      	uxth	r2, r3
 800342c:	4b7a      	ldr	r3, [pc, #488]	; (8003618 <main+0x410>)
 800342e:	849a      	strh	r2, [r3, #36]	; 0x24
	  registerFrame[0x13].U16 =	((KF.x_hat[1] - KF.x_hat_minus[1])* 120/8192) * 2500 * 10;
 8003430:	4b7c      	ldr	r3, [pc, #496]	; (8003624 <main+0x41c>)
 8003432:	ed93 7a01 	vldr	s14, [r3, #4]
 8003436:	4b7b      	ldr	r3, [pc, #492]	; (8003624 <main+0x41c>)
 8003438:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800343c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003440:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8003628 <main+0x420>
 8003444:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003448:	eddf 6a78 	vldr	s13, [pc, #480]	; 800362c <main+0x424>
 800344c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003450:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003630 <main+0x428>
 8003454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003458:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800345c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003464:	ee17 3a90 	vmov	r3, s15
 8003468:	b29a      	uxth	r2, r3
 800346a:	4b6b      	ldr	r3, [pc, #428]	; (8003618 <main+0x410>)
 800346c:	84da      	strh	r2, [r3, #38]	; 0x26
		static uint32_t Tray_Delay = 0; // Tray delay counter
		//Set Pick Tray
		if(registerFrame[0x01].U16 == 1)
 800346e:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <main+0x410>)
 8003470:	885b      	ldrh	r3, [r3, #2]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d163      	bne.n	800353e <main+0x336>
		{
			if(registerFrame[0x02].U16 == 1){
 8003476:	4b68      	ldr	r3, [pc, #416]	; (8003618 <main+0x410>)
 8003478:	889b      	ldrh	r3, [r3, #4]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d107      	bne.n	800348e <main+0x286>
					testState = TestOn;
 800347e:	4b6d      	ldr	r3, [pc, #436]	; (8003634 <main+0x42c>)
 8003480:	2202      	movs	r2, #2
 8003482:	701a      	strb	r2, [r3, #0]
					Stamp = 1;
 8003484:	4b6c      	ldr	r3, [pc, #432]	; (8003638 <main+0x430>)
 8003486:	2201      	movs	r2, #1
 8003488:	701a      	strb	r2, [r3, #0]
					TestMode();
 800348a:	f7fd fe69 	bl	8001160 <TestMode>
		}
		registerFrame[0x10].U16 = 1; //Jog of Pick Tray
 800348e:	4b62      	ldr	r3, [pc, #392]	; (8003618 <main+0x410>)
 8003490:	2201      	movs	r2, #1
 8003492:	841a      	strh	r2, [r3, #32]
		if(TrayPoint[3] != 0) // Y of Right edge have value of Pick tray
 8003494:	4b69      	ldr	r3, [pc, #420]	; (800363c <main+0x434>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d050      	beq.n	800353e <main+0x336>
		{
			//For use
			TraySetup(&PickTray,TrayPoint[0]/10.0, TrayPoint[1], TrayPoint[2]/10.0, TrayPoint[3]); //Input value to calculate
 800349c:	4b67      	ldr	r3, [pc, #412]	; (800363c <main+0x434>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fc ffeb 	bl	800047c <__aeabi_i2d>
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	4b65      	ldr	r3, [pc, #404]	; (8003640 <main+0x438>)
 80034ac:	f7fd f97a 	bl	80007a4 <__aeabi_ddiv>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fd fb2c 	bl	8000b14 <__aeabi_d2f>
 80034bc:	4604      	mov	r4, r0
 80034be:	4b5f      	ldr	r3, [pc, #380]	; (800363c <main+0x434>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <main+0x434>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fc ffd4 	bl	800047c <__aeabi_i2d>
 80034d4:	f04f 0200 	mov.w	r2, #0
 80034d8:	4b59      	ldr	r3, [pc, #356]	; (8003640 <main+0x438>)
 80034da:	f7fd f963 	bl	80007a4 <__aeabi_ddiv>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4610      	mov	r0, r2
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7fd fb15 	bl	8000b14 <__aeabi_d2f>
 80034ea:	4602      	mov	r2, r0
 80034ec:	4b53      	ldr	r3, [pc, #332]	; (800363c <main+0x434>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	ee07 3a90 	vmov	s15, r3
 80034f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f8:	eef0 1a67 	vmov.f32	s3, s15
 80034fc:	ee01 2a10 	vmov	s2, r2
 8003500:	eef0 0a48 	vmov.f32	s1, s16
 8003504:	ee00 4a10 	vmov	s0, r4
 8003508:	484e      	ldr	r0, [pc, #312]	; (8003644 <main+0x43c>)
 800350a:	f7ff f9b9 	bl	8002880 <TraySetup>

			//For test
//				TraySetup(&PickTray,700/10.0, 19084, 1128/10.0, 17380);

			TrayLocalization(&PickTray); //Find 9 Holes of Pick Tray
 800350e:	484d      	ldr	r0, [pc, #308]	; (8003644 <main+0x43c>)
 8003510:	f7ff fa48 	bl	80029a4 <TrayLocalization>
			registerFrame[0x20].U16 = PickTray.ForBaseOriginX; //Upload X Pick
 8003514:	4b4b      	ldr	r3, [pc, #300]	; (8003644 <main+0x43c>)
 8003516:	8a1a      	ldrh	r2, [r3, #16]
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <main+0x410>)
 800351a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[0x21].U16 = PickTray.ForBaseOriginY; //Upload Y Pick
 800351e:	4b49      	ldr	r3, [pc, #292]	; (8003644 <main+0x43c>)
 8003520:	8a5a      	ldrh	r2, [r3, #18]
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <main+0x410>)
 8003524:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[0x22].U16 = PickTray.ForBaseOrientation; //Upload Angle Pick
 8003528:	4b46      	ldr	r3, [pc, #280]	; (8003644 <main+0x43c>)
 800352a:	8a9a      	ldrh	r2, [r3, #20]
 800352c:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <main+0x410>)
 800352e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			registerFrame[0x10].U16 = 0; //Finish Command
 8003532:	4b39      	ldr	r3, [pc, #228]	; (8003618 <main+0x410>)
 8003534:	2200      	movs	r2, #0
 8003536:	841a      	strh	r2, [r3, #32]
			registerFrame[0x01].U16 = 0; //Finish Command
 8003538:	4b37      	ldr	r3, [pc, #220]	; (8003618 <main+0x410>)
 800353a:	2200      	movs	r2, #0
 800353c:	805a      	strh	r2, [r3, #2]
			Tray_Delay = HAL_GetTick() + 350; // Add delay
			registerFrame[0x10].U16 = 1; //Jog Pick Set
			//registerFrame[0x10].U16 = 0; //Jog Pick Reset*/
		}
		//Set Place Tray
		if(registerFrame[0x01].U16 == 2)
 800353e:	4b36      	ldr	r3, [pc, #216]	; (8003618 <main+0x410>)
 8003540:	885b      	ldrh	r3, [r3, #2]
 8003542:	2b02      	cmp	r3, #2
 8003544:	f040 809b 	bne.w	800367e <main+0x476>
		{
			registerFrame[0x10].U16 = 2; //Jog of Place Tray
 8003548:	4b33      	ldr	r3, [pc, #204]	; (8003618 <main+0x410>)
 800354a:	2202      	movs	r2, #2
 800354c:	841a      	strh	r2, [r3, #32]
			if(TrayPoint[7] != 0){ // Y of Right edge have value of Place tray
 800354e:	4b3b      	ldr	r3, [pc, #236]	; (800363c <main+0x434>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8093 	beq.w	800367e <main+0x476>
				//For use
				TraySetup(&PlaceTray,TrayPoint[4]/10.0, TrayPoint[5], TrayPoint[6]/10.0, TrayPoint[7]);
 8003558:	4b38      	ldr	r3, [pc, #224]	; (800363c <main+0x434>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fc ff8d 	bl	800047c <__aeabi_i2d>
 8003562:	f04f 0200 	mov.w	r2, #0
 8003566:	4b36      	ldr	r3, [pc, #216]	; (8003640 <main+0x438>)
 8003568:	f7fd f91c 	bl	80007a4 <__aeabi_ddiv>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4610      	mov	r0, r2
 8003572:	4619      	mov	r1, r3
 8003574:	f7fd face 	bl	8000b14 <__aeabi_d2f>
 8003578:	4604      	mov	r4, r0
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <main+0x434>)
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <main+0x434>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc ff76 	bl	800047c <__aeabi_i2d>
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <main+0x438>)
 8003596:	f7fd f905 	bl	80007a4 <__aeabi_ddiv>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	4610      	mov	r0, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	f7fd fab7 	bl	8000b14 <__aeabi_d2f>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <main+0x434>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035b4:	eef0 1a67 	vmov.f32	s3, s15
 80035b8:	ee01 2a10 	vmov	s2, r2
 80035bc:	eef0 0a48 	vmov.f32	s1, s16
 80035c0:	ee00 4a10 	vmov	s0, r4
 80035c4:	4820      	ldr	r0, [pc, #128]	; (8003648 <main+0x440>)
 80035c6:	f7ff f95b 	bl	8002880 <TraySetup>
				//For test
//				TraySetup(&PlaceTray,-1083/10.0, 31685, -1369/10.0, 29007);
				TrayLocalization(&PlaceTray);
 80035ca:	481f      	ldr	r0, [pc, #124]	; (8003648 <main+0x440>)
 80035cc:	f7ff f9ea 	bl	80029a4 <TrayLocalization>
				registerFrame[0x23].U16 = PlaceTray.ForBaseOriginX; //Upload X Place
 80035d0:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <main+0x440>)
 80035d2:	8a1a      	ldrh	r2, [r3, #16]
 80035d4:	4b10      	ldr	r3, [pc, #64]	; (8003618 <main+0x410>)
 80035d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
				registerFrame[0x24].U16 = PlaceTray.ForBaseOriginY; //Upload Y Place
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <main+0x440>)
 80035dc:	8a5a      	ldrh	r2, [r3, #18]
 80035de:	4b0e      	ldr	r3, [pc, #56]	; (8003618 <main+0x410>)
 80035e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
				registerFrame[0x25].U16 = PlaceTray.ForBaseOrientation; //Upload Angle Place
 80035e4:	4b18      	ldr	r3, [pc, #96]	; (8003648 <main+0x440>)
 80035e6:	8a9a      	ldrh	r2, [r3, #20]
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <main+0x410>)
 80035ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				registerFrame[0x10].U16 = 0; //Finish Command
 80035ee:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <main+0x410>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	841a      	strh	r2, [r3, #32]
				registerFrame[0x01].U16 = 0; //Finish Command
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <main+0x410>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	805a      	strh	r2, [r3, #2]
				//Reset Tray Point
				SubState = TrayP1;
 80035fa:	4b14      	ldr	r3, [pc, #80]	; (800364c <main+0x444>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
				OpVar.Tray_SetTo = 0;
 8003600:	4b07      	ldr	r3, [pc, #28]	; (8003620 <main+0x418>)
 8003602:	2200      	movs	r2, #0
 8003604:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				for (uint8_t i = 0; i <= 7; i++)
 8003608:	2300      	movs	r3, #0
 800360a:	71fb      	strb	r3, [r7, #7]
 800360c:	e028      	b.n	8003660 <main+0x458>
 800360e:	bf00      	nop
 8003610:	40020800 	.word	0x40020800
 8003614:	20000e5c 	.word	0x20000e5c
 8003618:	20000ca0 	.word	0x20000ca0
 800361c:	20000420 	.word	0x20000420
 8003620:	200003e4 	.word	0x200003e4
 8003624:	200004dc 	.word	0x200004dc
 8003628:	42f00000 	.word	0x42f00000
 800362c:	46000000 	.word	0x46000000
 8003630:	451c4000 	.word	0x451c4000
 8003634:	200002c4 	.word	0x200002c4
 8003638:	200002c0 	.word	0x200002c0
 800363c:	20000e34 	.word	0x20000e34
 8003640:	40240000 	.word	0x40240000
 8003644:	200006f8 	.word	0x200006f8
 8003648:	20000760 	.word	0x20000760
 800364c:	20000e30 	.word	0x20000e30
				{
					TrayPoint[i] = 0;
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	4a8f      	ldr	r2, [pc, #572]	; (8003890 <main+0x688>)
 8003654:	2100      	movs	r1, #0
 8003656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i = 0; i <= 7; i++)
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	3301      	adds	r3, #1
 800365e:	71fb      	strb	r3, [r7, #7]
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	2b07      	cmp	r3, #7
 8003664:	d9f4      	bls.n	8003650 <main+0x448>
				}
				//turn off laser
				if(registerFrame[0x02].U16 == 0){
 8003666:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <main+0x68c>)
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d107      	bne.n	800367e <main+0x476>
					testState = TestOff;
 800366e:	4b8a      	ldr	r3, [pc, #552]	; (8003898 <main+0x690>)
 8003670:	2203      	movs	r2, #3
 8003672:	701a      	strb	r2, [r3, #0]
					Stamp = 1;
 8003674:	4b89      	ldr	r3, [pc, #548]	; (800389c <main+0x694>)
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
					TestMode();
 800367a:	f7fd fd71 	bl	8001160 <TestMode>
			Tray_Delay = HAL_GetTick() + 350; // Add delay
			registerFrame[0x10].U16 = 2; //Jog Place Set
			//registerFrame[0x10].U16 = 0; //Jog Place Reset*/
		}
		//Delay for Jog
		if (HAL_GetTick() >= Tray_Delay && OpVar.Tray_SetTo != 0){
 800367e:	f002 fc3d 	bl	8005efc <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	4b86      	ldr	r3, [pc, #536]	; (80038a0 <main+0x698>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d312      	bcc.n	80036b2 <main+0x4aa>
 800368c:	4b85      	ldr	r3, [pc, #532]	; (80038a4 <main+0x69c>)
 800368e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <main+0x4aa>
			Tray_Delay = HAL_GetTick() + 350; // Add delay
 8003696:	f002 fc31 	bl	8005efc <HAL_GetTick>
 800369a:	4603      	mov	r3, r0
 800369c:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 80036a0:	4a7f      	ldr	r2, [pc, #508]	; (80038a0 <main+0x698>)
 80036a2:	6013      	str	r3, [r2, #0]
			registerFrame[0x10].U16 = 0;
 80036a4:	4b7b      	ldr	r3, [pc, #492]	; (8003894 <main+0x68c>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	841a      	strh	r2, [r3, #32]
			OpVar.Tray_SetTo = 0;
 80036aa:	4b7e      	ldr	r3, [pc, #504]	; (80038a4 <main+0x69c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		}
	}
	if(OpVar.ProxStop == 0)
 80036b2:	4b7c      	ldr	r3, [pc, #496]	; (80038a4 <main+0x69c>)
 80036b4:	7ddb      	ldrb	r3, [r3, #23]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f040 8348 	bne.w	8003d4c <main+0xb44>
	{
		switch(OpState)
 80036bc:	4b7a      	ldr	r3, [pc, #488]	; (80038a8 <main+0x6a0>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b0b      	cmp	r3, #11
 80036c2:	f63f ae1e 	bhi.w	8003302 <main+0xfa>
 80036c6:	a201      	add	r2, pc, #4	; (adr r2, 80036cc <main+0x4c4>)
 80036c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036cc:	080036fd 	.word	0x080036fd
 80036d0:	08003749 	.word	0x08003749
 80036d4:	08003819 	.word	0x08003819
 80036d8:	08003847 	.word	0x08003847
 80036dc:	080038ed 	.word	0x080038ed
 80036e0:	08003303 	.word	0x08003303
 80036e4:	08003303 	.word	0x08003303
 80036e8:	08003a07 	.word	0x08003a07
 80036ec:	08003a9f 	.word	0x08003a9f
 80036f0:	08003ba7 	.word	0x08003ba7
 80036f4:	08003ced 	.word	0x08003ced
 80036f8:	08003d15 	.word	0x08003d15
			{
			case Init:
				OpVar.ControllerEnable = 0;
 80036fc:	4b69      	ldr	r3, [pc, #420]	; (80038a4 <main+0x69c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	731a      	strb	r2, [r3, #12]
				OpVar.JoyEnable = 0;
 8003702:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <main+0x69c>)
 8003704:	2200      	movs	r2, #0
 8003706:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				PositionLoop.IsSteady = 0;
 800370a:	4b68      	ldr	r3, [pc, #416]	; (80038ac <main+0x6a4>)
 800370c:	2200      	movs	r2, #0
 800370e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				for (uint8_t i = 0; i <= 7; i++)
 8003712:	2300      	movs	r3, #0
 8003714:	71bb      	strb	r3, [r7, #6]
 8003716:	e007      	b.n	8003728 <main+0x520>
				{
					TrayPoint[i] = 0;
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	4a5d      	ldr	r2, [pc, #372]	; (8003890 <main+0x688>)
 800371c:	2100      	movs	r1, #0
 800371e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i = 0; i <= 7; i++)
 8003722:	79bb      	ldrb	r3, [r7, #6]
 8003724:	3301      	adds	r3, #1
 8003726:	71bb      	strb	r3, [r7, #6]
 8003728:	79bb      	ldrb	r3, [r7, #6]
 800372a:	2b07      	cmp	r3, #7
 800372c:	d9f4      	bls.n	8003718 <main+0x510>
				}
				OpVar.SetPointY_Axis = 0;
 800372e:	4b5d      	ldr	r3, [pc, #372]	; (80038a4 <main+0x69c>)
 8003730:	2200      	movs	r2, #0
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003734:	2200      	movs	r2, #0
 8003736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800373a:	485d      	ldr	r0, [pc, #372]	; (80038b0 <main+0x6a8>)
 800373c:	f003 feb6 	bl	80074ac <HAL_GPIO_WritePin>
				SetHome(&OpVar);
 8003740:	4858      	ldr	r0, [pc, #352]	; (80038a4 <main+0x69c>)
 8003742:	f7ff f861 	bl	8002808 <SetHome>
			break;
 8003746:	e31c      	b.n	8003d82 <main+0xb7a>
			case PreHoming:
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003748:	4b5a      	ldr	r3, [pc, #360]	; (80038b4 <main+0x6ac>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ControllerEnable = 1;
 8003750:	4b54      	ldr	r3, [pc, #336]	; (80038a4 <main+0x69c>)
 8003752:	2201      	movs	r2, #1
 8003754:	731a      	strb	r2, [r3, #12]
				QuinticVar.current_velo = 0;
 8003756:	4b58      	ldr	r3, [pc, #352]	; (80038b8 <main+0x6b0>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
				OpVar.HomingKey = 0;
 800375c:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <main+0x69c>)
 800375e:	2200      	movs	r2, #0
 8003760:	761a      	strb	r2, [r3, #24]
				if(HAL_GetTick() >= OpVar.waitTime)
 8003762:	f002 fbcb 	bl	8005efc <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	4b4e      	ldr	r3, [pc, #312]	; (80038a4 <main+0x69c>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	429a      	cmp	r2, r3
 800376e:	d34e      	bcc.n	800380e <main+0x606>
				{
					OpVar.waitTime = 0;
 8003770:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <main+0x69c>)
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
					InitKalmanStruct(&KF,Var_Q,Var_R);
 8003776:	4b51      	ldr	r3, [pc, #324]	; (80038bc <main+0x6b4>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <main+0x6b8>)
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	eef0 0a47 	vmov.f32	s1, s14
 8003786:	eeb0 0a67 	vmov.f32	s0, s15
 800378a:	484e      	ldr	r0, [pc, #312]	; (80038c4 <main+0x6bc>)
 800378c:	f7fd fe1a 	bl	80013c4 <InitKalmanStruct>
					PIDSetup(&PositionLoop, 15, 2.2, 0.00001, 10);
 8003790:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8003794:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80038c8 <main+0x6c0>
 8003798:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80038cc <main+0x6c4>
 800379c:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80037a0:	4842      	ldr	r0, [pc, #264]	; (80038ac <main+0x6a4>)
 80037a2:	f7fe fb61 	bl	8001e68 <PIDSetup>
					PIDSetup(&VelocityLoop, 5.0, 0.00000001, 0, 0.00003);
 80037a6:	eddf 1a4a 	vldr	s3, [pc, #296]	; 80038d0 <main+0x6c8>
 80037aa:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 80038d4 <main+0x6cc>
 80037ae:	eddf 0a4a 	vldr	s1, [pc, #296]	; 80038d8 <main+0x6d0>
 80037b2:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80037b6:	4849      	ldr	r0, [pc, #292]	; (80038dc <main+0x6d4>)
 80037b8:	f7fe fb56 	bl	8001e68 <PIDSetup>

					QuinticVar.start_pos = __HAL_TIM_GET_COUNTER(&htim2);
 80037bc:	4b48      	ldr	r3, [pc, #288]	; (80038e0 <main+0x6d8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <main+0x6b0>)
 80037c6:	601a      	str	r2, [r3, #0]
					QuinticVar.final_pos = OpVar.MaxWorkspace*0.5 - 5;
 80037c8:	4b36      	ldr	r3, [pc, #216]	; (80038a4 <main+0x69c>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc fe55 	bl	800047c <__aeabi_i2d>
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <main+0x6dc>)
 80037d8:	f7fc feba 	bl	8000550 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	4b3f      	ldr	r3, [pc, #252]	; (80038e8 <main+0x6e0>)
 80037ea:	f7fc fcf9 	bl	80001e0 <__aeabi_dsub>
 80037ee:	4602      	mov	r2, r0
 80037f0:	460b      	mov	r3, r1
 80037f2:	4610      	mov	r0, r2
 80037f4:	4619      	mov	r1, r3
 80037f6:	f7fd f945 	bl	8000a84 <__aeabi_d2iz>
 80037fa:	4603      	mov	r3, r0
 80037fc:	4a2e      	ldr	r2, [pc, #184]	; (80038b8 <main+0x6b0>)
 80037fe:	6053      	str	r3, [r2, #4]
					OpVar.HomingKey = 0;	//Turn off Proximety
 8003800:	4b28      	ldr	r3, [pc, #160]	; (80038a4 <main+0x69c>)
 8003802:	2200      	movs	r2, #0
 8003804:	761a      	strb	r2, [r3, #24]
					OpState = Homing;
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <main+0x6a0>)
 8003808:	2202      	movs	r2, #2
 800380a:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				}
			break;
 800380c:	e2b9      	b.n	8003d82 <main+0xb7a>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 800380e:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <main+0x6ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2200      	movs	r2, #0
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003816:	e2b4      	b.n	8003d82 <main+0xb7a>
			case Homing:
					OpVar.ControllerEnable = 1;
 8003818:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <main+0x69c>)
 800381a:	2201      	movs	r2, #1
 800381c:	731a      	strb	r2, [r3, #12]
					if(PositionLoop.IsSteady == 1)
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <main+0x6a4>)
 8003820:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003824:	2b01      	cmp	r3, #1
 8003826:	f040 829c 	bne.w	8003d62 <main+0xb5a>
					{
						OpVar.HomingKey = 0;
 800382a:	4b1e      	ldr	r3, [pc, #120]	; (80038a4 <main+0x69c>)
 800382c:	2200      	movs	r2, #0
 800382e:	761a      	strb	r2, [r3, #24]
						OpState = Buffer;
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <main+0x6a0>)
 8003832:	2203      	movs	r2, #3
 8003834:	701a      	strb	r2, [r3, #0]
						OpVar.waitTime = HAL_GetTick() + 1000;
 8003836:	f002 fb61 	bl	8005efc <HAL_GetTick>
 800383a:	4603      	mov	r3, r0
 800383c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003840:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <main+0x69c>)
 8003842:	6113      	str	r3, [r2, #16]
					}
			break;
 8003844:	e28d      	b.n	8003d62 <main+0xb5a>
			case Buffer:
				if(HAL_GetTick() >= OpVar.waitTime)
 8003846:	f002 fb59 	bl	8005efc <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <main+0x69c>)
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	429a      	cmp	r2, r3
 8003852:	f0c0 8289 	bcc.w	8003d68 <main+0xb60>
				{
					if(OpVar.RunTrayMode == 1)
 8003856:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <main+0x69c>)
 8003858:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <main+0x668>
					{
						OpState = PreProcess;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <main+0x6a0>)
 8003862:	2207      	movs	r2, #7
 8003864:	701a      	strb	r2, [r3, #0]
						OpVar.RunTrayMode = 0;
 8003866:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <main+0x69c>)
 8003868:	2200      	movs	r2, #0
 800386a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						OpState = Home_Ok;
						registerFrame[0x10].U16 = 0;
						OpVar.ControllerEnable = 0;
					}
				}
				break;
 800386e:	e27b      	b.n	8003d68 <main+0xb60>
					else if(OpVar.RunTrayMode == 0)
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <main+0x69c>)
 8003872:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 8276 	bne.w	8003d68 <main+0xb60>
						OpState = Home_Ok;
 800387c:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <main+0x6a0>)
 800387e:	2204      	movs	r2, #4
 8003880:	701a      	strb	r2, [r3, #0]
						registerFrame[0x10].U16 = 0;
 8003882:	4b04      	ldr	r3, [pc, #16]	; (8003894 <main+0x68c>)
 8003884:	2200      	movs	r2, #0
 8003886:	841a      	strh	r2, [r3, #32]
						OpVar.ControllerEnable = 0;
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <main+0x69c>)
 800388a:	2200      	movs	r2, #0
 800388c:	731a      	strb	r2, [r3, #12]
				break;
 800388e:	e26b      	b.n	8003d68 <main+0xb60>
 8003890:	20000e34 	.word	0x20000e34
 8003894:	20000ca0 	.word	0x20000ca0
 8003898:	200002c4 	.word	0x200002c4
 800389c:	200002c0 	.word	0x200002c0
 80038a0:	20000e60 	.word	0x20000e60
 80038a4:	200003e4 	.word	0x200003e4
 80038a8:	200003e0 	.word	0x200003e0
 80038ac:	2000047c 	.word	0x2000047c
 80038b0:	40020800 	.word	0x40020800
 80038b4:	20000f28 	.word	0x20000f28
 80038b8:	2000042c 	.word	0x2000042c
 80038bc:	2000022c 	.word	0x2000022c
 80038c0:	20000230 	.word	0x20000230
 80038c4:	200004dc 	.word	0x200004dc
 80038c8:	3727c5ac 	.word	0x3727c5ac
 80038cc:	400ccccd 	.word	0x400ccccd
 80038d0:	37fba882 	.word	0x37fba882
 80038d4:	00000000 	.word	0x00000000
 80038d8:	322bcc77 	.word	0x322bcc77
 80038dc:	200004ac 	.word	0x200004ac
 80038e0:	20000e74 	.word	0x20000e74
 80038e4:	3fe00000 	.word	0x3fe00000
 80038e8:	40140000 	.word	0x40140000
			case Home_Ok:
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, RESET);  // turn off point mode pilot lamp
 80038ec:	2200      	movs	r2, #0
 80038ee:	2104      	movs	r1, #4
 80038f0:	48b7      	ldr	r0, [pc, #732]	; (8003bd0 <main+0x9c8>)
 80038f2:	f003 fddb 	bl	80074ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, RESET); // turn off tray mode pilot lamp
 80038f6:	2200      	movs	r2, #0
 80038f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80038fc:	48b5      	ldr	r0, [pc, #724]	; (8003bd4 <main+0x9cc>)
 80038fe:	f003 fdd5 	bl	80074ac <HAL_GPIO_WritePin>

				if(registerFrame[0x10].U16 == 32){
 8003902:	4bb5      	ldr	r3, [pc, #724]	; (8003bd8 <main+0x9d0>)
 8003904:	8c1b      	ldrh	r3, [r3, #32]
 8003906:	2b20      	cmp	r3, #32
 8003908:	d102      	bne.n	8003910 <main+0x708>
					registerFrame[0x10].U16 = 0;
 800390a:	4bb3      	ldr	r3, [pc, #716]	; (8003bd8 <main+0x9d0>)
 800390c:	2200      	movs	r2, #0
 800390e:	841a      	strh	r2, [r3, #32]
				}
				OpVar.ControllerEnable = 0;	//Disable Controller
 8003910:	4bb2      	ldr	r3, [pc, #712]	; (8003bdc <main+0x9d4>)
 8003912:	2200      	movs	r2, #0
 8003914:	731a      	strb	r2, [r3, #12]
				OpVar.JoyEnable = 1;
 8003916:	4bb1      	ldr	r3, [pc, #708]	; (8003bdc <main+0x9d4>)
 8003918:	2201      	movs	r2, #1
 800391a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				if(registerFrame[0x44].U16 == 0)
 800391e:	4bae      	ldr	r3, [pc, #696]	; (8003bd8 <main+0x9d0>)
 8003920:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <main+0x728>
				{
					registerFrame[0x40].U16 = 0b0000;	//ResetState
 8003928:	4bab      	ldr	r3, [pc, #684]	; (8003bd8 <main+0x9d0>)
 800392a:	2200      	movs	r2, #0
 800392c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
				}
				if(HAL_GetTick() >= timestamp)
 8003930:	f002 fae4 	bl	8005efc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	4baa      	ldr	r3, [pc, #680]	; (8003be0 <main+0x9d8>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	f0c0 8217 	bcc.w	8003d6e <main+0xb66>
				{
					timestamp = HAL_GetTick() + 10;
 8003940:	f002 fadc 	bl	8005efc <HAL_GetTick>
 8003944:	4603      	mov	r3, r0
 8003946:	330a      	adds	r3, #10
 8003948:	4aa5      	ldr	r2, [pc, #660]	; (8003be0 <main+0x9d8>)
 800394a:	6013      	str	r3, [r2, #0]

					//JoyStick
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, SET);	//Open Joy Pilot lamp
 800394c:	2201      	movs	r2, #1
 800394e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003952:	48a0      	ldr	r0, [pc, #640]	; (8003bd4 <main+0x9cc>)
 8003954:	f003 fdaa 	bl	80074ac <HAL_GPIO_WritePin>

					//set home from UI
					if(registerFrame[0x01].U16 == 4)
 8003958:	4b9f      	ldr	r3, [pc, #636]	; (8003bd8 <main+0x9d0>)
 800395a:	885b      	ldrh	r3, [r3, #2]
 800395c:	2b04      	cmp	r3, #4
 800395e:	d10c      	bne.n	800397a <main+0x772>
					{
						registerFrame[0x10].U16 = 4;
 8003960:	4b9d      	ldr	r3, [pc, #628]	; (8003bd8 <main+0x9d0>)
 8003962:	2204      	movs	r2, #4
 8003964:	841a      	strh	r2, [r3, #32]
						registerFrame[0x40].U16 = 1; //sethome x axis
 8003966:	4b9c      	ldr	r3, [pc, #624]	; (8003bd8 <main+0x9d0>)
 8003968:	2201      	movs	r2, #1
 800396a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
						OpState = Init;
 800396e:	4b9d      	ldr	r3, [pc, #628]	; (8003be4 <main+0x9dc>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]

						registerFrame[0x01].U16 = 0; //reset state
 8003974:	4b98      	ldr	r3, [pc, #608]	; (8003bd8 <main+0x9d0>)
 8003976:	2200      	movs	r2, #0
 8003978:	805a      	strh	r2, [r3, #2]
					}

					//PointMode from UI After press RUN
					if(registerFrame[0x01].U16 == 16)
 800397a:	4b97      	ldr	r3, [pc, #604]	; (8003bd8 <main+0x9d0>)
 800397c:	885b      	ldrh	r3, [r3, #2]
 800397e:	2b10      	cmp	r3, #16
 8003980:	d127      	bne.n	80039d2 <main+0x7ca>
					{
						registerFrame[0x10].U16 = 32;	//Update Y axis Status(Gopoint)
 8003982:	4b95      	ldr	r3, [pc, #596]	; (8003bd8 <main+0x9d0>)
 8003984:	2220      	movs	r2, #32
 8003986:	841a      	strh	r2, [r3, #32]
					   //start run status of x axis
						RunX_Axis(registerFrame[0x30].U16, 2500, 2);
 8003988:	4b93      	ldr	r3, [pc, #588]	; (8003bd8 <main+0x9d0>)
 800398a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800398e:	2202      	movs	r2, #2
 8003990:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe ff51 	bl	800283c <RunX_Axis>
						//(Code here)    //assign goal point y to trajectory y axis and PID
						OpVar.SetPointY_Axis = (Uint2Int(registerFrame[0x31].U16)*8192/(120*10)) + OpVar.HomePosOffset;
 800399a:	4b8f      	ldr	r3, [pc, #572]	; (8003bd8 <main+0x9d0>)
 800399c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80039a0:	4618      	mov	r0, r3
 80039a2:	f000 fdcd 	bl	8004540 <Uint2Int>
 80039a6:	4603      	mov	r3, r0
 80039a8:	035b      	lsls	r3, r3, #13
 80039aa:	4a8f      	ldr	r2, [pc, #572]	; (8003be8 <main+0x9e0>)
 80039ac:	fb82 1203 	smull	r1, r2, r2, r3
 80039b0:	11d2      	asrs	r2, r2, #7
 80039b2:	17db      	asrs	r3, r3, #31
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <main+0x9d4>)
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	4413      	add	r3, r2
 80039be:	461a      	mov	r2, r3
 80039c0:	4b86      	ldr	r3, [pc, #536]	; (8003bdc <main+0x9d4>)
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
						OpVar.BaseMode = 1;
 80039c4:	4b85      	ldr	r3, [pc, #532]	; (8003bdc <main+0x9d4>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						OpState = PreProcess;
 80039cc:	4b85      	ldr	r3, [pc, #532]	; (8003be4 <main+0x9dc>)
 80039ce:	2207      	movs	r2, #7
 80039d0:	701a      	strb	r2, [r3, #0]
					}

					//TrayMode from UI After press RUN
					if(registerFrame[0x01].U16 == 8)
 80039d2:	4b81      	ldr	r3, [pc, #516]	; (8003bd8 <main+0x9d0>)
 80039d4:	885b      	ldrh	r3, [r3, #2]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d112      	bne.n	8003a00 <main+0x7f8>
					{
						testState = GripOn;
 80039da:	4b84      	ldr	r3, [pc, #528]	; (8003bec <main+0x9e4>)
 80039dc:	2204      	movs	r2, #4
 80039de:	701a      	strb	r2, [r3, #0]
						Stamp = 1;
 80039e0:	4b83      	ldr	r3, [pc, #524]	; (8003bf0 <main+0x9e8>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
						TestMode();
 80039e6:	f7fd fbbb 	bl	8001160 <TestMode>
						OpVar.BaseMode = 0;
 80039ea:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <main+0x9d4>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						OpState = Init;
 80039f2:	4b7c      	ldr	r3, [pc, #496]	; (8003be4 <main+0x9dc>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
						OpVar.RunTrayMode = 1;
 80039f8:	4b78      	ldr	r3, [pc, #480]	; (8003bdc <main+0x9d4>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

					}

					//endeffector
					EndeffectorCheck();
 8003a00:	f000 fdbe 	bl	8004580 <EndeffectorCheck>
				}
			break;
 8003a04:	e1b3      	b.n	8003d6e <main+0xb66>
			case TrayMode:
				//OpVar.ControllerEnable = 0;
			break;

			case PreProcess:
				OpVar.ControllerEnable = 0;
 8003a06:	4b75      	ldr	r3, [pc, #468]	; (8003bdc <main+0x9d4>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	731a      	strb	r2, [r3, #12]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, RESET);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a12:	4870      	ldr	r0, [pc, #448]	; (8003bd4 <main+0x9cc>)
 8003a14:	f003 fd4a 	bl	80074ac <HAL_GPIO_WritePin>
				if(OpVar.BaseMode == 0)	//TrayMode
 8003a18:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <main+0x9d4>)
 8003a1a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d126      	bne.n	8003a70 <main+0x868>
				{
					QuinticVar.final_pos = PickTray.Holes_Y[0];
 8003a22:	4b74      	ldr	r3, [pc, #464]	; (8003bf4 <main+0x9ec>)
 8003a24:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003a28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a2c:	ee17 2a90 	vmov	r2, s15
 8003a30:	4b71      	ldr	r3, [pc, #452]	; (8003bf8 <main+0x9f0>)
 8003a32:	605a      	str	r2, [r3, #4]
					RunX_Axis(PickTray.Holes_X[0]*10, 2500, 3);
 8003a34:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <main+0x9ec>)
 8003a36:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a46:	2203      	movs	r2, #3
 8003a48:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003a4c:	ee17 0a90 	vmov	r0, s15
 8003a50:	f7fe fef4 	bl	800283c <RunX_Axis>
					OpVar.task = GoPick;	//current task.
 8003a54:	4b61      	ldr	r3, [pc, #388]	; (8003bdc <main+0x9d4>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	755a      	strb	r2, [r3, #21]
					OpVar.holeInd = 0;
 8003a5a:	4b60      	ldr	r3, [pc, #384]	; (8003bdc <main+0x9d4>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	759a      	strb	r2, [r3, #22]
					PositionLoop.IsSteady = 0;
 8003a60:	4b66      	ldr	r3, [pc, #408]	; (8003bfc <main+0x9f4>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					OpState = ControlLoop;
 8003a68:	4b5e      	ldr	r3, [pc, #376]	; (8003be4 <main+0x9dc>)
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	701a      	strb	r2, [r3, #0]
					QuinticVar.final_pos = OpVar.SetPointY_Axis; //Point from Basesystem
					PositionLoop.IsSteady = 0;
					OpState = ControlLoop;

				}
			break;
 8003a6e:	e181      	b.n	8003d74 <main+0xb6c>
				else if (OpVar.BaseMode == 1)	//PointMode
 8003a70:	4b5a      	ldr	r3, [pc, #360]	; (8003bdc <main+0x9d4>)
 8003a72:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	f040 817c 	bne.w	8003d74 <main+0xb6c>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, SET);
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2104      	movs	r1, #4
 8003a80:	4853      	ldr	r0, [pc, #332]	; (8003bd0 <main+0x9c8>)
 8003a82:	f003 fd13 	bl	80074ac <HAL_GPIO_WritePin>
					QuinticVar.final_pos = OpVar.SetPointY_Axis; //Point from Basesystem
 8003a86:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <main+0x9d4>)
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <main+0x9f0>)
 8003a8c:	6053      	str	r3, [r2, #4]
					PositionLoop.IsSteady = 0;
 8003a8e:	4b5b      	ldr	r3, [pc, #364]	; (8003bfc <main+0x9f4>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
					OpState = ControlLoop;
 8003a96:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <main+0x9dc>)
 8003a98:	2208      	movs	r2, #8
 8003a9a:	701a      	strb	r2, [r3, #0]
			break;
 8003a9c:	e16a      	b.n	8003d74 <main+0xb6c>

			case ControlLoop:
				OpVar.ControllerEnable = 1;
 8003a9e:	4b4f      	ldr	r3, [pc, #316]	; (8003bdc <main+0x9d4>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	731a      	strb	r2, [r3, #12]
				OpVar.JoyEnable = 0;
 8003aa4:	4b4d      	ldr	r3, [pc, #308]	; (8003bdc <main+0x9d4>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				OpVar.HomingKey = 2;
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <main+0x9d4>)
 8003aae:	2202      	movs	r2, #2
 8003ab0:	761a      	strb	r2, [r3, #24]
				if(PositionLoop.IsSteady == 1)
 8003ab2:	4b52      	ldr	r3, [pc, #328]	; (8003bfc <main+0x9f4>)
 8003ab4:	f993 302d 	ldrsb.w	r3, [r3, #45]	; 0x2d
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	f040 815e 	bne.w	8003d7a <main+0xb72>
				{
					float32_t refX_Axis;
					if(OpVar.BaseMode == 0)
 8003abe:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <main+0x9d4>)
 8003ac0:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d124      	bne.n	8003b12 <main+0x90a>
					{
						switch(OpVar.task)
 8003ac8:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <main+0x9d4>)
 8003aca:	7d5b      	ldrb	r3, [r3, #21]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <main+0x8ce>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d00f      	beq.n	8003af4 <main+0x8ec>
 8003ad4:	e02f      	b.n	8003b36 <main+0x92e>
						{
						case GoPick:
							refX_Axis = PickTray.Holes_X[OpVar.holeInd] * 10;
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <main+0x9d4>)
 8003ad8:	7d9b      	ldrb	r3, [r3, #22]
 8003ada:	4a46      	ldr	r2, [pc, #280]	; (8003bf4 <main+0x9ec>)
 8003adc:	3306      	adds	r3, #6
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003aee:	edc7 7a00 	vstr	s15, [r7]
							break;
 8003af2:	e020      	b.n	8003b36 <main+0x92e>
						case GoPlace:
							refX_Axis = PlaceTray.Holes_X[OpVar.holeInd] * 10;
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <main+0x9d4>)
 8003af6:	7d9b      	ldrb	r3, [r3, #22]
 8003af8:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <main+0x9f8>)
 8003afa:	3306      	adds	r3, #6
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b0c:	edc7 7a00 	vstr	s15, [r7]
							break;
 8003b10:	e011      	b.n	8003b36 <main+0x92e>
						}
					}
					else if (OpVar.BaseMode == 1)
 8003b12:	4b32      	ldr	r3, [pc, #200]	; (8003bdc <main+0x9d4>)
 8003b14:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10c      	bne.n	8003b36 <main+0x92e>
					{
						refX_Axis = Uint2Int(registerFrame[0x30].U16);
 8003b1c:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <main+0x9d0>)
 8003b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fd0c 	bl	8004540 <Uint2Int>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b32:	edc7 7a00 	vstr	s15, [r7]
					}
					if(abs(Uint2Int(registerFrame[0x44].U16) - refX_Axis) <= 0.1)
 8003b36:	4b28      	ldr	r3, [pc, #160]	; (8003bd8 <main+0x9d0>)
 8003b38:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fcff 	bl	8004540 <Uint2Int>
 8003b42:	4603      	mov	r3, r0
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b4c:	edd7 7a00 	vldr	s15, [r7]
 8003b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b58:	ee17 3a90 	vmov	r3, s15
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bfb8      	it	lt
 8003b60:	425b      	neglt	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f300 8109 	bgt.w	8003d7a <main+0xb72>
					{
						if(OpVar.BaseMode == 0)	//Tray
 8003b68:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <main+0x9d4>)
 8003b6a:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10c      	bne.n	8003b8c <main+0x984>
						{
							PickPlace();
 8003b72:	f000 fd9d 	bl	80046b0 <PickPlace>
							OpVar.waitTime = HAL_GetTick() + 2000;
 8003b76:	f002 f9c1 	bl	8005efc <HAL_GetTick>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003b80:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <main+0x9d4>)
 8003b82:	6113      	str	r3, [r2, #16]
							OpState = GripperWaiting;
 8003b84:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <main+0x9dc>)
 8003b86:	2209      	movs	r2, #9
 8003b88:	701a      	strb	r2, [r3, #0]
							registerFrame[0x01].U16 = 0;

						}
					}
				}
			break;
 8003b8a:	e0f6      	b.n	8003d7a <main+0xb72>
						else if (OpVar.BaseMode == 1)	//Point
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <main+0x9d4>)
 8003b8e:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	f040 80f1 	bne.w	8003d7a <main+0xb72>
							OpState = Home_Ok;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <main+0x9dc>)
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	701a      	strb	r2, [r3, #0]
							registerFrame[0x01].U16 = 0;
 8003b9e:	4b0e      	ldr	r3, [pc, #56]	; (8003bd8 <main+0x9d0>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	805a      	strh	r2, [r3, #2]
			break;
 8003ba4:	e0e9      	b.n	8003d7a <main+0xb72>

			case GripperWaiting:
				OpVar.ControllerEnable = 1;
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <main+0x9d4>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	731a      	strb	r2, [r3, #12]
				if( HAL_GetTick() >= OpVar.waitTime)
 8003bac:	f002 f9a6 	bl	8005efc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <main+0x9d4>)
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	f0c0 8096 	bcc.w	8003ce8 <main+0xae0>
				{
					OpVar.waitTime = 0;
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <main+0x9d4>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	611a      	str	r2, [r3, #16]
					switch(OpVar.task)
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <main+0x9d4>)
 8003bc4:	7d5b      	ldrb	r3, [r3, #21]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01c      	beq.n	8003c04 <main+0x9fc>
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d045      	beq.n	8003c5a <main+0xa52>
							OpState = ControlLoop;
						}
					break;
					}
				}
			break;
 8003bce:	e0d8      	b.n	8003d82 <main+0xb7a>
 8003bd0:	40020c00 	.word	0x40020c00
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	20000ca0 	.word	0x20000ca0
 8003bdc:	200003e4 	.word	0x200003e4
 8003be0:	20000e64 	.word	0x20000e64
 8003be4:	200003e0 	.word	0x200003e0
 8003be8:	1b4e81b5 	.word	0x1b4e81b5
 8003bec:	200002c4 	.word	0x200002c4
 8003bf0:	200002c0 	.word	0x200002c0
 8003bf4:	200006f8 	.word	0x200006f8
 8003bf8:	2000042c 	.word	0x2000042c
 8003bfc:	2000047c 	.word	0x2000047c
 8003c00:	20000760 	.word	0x20000760
						QuinticVar.final_pos = PlaceTray.Holes_Y[OpVar.holeInd];
 8003c04:	4b60      	ldr	r3, [pc, #384]	; (8003d88 <main+0xb80>)
 8003c06:	7d9b      	ldrb	r3, [r3, #22]
 8003c08:	4a60      	ldr	r2, [pc, #384]	; (8003d8c <main+0xb84>)
 8003c0a:	330e      	adds	r3, #14
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	3304      	adds	r3, #4
 8003c12:	edd3 7a00 	vldr	s15, [r3]
 8003c16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c1a:	ee17 2a90 	vmov	r2, s15
 8003c1e:	4b5c      	ldr	r3, [pc, #368]	; (8003d90 <main+0xb88>)
 8003c20:	605a      	str	r2, [r3, #4]
						RunX_Axis(PlaceTray.Holes_X[OpVar.holeInd]*10, 2500, 3);
 8003c22:	4b59      	ldr	r3, [pc, #356]	; (8003d88 <main+0xb80>)
 8003c24:	7d9b      	ldrb	r3, [r3, #22]
 8003c26:	4a59      	ldr	r2, [pc, #356]	; (8003d8c <main+0xb84>)
 8003c28:	3306      	adds	r3, #6
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c3e:	2203      	movs	r2, #3
 8003c40:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003c44:	ee17 0a90 	vmov	r0, s15
 8003c48:	f7fe fdf8 	bl	800283c <RunX_Axis>
						OpVar.task = GoPlace;
 8003c4c:	4b4e      	ldr	r3, [pc, #312]	; (8003d88 <main+0xb80>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	755a      	strb	r2, [r3, #21]
						OpState = ControlLoop;
 8003c52:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <main+0xb8c>)
 8003c54:	2208      	movs	r2, #8
 8003c56:	701a      	strb	r2, [r3, #0]
					break;
 8003c58:	e047      	b.n	8003cea <main+0xae2>
						if(OpVar.holeInd >= 8)
 8003c5a:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <main+0xb80>)
 8003c5c:	7d9b      	ldrb	r3, [r3, #22]
 8003c5e:	2b07      	cmp	r3, #7
 8003c60:	d911      	bls.n	8003c86 <main+0xa7e>
							OpState = Init;
 8003c62:	4b4c      	ldr	r3, [pc, #304]	; (8003d94 <main+0xb8c>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
							registerFrame[0x40].U16 = 0b0001;	//Home
 8003c68:	4b4b      	ldr	r3, [pc, #300]	; (8003d98 <main+0xb90>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
							OpVar.ControllerEnable = 0;
 8003c70:	4b45      	ldr	r3, [pc, #276]	; (8003d88 <main+0xb80>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	731a      	strb	r2, [r3, #12]
							OpVar.RunTrayMode = 0;
 8003c76:	4b44      	ldr	r3, [pc, #272]	; (8003d88 <main+0xb80>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
							registerFrame[0x01].U16 = 0;
 8003c7e:	4b46      	ldr	r3, [pc, #280]	; (8003d98 <main+0xb90>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	805a      	strh	r2, [r3, #2]
					break;
 8003c84:	e031      	b.n	8003cea <main+0xae2>
							OpVar.holeInd += 1;
 8003c86:	4b40      	ldr	r3, [pc, #256]	; (8003d88 <main+0xb80>)
 8003c88:	7d9b      	ldrb	r3, [r3, #22]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	4b3e      	ldr	r3, [pc, #248]	; (8003d88 <main+0xb80>)
 8003c90:	759a      	strb	r2, [r3, #22]
							QuinticVar.final_pos = PickTray.Holes_Y[OpVar.holeInd];
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <main+0xb80>)
 8003c94:	7d9b      	ldrb	r3, [r3, #22]
 8003c96:	4a41      	ldr	r2, [pc, #260]	; (8003d9c <main+0xb94>)
 8003c98:	330e      	adds	r3, #14
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ca8:	ee17 2a90 	vmov	r2, s15
 8003cac:	4b38      	ldr	r3, [pc, #224]	; (8003d90 <main+0xb88>)
 8003cae:	605a      	str	r2, [r3, #4]
							RunX_Axis(PickTray.Holes_X[OpVar.holeInd]*10, 2500, 3);
 8003cb0:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <main+0xb80>)
 8003cb2:	7d9b      	ldrb	r3, [r3, #22]
 8003cb4:	4a39      	ldr	r2, [pc, #228]	; (8003d9c <main+0xb94>)
 8003cb6:	3306      	adds	r3, #6
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	edd3 7a00 	vldr	s15, [r3]
 8003cc0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003cd2:	ee17 0a90 	vmov	r0, s15
 8003cd6:	f7fe fdb1 	bl	800283c <RunX_Axis>
							OpVar.task = GoPick;
 8003cda:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <main+0xb80>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	755a      	strb	r2, [r3, #21]
							OpState = ControlLoop;
 8003ce0:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <main+0xb8c>)
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	701a      	strb	r2, [r3, #0]
					break;
 8003ce6:	e000      	b.n	8003cea <main+0xae2>
				}
 8003ce8:	bf00      	nop
			break;
 8003cea:	e04a      	b.n	8003d82 <main+0xb7a>

			case WaitingHome:
				OpVar.ControllerEnable = 0;
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <main+0xb80>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	731a      	strb	r2, [r3, #12]
				OpVar.HomingKey = 1;
 8003cf2:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <main+0xb80>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	761a      	strb	r2, [r3, #24]
				OpState = WaitingHome;
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <main+0xb8c>)
 8003cfa:	220a      	movs	r2, #10
 8003cfc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8003cfe:	2200      	movs	r2, #0
 8003d00:	2140      	movs	r1, #64	; 0x40
 8003d02:	4827      	ldr	r0, [pc, #156]	; (8003da0 <main+0xb98>)
 8003d04:	f003 fbd2 	bl	80074ac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 8003d08:	4b26      	ldr	r3, [pc, #152]	; (8003da4 <main+0xb9c>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003d10:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8003d12:	e036      	b.n	8003d82 <main+0xb7a>
			case EmergencyStop:
				OpVar.ControllerEnable = 0;
 8003d14:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <main+0xb80>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	731a      	strb	r2, [r3, #12]
				OpVar.JoyEnable = 0;
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <main+0xb80>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <main+0xb9c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2200      	movs	r2, #0
 8003d28:	63da      	str	r2, [r3, #60]	; 0x3c
				 if(OpVar.EmerPress == 0)
 8003d2a:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <main+0xb80>)
 8003d2c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d125      	bne.n	8003d80 <main+0xb78>
				 {
					 testState = EmerExit;
 8003d34:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <main+0xba0>)
 8003d36:	2209      	movs	r2, #9
 8003d38:	701a      	strb	r2, [r3, #0]
					 Stamp = 1;
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	; (8003dac <main+0xba4>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
					 TestMode();
 8003d40:	f7fd fa0e 	bl	8001160 <TestMode>
					 OpState = Init;
 8003d44:	4b13      	ldr	r3, [pc, #76]	; (8003d94 <main+0xb8c>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
				 }
			break;
 8003d4a:	e019      	b.n	8003d80 <main+0xb78>
		}
	}
	  else if (OpVar.ProxStop == 1)
 8003d4c:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <main+0xb80>)
 8003d4e:	7ddb      	ldrb	r3, [r3, #23]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	f47f aad6 	bne.w	8003302 <main+0xfa>
	  {
		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003d56:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <main+0xb9c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d5e:	f7ff bad0 	b.w	8003302 <main+0xfa>
			break;
 8003d62:	bf00      	nop
 8003d64:	f7ff bacd 	b.w	8003302 <main+0xfa>
				break;
 8003d68:	bf00      	nop
 8003d6a:	f7ff baca 	b.w	8003302 <main+0xfa>
			break;
 8003d6e:	bf00      	nop
 8003d70:	f7ff bac7 	b.w	8003302 <main+0xfa>
			break;
 8003d74:	bf00      	nop
 8003d76:	f7ff bac4 	b.w	8003302 <main+0xfa>
			break;
 8003d7a:	bf00      	nop
 8003d7c:	f7ff bac1 	b.w	8003302 <main+0xfa>
			break;
 8003d80:	bf00      	nop
  {
 8003d82:	f7ff babe 	b.w	8003302 <main+0xfa>
 8003d86:	bf00      	nop
 8003d88:	200003e4 	.word	0x200003e4
 8003d8c:	20000760 	.word	0x20000760
 8003d90:	2000042c 	.word	0x2000042c
 8003d94:	200003e0 	.word	0x200003e0
 8003d98:	20000ca0 	.word	0x20000ca0
 8003d9c:	200006f8 	.word	0x200006f8
 8003da0:	40020800 	.word	0x40020800
 8003da4:	20000f28 	.word	0x20000f28
 8003da8:	200002c4 	.word	0x200002c4
 8003dac:	200002c0 	.word	0x200002c0

08003db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b094      	sub	sp, #80	; 0x50
 8003db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003db6:	f107 0320 	add.w	r3, r7, #32
 8003dba:	2230      	movs	r2, #48	; 0x30
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f009 fc2c 	bl	800d61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	4b27      	ldr	r3, [pc, #156]	; (8003e78 <SystemClock_Config+0xc8>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	4a26      	ldr	r2, [pc, #152]	; (8003e78 <SystemClock_Config+0xc8>)
 8003dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de2:	6413      	str	r3, [r2, #64]	; 0x40
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <SystemClock_Config+0xc8>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df0:	2300      	movs	r3, #0
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <SystemClock_Config+0xcc>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a20      	ldr	r2, [pc, #128]	; (8003e7c <SystemClock_Config+0xcc>)
 8003dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <SystemClock_Config+0xcc>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003e08:	607b      	str	r3, [r7, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e10:	2301      	movs	r3, #1
 8003e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e14:	2310      	movs	r3, #16
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e18:	2302      	movs	r3, #2
 8003e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003e20:	2308      	movs	r3, #8
 8003e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8003e24:	2364      	movs	r3, #100	; 0x64
 8003e26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e30:	f107 0320 	add.w	r3, r7, #32
 8003e34:	4618      	mov	r0, r3
 8003e36:	f005 ffdb 	bl	8009df0 <HAL_RCC_OscConfig>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003e40:	f000 fc6a 	bl	8004718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e44:	230f      	movs	r3, #15
 8003e46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e56:	2300      	movs	r3, #0
 8003e58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003e5a:	f107 030c 	add.w	r3, r7, #12
 8003e5e:	2103      	movs	r1, #3
 8003e60:	4618      	mov	r0, r3
 8003e62:	f006 fa3d 	bl	800a2e0 <HAL_RCC_ClockConfig>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003e6c:	f000 fc54 	bl	8004718 <Error_Handler>
  }
}
 8003e70:	bf00      	nop
 8003e72:	3750      	adds	r7, #80	; 0x50
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40007000 	.word	0x40007000

08003e80 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	80fb      	strh	r3, [r7, #6]
		if (GPIO_Pin == GPIO_PIN_2) //Emergency Switch
 8003e8a:	88fb      	ldrh	r3, [r7, #6]
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d107      	bne.n	8003ea0 <HAL_GPIO_EXTI_Callback+0x20>
		{
			OpVar.countExt ++;
 8003e90:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003e92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e96:	3301      	adds	r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003e9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if(GPIO_Pin == GPIO_PIN_11)
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d12d      	bne.n	8003f04 <HAL_GPIO_EXTI_Callback+0x84>
		{
			if(OpVar.HomingKey == 1)
 8003ea8:	4b47      	ldr	r3, [pc, #284]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003eaa:	7e1b      	ldrb	r3, [r3, #24]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d11e      	bne.n	8003eee <HAL_GPIO_EXTI_Callback+0x6e>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003eb0:	4b46      	ldr	r3, [pc, #280]	; (8003fcc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	63da      	str	r2, [r3, #60]	; 0x3c
				__HAL_TIM_SET_COUNTER(&htim2,0);
 8003eb8:	4b45      	ldr	r3, [pc, #276]	; (8003fd0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
				QEIData.QEIPosition = __HAL_TIM_GET_COUNTER(&htim2);
 8003ec0:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <HAL_GPIO_EXTI_Callback+0x154>)
 8003eca:	605a      	str	r2, [r3, #4]
				OpVar.ProxStop = 0;
 8003ecc:	4b3e      	ldr	r3, [pc, #248]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	75da      	strb	r2, [r3, #23]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 0);
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2140      	movs	r1, #64	; 0x40
 8003ed6:	4840      	ldr	r0, [pc, #256]	; (8003fd8 <HAL_GPIO_EXTI_Callback+0x158>)
 8003ed8:	f003 fae8 	bl	80074ac <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,30*500);
 8003edc:	4b3b      	ldr	r3, [pc, #236]	; (8003fcc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f643 2298 	movw	r2, #15000	; 0x3a98
 8003ee4:	63da      	str	r2, [r3, #60]	; 0x3c
				OpState = WaitingHome;
 8003ee6:	4b3d      	ldr	r3, [pc, #244]	; (8003fdc <HAL_GPIO_EXTI_Callback+0x15c>)
 8003ee8:	220a      	movs	r2, #10
 8003eea:	701a      	strb	r2, [r3, #0]
 8003eec:	e00a      	b.n	8003f04 <HAL_GPIO_EXTI_Callback+0x84>
			}
			else if(OpVar.HomingKey == 2)
 8003eee:	4b36      	ldr	r3, [pc, #216]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003ef0:	7e1b      	ldrb	r3, [r3, #24]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d106      	bne.n	8003f04 <HAL_GPIO_EXTI_Callback+0x84>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003ef6:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2200      	movs	r2, #0
 8003efc:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8003efe:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f00:	2201      	movs	r2, #1
 8003f02:	75da      	strb	r2, [r3, #23]
			}
		}
		if (GPIO_Pin == GPIO_PIN_12)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0a:	d158      	bne.n	8003fbe <HAL_GPIO_EXTI_Callback+0x13e>
		{
			if(OpVar.HomingKey == 1)
 8003f0c:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f0e:	7e1b      	ldrb	r3, [r3, #24]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d149      	bne.n	8003fa8 <HAL_GPIO_EXTI_Callback+0x128>
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.HomingKey = 0;		//Disable Proximity Homing
 8003f1c:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	761a      	strb	r2, [r3, #24]
				OpVar.ProxStop = 0;
 8003f22:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	75da      	strb	r2, [r3, #23]
				if(OpState == WaitingHome)
 8003f28:	4b2c      	ldr	r3, [pc, #176]	; (8003fdc <HAL_GPIO_EXTI_Callback+0x15c>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b0a      	cmp	r3, #10
 8003f2e:	d146      	bne.n	8003fbe <HAL_GPIO_EXTI_Callback+0x13e>
				{
					OpVar.waitTime = HAL_GetTick() + 1000;
 8003f30:	f001 ffe4 	bl	8005efc <HAL_GetTick>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8003f3a:	4a23      	ldr	r2, [pc, #140]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f3c:	6113      	str	r3, [r2, #16]
					QuinticVar.current_pos = __HAL_TIM_GET_COUNTER(&htim2);	//Dummy PID
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	461a      	mov	r2, r3
 8003f46:	4b26      	ldr	r3, [pc, #152]	; (8003fe0 <HAL_GPIO_EXTI_Callback+0x160>)
 8003f48:	60da      	str	r2, [r3, #12]
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, 1);
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	2140      	movs	r1, #64	; 0x40
 8003f4e:	4822      	ldr	r0, [pc, #136]	; (8003fd8 <HAL_GPIO_EXTI_Callback+0x158>)
 8003f50:	f003 faac 	bl	80074ac <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 50*500);
 8003f54:	4b1d      	ldr	r3, [pc, #116]	; (8003fcc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8003f5c:	63da      	str	r2, [r3, #60]	; 0x3c
					OpState = PreHoming;
 8003f5e:	4b1f      	ldr	r3, [pc, #124]	; (8003fdc <HAL_GPIO_EXTI_Callback+0x15c>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	701a      	strb	r2, [r3, #0]
					OpVar.MaxWorkspace = __HAL_TIM_GET_COUNTER(&htim2);
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	4b16      	ldr	r3, [pc, #88]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f6e:	621a      	str	r2, [r3, #32]
					OpVar.HomePosOffset = __HAL_TIM_GET_COUNTER(&htim2) * 0.5;
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <HAL_GPIO_EXTI_Callback+0x150>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fc fa70 	bl	800045c <__aeabi_ui2d>
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_GPIO_EXTI_Callback+0x164>)
 8003f82:	f7fc fae5 	bl	8000550 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fc fda1 	bl	8000ad4 <__aeabi_d2uiz>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4a0c      	ldr	r2, [pc, #48]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f96:	61d3      	str	r3, [r2, #28]
					OpVar.ControllerEnable = 1;	//Enable Controller
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	731a      	strb	r2, [r3, #12]
					__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3, 0);
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	; (8003fcc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c
			{
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
				OpVar.ProxStop = 1;
			}
		}
}
 8003fa6:	e00a      	b.n	8003fbe <HAL_GPIO_EXTI_Callback+0x13e>
			else if(OpVar.HomingKey == 2)
 8003fa8:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003faa:	7e1b      	ldrb	r3, [r3, #24]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d106      	bne.n	8003fbe <HAL_GPIO_EXTI_Callback+0x13e>
				__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,0);
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_GPIO_EXTI_Callback+0x14c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c
				OpVar.ProxStop = 1;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <HAL_GPIO_EXTI_Callback+0x148>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	75da      	strb	r2, [r3, #23]
}
 8003fbe:	bf00      	nop
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200003e4 	.word	0x200003e4
 8003fcc:	20000f28 	.word	0x20000f28
 8003fd0:	20000e74 	.word	0x20000e74
 8003fd4:	20000420 	.word	0x20000420
 8003fd8:	40020800 	.word	0x40020800
 8003fdc:	200003e0 	.word	0x200003e0
 8003fe0:	2000042c 	.word	0x2000042c
 8003fe4:	3fe00000 	.word	0x3fe00000

08003fe8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	f040 80d4 	bne.w	80041a2 <HAL_TIM_PeriodElapsedCallback+0x1ba>
	{
		//Read FeedBack
		QEIGetFeedback(&QEIData, 2500);
 8003ffa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8003ffe:	486c      	ldr	r0, [pc, #432]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004000:	f7fe fbda 	bl	80027b8 <QEIGetFeedback>
		KF.z = QEIData.QEIVelocity;
 8004004:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	4a6a      	ldr	r2, [pc, #424]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800400a:	65d3      	str	r3, [r2, #92]	; 0x5c
		kalman_filter();
 800400c:	f7fd fb34 	bl	8001678 <kalman_filter>
		ZEstimateVelocity = KF.x_hat[1];
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	4a68      	ldr	r2, [pc, #416]	; (80041b8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004016:	6013      	str	r3, [r2, #0]
		OpVar.CurrentY_Position = QEIData.QEIPosition*120/8192;
 8004018:	4b65      	ldr	r3, [pc, #404]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	2b00      	cmp	r3, #0
 8004026:	da02      	bge.n	800402e <HAL_TIM_PeriodElapsedCallback+0x46>
 8004028:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800402c:	331f      	adds	r3, #31
 800402e:	135b      	asrs	r3, r3, #13
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004038:	4b60      	ldr	r3, [pc, #384]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800403a:	edc3 7a00 	vstr	s15, [r3]
		OpVar.CurrentY_Velocity = ZEstimateVelocity*120/8192;
 800403e:	4b5e      	ldr	r3, [pc, #376]	; (80041b8 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004040:	edd3 7a00 	vldr	s15, [r3]
 8004044:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80041c0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 8004048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800404c:	eddf 6a5d 	vldr	s13, [pc, #372]	; 80041c4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8004050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004054:	4b59      	ldr	r3, [pc, #356]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004056:	edc3 7a01 	vstr	s15, [r3, #4]
		OpVar.CurrentY_Accelleration = ((KF.x_hat[1] - KF.x_hat_minus[1])* 120/8192) * 2500;
 800405a:	4b56      	ldr	r3, [pc, #344]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800405c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004060:	4b54      	ldr	r3, [pc, #336]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8004062:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8004066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406a:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80041c0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 800406e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004072:	eddf 6a54 	vldr	s13, [pc, #336]	; 80041c4 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8004076:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800407a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80041c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 800407e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004082:	4b4e      	ldr	r3, [pc, #312]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004084:	edc3 7a02 	vstr	s15, [r3, #8]
		//Emergency Check
		static uint32_t EmrTimestamp = 0;
		if(HAL_GetTick() >= EmrTimestamp)
 8004088:	f001 ff38 	bl	8005efc <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d344      	bcc.n	8004120 <HAL_TIM_PeriodElapsedCallback+0x138>
		{
			EmrTimestamp = HAL_GetTick() + 10;
 8004096:	f001 ff31 	bl	8005efc <HAL_GetTick>
 800409a:	4603      	mov	r3, r0
 800409c:	330a      	adds	r3, #10
 800409e:	4a4b      	ldr	r2, [pc, #300]	; (80041cc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80040a0:	6013      	str	r3, [r2, #0]
			if((OpVar.countExt - OpVar.PreCountExt) == 1)
 80040a2:	4b46      	ldr	r3, [pc, #280]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b44      	ldr	r3, [pc, #272]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d10a      	bne.n	80040cc <HAL_TIM_PeriodElapsedCallback+0xe4>
			{
				OpVar.EmerPress = 0;
 80040b6:	4b41      	ldr	r3, [pc, #260]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				OpVar.PreCountExt = OpVar.countExt;
 80040be:	4b3f      	ldr	r3, [pc, #252]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040c0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80040c4:	4b3d      	ldr	r3, [pc, #244]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80040ca:	e029      	b.n	8004120 <HAL_TIM_PeriodElapsedCallback+0x138>
			}
			else if((OpVar.countExt - OpVar.PreCountExt) == 0)
 80040cc:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040ce:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80040d2:	4b3a      	ldr	r3, [pc, #232]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040d8:	429a      	cmp	r2, r3
 80040da:	d10c      	bne.n	80040f6 <HAL_TIM_PeriodElapsedCallback+0x10e>
			{
				OpVar.EmerPress = OpVar.EmerPress;
 80040dc:	4b37      	ldr	r3, [pc, #220]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040de:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80040e2:	4b36      	ldr	r3, [pc, #216]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				OpVar.PreCountExt = OpVar.countExt;
 80040e8:	4b34      	ldr	r3, [pc, #208]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040ea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80040ee:	4b33      	ldr	r3, [pc, #204]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80040f4:	e014      	b.n	8004120 <HAL_TIM_PeriodElapsedCallback+0x138>
			}
			else
			{
				OpVar.EmerPress = 1;
 80040f6:	4b31      	ldr	r3, [pc, #196]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				OpVar.PreCountExt = OpVar.countExt;
 80040fe:	4b2f      	ldr	r3, [pc, #188]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004100:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004104:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004106:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				OpState = EmergencyStop;
 800410a:	4b31      	ldr	r3, [pc, #196]	; (80041d0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800410c:	220b      	movs	r2, #11
 800410e:	701a      	strb	r2, [r3, #0]
				testState = EmerTrig;
 8004110:	4b30      	ldr	r3, [pc, #192]	; (80041d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8004112:	2208      	movs	r2, #8
 8004114:	701a      	strb	r2, [r3, #0]
				Stamp = 1;
 8004116:	4b30      	ldr	r3, [pc, #192]	; (80041d8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
				TestMode();
 800411c:	f7fd f820 	bl	8001160 <TestMode>

			}
		}
		//Cascade Controller
		if(OpVar.ControllerEnable == 1)
 8004120:	4b26      	ldr	r3, [pc, #152]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004122:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d12e      	bne.n	8004188 <HAL_TIM_PeriodElapsedCallback+0x1a0>
		{
			QuinticRun(&QuinticVar,PositionLoop.ESS,0.0004);
 800412a:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800412c:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8004130:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80041e0 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 8004134:	4619      	mov	r1, r3
 8004136:	482b      	ldr	r0, [pc, #172]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004138:	f7fe fad8 	bl	80026ec <QuinticRun>
			CascadeLoop(&PositionLoop, &VelocityLoop, QEIData.QEIPosition, KF.x_hat[1],&QuinticVar, 3);
 800413c:	4b1c      	ldr	r3, [pc, #112]	; (80041b0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	ee07 3a90 	vmov	s15, r3
 8004144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800414a:	ed93 7a01 	vldr	s14, [r3, #4]
 800414e:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8004152:	4a24      	ldr	r2, [pc, #144]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004154:	eef0 0a47 	vmov.f32	s1, s14
 8004158:	eeb0 0a67 	vmov.f32	s0, s15
 800415c:	4922      	ldr	r1, [pc, #136]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800415e:	481f      	ldr	r0, [pc, #124]	; (80041dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004160:	f7fd ff2c 	bl	8001fbc <CascadeLoop>
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,abs(VelocityLoop.U));
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800416c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004170:	4b1e      	ldr	r3, [pc, #120]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x204>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, VelocityLoop.MotorDir);
 8004176:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8004178:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800417c:	b2db      	uxtb	r3, r3
 800417e:	461a      	mov	r2, r3
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	481b      	ldr	r0, [pc, #108]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004184:	f003 f992 	bl	80074ac <HAL_GPIO_WritePin>
		}
		//JoyStick
		if(OpVar.JoyEnable == 1)
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800418a:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d107      	bne.n	80041a2 <HAL_TIM_PeriodElapsedCallback+0x1ba>
		{
			CheckJoystick();
 8004192:	f7fd f825 	bl	80011e0 <CheckJoystick>
			CheckButton();
 8004196:	f7fd f897 	bl	80012c8 <CheckButton>
			//joyXjog();
			joyYjog();
 800419a:	f000 f85b 	bl	8004254 <joyYjog>
			CollectPosition();
 800419e:	f000 f8dd 	bl	800435c <CollectPosition>
		}
	}
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000fdc 	.word	0x20000fdc
 80041b0:	20000420 	.word	0x20000420
 80041b4:	200004dc 	.word	0x200004dc
 80041b8:	200006f4 	.word	0x200006f4
 80041bc:	200003e4 	.word	0x200003e4
 80041c0:	42f00000 	.word	0x42f00000
 80041c4:	46000000 	.word	0x46000000
 80041c8:	451c4000 	.word	0x451c4000
 80041cc:	20000e68 	.word	0x20000e68
 80041d0:	200003e0 	.word	0x200003e0
 80041d4:	200002c4 	.word	0x200002c4
 80041d8:	200002c0 	.word	0x200002c0
 80041dc:	2000047c 	.word	0x2000047c
 80041e0:	39d1b717 	.word	0x39d1b717
 80041e4:	2000042c 	.word	0x2000042c
 80041e8:	200004ac 	.word	0x200004ac
 80041ec:	20000f28 	.word	0x20000f28
 80041f0:	40020800 	.word	0x40020800

080041f4 <joyXjog>:
void joyXjog() {
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0

	if(enableX){
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <joyXjog+0x54>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01d      	beq.n	800423c <joyXjog+0x48>
		if (Joy.X == 1) {
 8004200:	4b12      	ldr	r3, [pc, #72]	; (800424c <joyXjog+0x58>)
 8004202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d104      	bne.n	8004214 <joyXjog+0x20>
			registerFrame[0x40].U16 = 0x0008;
 800420a:	4b11      	ldr	r3, [pc, #68]	; (8004250 <joyXjog+0x5c>)
 800420c:	2208      	movs	r2, #8
 800420e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			registerFrame[0x40].U16 = 0x0004;
		} else if (Joy.X == 0) {
			registerFrame[0x40].U16 = 0x0000;
		}
	}
}
 8004212:	e013      	b.n	800423c <joyXjog+0x48>
		} else if (Joy.X == -1) {
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <joyXjog+0x58>)
 8004216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d104      	bne.n	800422a <joyXjog+0x36>
			registerFrame[0x40].U16 = 0x0004;
 8004220:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <joyXjog+0x5c>)
 8004222:	2204      	movs	r2, #4
 8004224:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 8004228:	e008      	b.n	800423c <joyXjog+0x48>
		} else if (Joy.X == 0) {
 800422a:	4b08      	ldr	r3, [pc, #32]	; (800424c <joyXjog+0x58>)
 800422c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d103      	bne.n	800423c <joyXjog+0x48>
			registerFrame[0x40].U16 = 0x0000;
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <joyXjog+0x5c>)
 8004236:	2200      	movs	r2, #0
 8004238:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	200002dc 	.word	0x200002dc
 800424c:	200002c8 	.word	0x200002c8
 8004250:	20000ca0 	.word	0x20000ca0

08004254 <joyYjog>:

void joyYjog() {
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0

	static uint8_t toggleX = 0;
	switch(StateSpeed){
 8004258:	4b39      	ldr	r3, [pc, #228]	; (8004340 <joyYjog+0xec>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b03      	cmp	r3, #3
 800425e:	d838      	bhi.n	80042d2 <joyYjog+0x7e>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <joyYjog+0x14>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	08004279 	.word	0x08004279
 800426c:	08004281 	.word	0x08004281
 8004270:	08004289 	.word	0x08004289
 8004274:	08004297 	.word	0x08004297
	case 0:
		speed = 30;
 8004278:	4b32      	ldr	r3, [pc, #200]	; (8004344 <joyYjog+0xf0>)
 800427a:	221e      	movs	r2, #30
 800427c:	701a      	strb	r2, [r3, #0]
		break;
 800427e:	e028      	b.n	80042d2 <joyYjog+0x7e>
	case 1:
		speed = 60;
 8004280:	4b30      	ldr	r3, [pc, #192]	; (8004344 <joyYjog+0xf0>)
 8004282:	223c      	movs	r2, #60	; 0x3c
 8004284:	701a      	strb	r2, [r3, #0]
		break;
 8004286:	e024      	b.n	80042d2 <joyYjog+0x7e>
	case 2:
		speed = 90;
 8004288:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <joyYjog+0xf0>)
 800428a:	225a      	movs	r2, #90	; 0x5a
 800428c:	701a      	strb	r2, [r3, #0]
		toggleX = 0;
 800428e:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <joyYjog+0xf4>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
		break;
 8004294:	e01d      	b.n	80042d2 <joyYjog+0x7e>
	case 3:
		if(enableX == 1 && toggleX == 0){
 8004296:	4b2d      	ldr	r3, [pc, #180]	; (800434c <joyYjog+0xf8>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d10a      	bne.n	80042b4 <joyYjog+0x60>
 800429e:	4b2a      	ldr	r3, [pc, #168]	; (8004348 <joyYjog+0xf4>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <joyYjog+0x60>
			enableX = 0;
 80042a6:	4b29      	ldr	r3, [pc, #164]	; (800434c <joyYjog+0xf8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
			toggleX = 1;
 80042ac:	4b26      	ldr	r3, [pc, #152]	; (8004348 <joyYjog+0xf4>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	701a      	strb	r2, [r3, #0]
		}
		else if(enableX == 0 && toggleX == 0){
			enableX = 1;
			toggleX = 1;
		}
		break;
 80042b2:	e00d      	b.n	80042d0 <joyYjog+0x7c>
		else if(enableX == 0 && toggleX == 0){
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <joyYjog+0xf8>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <joyYjog+0x7c>
 80042bc:	4b22      	ldr	r3, [pc, #136]	; (8004348 <joyYjog+0xf4>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <joyYjog+0x7c>
			enableX = 1;
 80042c4:	4b21      	ldr	r3, [pc, #132]	; (800434c <joyYjog+0xf8>)
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
			toggleX = 1;
 80042ca:	4b1f      	ldr	r3, [pc, #124]	; (8004348 <joyYjog+0xf4>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
		break;
 80042d0:	bf00      	nop
	}


	if (Joy.Y == 1) {
 80042d2:	4b1f      	ldr	r3, [pc, #124]	; (8004350 <joyYjog+0xfc>)
 80042d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d10f      	bne.n	80042fc <joyYjog+0xa8>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80042dc:	2200      	movs	r2, #0
 80042de:	2140      	movs	r1, #64	; 0x40
 80042e0:	481c      	ldr	r0, [pc, #112]	; (8004354 <joyYjog+0x100>)
 80042e2:	f003 f8e3 	bl	80074ac <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed * 500);
 80042e6:	4b17      	ldr	r3, [pc, #92]	; (8004344 <joyYjog+0xf0>)
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80042f0:	fb03 f202 	mul.w	r2, r3, r2
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <joyYjog+0x104>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	63da      	str	r2, [r3, #60]	; 0x3c
	} else if (Joy.Y == 0) {

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
	}

}
 80042fa:	e01e      	b.n	800433a <joyYjog+0xe6>
	} else if (Joy.Y == -1) {
 80042fc:	4b14      	ldr	r3, [pc, #80]	; (8004350 <joyYjog+0xfc>)
 80042fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d10f      	bne.n	8004328 <joyYjog+0xd4>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8004308:	2201      	movs	r2, #1
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	4811      	ldr	r0, [pc, #68]	; (8004354 <joyYjog+0x100>)
 800430e:	f003 f8cd 	bl	80074ac <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, speed * 500);
 8004312:	4b0c      	ldr	r3, [pc, #48]	; (8004344 <joyYjog+0xf0>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800431c:	fb03 f202 	mul.w	r2, r3, r2
 8004320:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <joyYjog+0x104>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004326:	e008      	b.n	800433a <joyYjog+0xe6>
	} else if (Joy.Y == 0) {
 8004328:	4b09      	ldr	r3, [pc, #36]	; (8004350 <joyYjog+0xfc>)
 800432a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <joyYjog+0xe6>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <joyYjog+0x104>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200002dd 	.word	0x200002dd
 8004344:	20000022 	.word	0x20000022
 8004348:	20000e6c 	.word	0x20000e6c
 800434c:	200002dc 	.word	0x200002dc
 8004350:	200002c8 	.word	0x200002c8
 8004354:	40020800 	.word	0x40020800
 8004358:	20000f28 	.word	0x20000f28

0800435c <CollectPosition>:
void CollectPosition() {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0

	CheckButton();
 8004362:	f7fc ffb1 	bl	80012c8 <CheckButton>
	CheckJoystick();
 8004366:	f7fc ff3b 	bl	80011e0 <CheckJoystick>
	joyXjog();
 800436a:	f7ff ff43 	bl	80041f4 <joyXjog>
	joyYjog();
 800436e:	f7ff ff71 	bl	8004254 <joyYjog>

	static uint8_t PreReset = 0;
	if (PreReset == 0 && Joy.status == 3) {
 8004372:	4b69      	ldr	r3, [pc, #420]	; (8004518 <CollectPosition+0x1bc>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d114      	bne.n	80043a4 <CollectPosition+0x48>
 800437a:	4b68      	ldr	r3, [pc, #416]	; (800451c <CollectPosition+0x1c0>)
 800437c:	889b      	ldrh	r3, [r3, #4]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d110      	bne.n	80043a4 <CollectPosition+0x48>
		SubState = TrayP1;
 8004382:	4b67      	ldr	r3, [pc, #412]	; (8004520 <CollectPosition+0x1c4>)
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i <= 7; i++) {
 8004388:	2300      	movs	r3, #0
 800438a:	71fb      	strb	r3, [r7, #7]
 800438c:	e007      	b.n	800439e <CollectPosition+0x42>
			TrayPoint[i] = 0;
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	4a64      	ldr	r2, [pc, #400]	; (8004524 <CollectPosition+0x1c8>)
 8004392:	2100      	movs	r1, #0
 8004394:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (uint8_t i = 0; i <= 7; i++) {
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	3301      	adds	r3, #1
 800439c:	71fb      	strb	r3, [r7, #7]
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	2b07      	cmp	r3, #7
 80043a2:	d9f4      	bls.n	800438e <CollectPosition+0x32>
		}
	}

	static uint8_t PreSpeed = 0;
	if(Joy.status == 1 && PreSpeed == 0){
 80043a4:	4b5d      	ldr	r3, [pc, #372]	; (800451c <CollectPosition+0x1c0>)
 80043a6:	889b      	ldrh	r3, [r3, #4]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d110      	bne.n	80043ce <CollectPosition+0x72>
 80043ac:	4b5e      	ldr	r3, [pc, #376]	; (8004528 <CollectPosition+0x1cc>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10c      	bne.n	80043ce <CollectPosition+0x72>
		StateSpeed = (StateSpeed + 1 ) % 4 ;
 80043b4:	4b5d      	ldr	r3, [pc, #372]	; (800452c <CollectPosition+0x1d0>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	425a      	negs	r2, r3
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	f002 0203 	and.w	r2, r2, #3
 80043c4:	bf58      	it	pl
 80043c6:	4253      	negpl	r3, r2
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4b58      	ldr	r3, [pc, #352]	; (800452c <CollectPosition+0x1d0>)
 80043cc:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t PreRec = 0;

	switch (SubState) {
 80043ce:	4b54      	ldr	r3, [pc, #336]	; (8004520 <CollectPosition+0x1c4>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	f200 808c 	bhi.w	80044f0 <CollectPosition+0x194>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <CollectPosition+0x84>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	080043f1 	.word	0x080043f1
 80043e4:	08004429 	.word	0x08004429
 80043e8:	08004461 	.word	0x08004461
 80043ec:	08004499 	.word	0x08004499
	case TrayP1:

		if (Joy.status == 2 && PreRec == 0) {
 80043f0:	4b4a      	ldr	r3, [pc, #296]	; (800451c <CollectPosition+0x1c0>)
 80043f2:	889b      	ldrh	r3, [r3, #4]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d174      	bne.n	80044e2 <CollectPosition+0x186>
 80043f8:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <CollectPosition+0x1d4>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d170      	bne.n	80044e2 <CollectPosition+0x186>
			SubState = TrayP2;
 8004400:	4b47      	ldr	r3, [pc, #284]	; (8004520 <CollectPosition+0x1c4>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
			TrayPoint[0] = Uint2Int(registerFrame[0x44].U16);
 8004406:	4b4b      	ldr	r3, [pc, #300]	; (8004534 <CollectPosition+0x1d8>)
 8004408:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f897 	bl	8004540 <Uint2Int>
 8004412:	4603      	mov	r3, r0
 8004414:	461a      	mov	r2, r3
 8004416:	4b43      	ldr	r3, [pc, #268]	; (8004524 <CollectPosition+0x1c8>)
 8004418:	601a      	str	r2, [r3, #0]
			TrayPoint[1] = __HAL_TIM_GET_COUNTER(&htim2);
 800441a:	4b47      	ldr	r3, [pc, #284]	; (8004538 <CollectPosition+0x1dc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	461a      	mov	r2, r3
 8004422:	4b40      	ldr	r3, [pc, #256]	; (8004524 <CollectPosition+0x1c8>)
 8004424:	605a      	str	r2, [r3, #4]
		}
		break;
 8004426:	e05c      	b.n	80044e2 <CollectPosition+0x186>
	case TrayP2:

		if (Joy.status == 2 && PreRec == 0) {
 8004428:	4b3c      	ldr	r3, [pc, #240]	; (800451c <CollectPosition+0x1c0>)
 800442a:	889b      	ldrh	r3, [r3, #4]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d15a      	bne.n	80044e6 <CollectPosition+0x18a>
 8004430:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <CollectPosition+0x1d4>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d156      	bne.n	80044e6 <CollectPosition+0x18a>
			SubState = TrayP3;
 8004438:	4b39      	ldr	r3, [pc, #228]	; (8004520 <CollectPosition+0x1c4>)
 800443a:	2202      	movs	r2, #2
 800443c:	701a      	strb	r2, [r3, #0]
			TrayPoint[2] = Uint2Int(registerFrame[0x44].U16);
 800443e:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <CollectPosition+0x1d8>)
 8004440:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f87b 	bl	8004540 <Uint2Int>
 800444a:	4603      	mov	r3, r0
 800444c:	461a      	mov	r2, r3
 800444e:	4b35      	ldr	r3, [pc, #212]	; (8004524 <CollectPosition+0x1c8>)
 8004450:	609a      	str	r2, [r3, #8]
			TrayPoint[3] = __HAL_TIM_GET_COUNTER(&htim2);
 8004452:	4b39      	ldr	r3, [pc, #228]	; (8004538 <CollectPosition+0x1dc>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	461a      	mov	r2, r3
 800445a:	4b32      	ldr	r3, [pc, #200]	; (8004524 <CollectPosition+0x1c8>)
 800445c:	60da      	str	r2, [r3, #12]
		}
		break;
 800445e:	e042      	b.n	80044e6 <CollectPosition+0x18a>
	case TrayP3:

		if (Joy.status == 2 && PreRec == 0) {
 8004460:	4b2e      	ldr	r3, [pc, #184]	; (800451c <CollectPosition+0x1c0>)
 8004462:	889b      	ldrh	r3, [r3, #4]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d140      	bne.n	80044ea <CollectPosition+0x18e>
 8004468:	4b31      	ldr	r3, [pc, #196]	; (8004530 <CollectPosition+0x1d4>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d13c      	bne.n	80044ea <CollectPosition+0x18e>
			SubState = TrayP4;
 8004470:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <CollectPosition+0x1c4>)
 8004472:	2203      	movs	r2, #3
 8004474:	701a      	strb	r2, [r3, #0]
			TrayPoint[4] = Uint2Int(registerFrame[0x44].U16);
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <CollectPosition+0x1d8>)
 8004478:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f85f 	bl	8004540 <Uint2Int>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	4b27      	ldr	r3, [pc, #156]	; (8004524 <CollectPosition+0x1c8>)
 8004488:	611a      	str	r2, [r3, #16]
			TrayPoint[5] = __HAL_TIM_GET_COUNTER(&htim2);
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <CollectPosition+0x1dc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	461a      	mov	r2, r3
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <CollectPosition+0x1c8>)
 8004494:	615a      	str	r2, [r3, #20]
		}
		break;
 8004496:	e028      	b.n	80044ea <CollectPosition+0x18e>
	case TrayP4:

		if (Joy.status == 2 && PreRec == 0) {
 8004498:	4b20      	ldr	r3, [pc, #128]	; (800451c <CollectPosition+0x1c0>)
 800449a:	889b      	ldrh	r3, [r3, #4]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d114      	bne.n	80044ca <CollectPosition+0x16e>
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <CollectPosition+0x1d4>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d110      	bne.n	80044ca <CollectPosition+0x16e>
			TrayPoint[6] = Uint2Int(registerFrame[0x44].U16);
 80044a8:	4b22      	ldr	r3, [pc, #136]	; (8004534 <CollectPosition+0x1d8>)
 80044aa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f846 	bl	8004540 <Uint2Int>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <CollectPosition+0x1c8>)
 80044ba:	619a      	str	r2, [r3, #24]
			TrayPoint[7] = __HAL_TIM_GET_COUNTER(&htim2);
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <CollectPosition+0x1dc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	461a      	mov	r2, r3
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <CollectPosition+0x1c8>)
 80044c6:	61da      	str	r2, [r3, #28]
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
			SubState = TrayP1;
		}
		break;
 80044c8:	e011      	b.n	80044ee <CollectPosition+0x192>
		} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {
 80044ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044ce:	481b      	ldr	r0, [pc, #108]	; (800453c <CollectPosition+0x1e0>)
 80044d0:	f002 ffd4 	bl	800747c <HAL_GPIO_ReadPin>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <CollectPosition+0x192>
			SubState = TrayP1;
 80044da:	4b11      	ldr	r3, [pc, #68]	; (8004520 <CollectPosition+0x1c4>)
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
		break;
 80044e0:	e005      	b.n	80044ee <CollectPosition+0x192>
		break;
 80044e2:	bf00      	nop
 80044e4:	e004      	b.n	80044f0 <CollectPosition+0x194>
		break;
 80044e6:	bf00      	nop
 80044e8:	e002      	b.n	80044f0 <CollectPosition+0x194>
		break;
 80044ea:	bf00      	nop
 80044ec:	e000      	b.n	80044f0 <CollectPosition+0x194>
		break;
 80044ee:	bf00      	nop

	}

	PreSpeed = Joy.status;
 80044f0:	4b0a      	ldr	r3, [pc, #40]	; (800451c <CollectPosition+0x1c0>)
 80044f2:	889b      	ldrh	r3, [r3, #4]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <CollectPosition+0x1cc>)
 80044f8:	701a      	strb	r2, [r3, #0]
	PreReset = Joy.status;
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <CollectPosition+0x1c0>)
 80044fc:	889b      	ldrh	r3, [r3, #4]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	4b05      	ldr	r3, [pc, #20]	; (8004518 <CollectPosition+0x1bc>)
 8004502:	701a      	strb	r2, [r3, #0]
	PreRec = Joy.status;
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <CollectPosition+0x1c0>)
 8004506:	889b      	ldrh	r3, [r3, #4]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <CollectPosition+0x1d4>)
 800450c:	701a      	strb	r2, [r3, #0]
}
 800450e:	bf00      	nop
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000e6d 	.word	0x20000e6d
 800451c:	200002c8 	.word	0x200002c8
 8004520:	20000e30 	.word	0x20000e30
 8004524:	20000e34 	.word	0x20000e34
 8004528:	20000e6e 	.word	0x20000e6e
 800452c:	200002dd 	.word	0x200002dd
 8004530:	20000e6f 	.word	0x20000e6f
 8004534:	20000ca0 	.word	0x20000ca0
 8004538:	20000e74 	.word	0x20000e74
 800453c:	40020800 	.word	0x40020800

08004540 <Uint2Int>:

int16_t Uint2Int(uint16_t underflow)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	80fb      	strh	r3, [r7, #6]
    uint16_t integer = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	81bb      	strh	r3, [r7, #12]
    int16_t bitwise = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	81fb      	strh	r3, [r7, #14]

    if (underflow > 40000) {
 8004552:	88fb      	ldrh	r3, [r7, #6]
 8004554:	f649 4240 	movw	r2, #40000	; 0x9c40
 8004558:	4293      	cmp	r3, r2
 800455a:	d907      	bls.n	800456c <Uint2Int+0x2c>
        integer = (uint16_t) (UINT16_MAX - underflow + 1);
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	425b      	negs	r3, r3
 8004560:	81bb      	strh	r3, [r7, #12]
        bitwise = ~integer;
 8004562:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004566:	43db      	mvns	r3, r3
 8004568:	81fb      	strh	r3, [r7, #14]
 800456a:	e001      	b.n	8004570 <Uint2Int+0x30>
    } else {
        bitwise = underflow;
 800456c:	88fb      	ldrh	r3, [r7, #6]
 800456e:	81fb      	strh	r3, [r7, #14]
    }
    return bitwise;
 8004570:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <EndeffectorCheck>:

void EndeffectorCheck(){
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0

	if(registerFrame[0x02].U16 == 1 && PreState != 1){
 8004584:	4b45      	ldr	r3, [pc, #276]	; (800469c <EndeffectorCheck+0x11c>)
 8004586:	889b      	ldrh	r3, [r3, #4]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10c      	bne.n	80045a6 <EndeffectorCheck+0x26>
 800458c:	4b44      	ldr	r3, [pc, #272]	; (80046a0 <EndeffectorCheck+0x120>)
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d008      	beq.n	80045a6 <EndeffectorCheck+0x26>
		testState = TestOn;
 8004594:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <EndeffectorCheck+0x124>)
 8004596:	2202      	movs	r2, #2
 8004598:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 800459a:	4b43      	ldr	r3, [pc, #268]	; (80046a8 <EndeffectorCheck+0x128>)
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
		TestMode();
 80045a0:	f7fc fdde 	bl	8001160 <TestMode>
 80045a4:	e061      	b.n	800466a <EndeffectorCheck+0xea>
	}

	else if(registerFrame[0x02].U16 == 0 && PreState == 1){
 80045a6:	4b3d      	ldr	r3, [pc, #244]	; (800469c <EndeffectorCheck+0x11c>)
 80045a8:	889b      	ldrh	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10c      	bne.n	80045c8 <EndeffectorCheck+0x48>
 80045ae:	4b3c      	ldr	r3, [pc, #240]	; (80046a0 <EndeffectorCheck+0x120>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d108      	bne.n	80045c8 <EndeffectorCheck+0x48>
		testState = TestOff;
 80045b6:	4b3b      	ldr	r3, [pc, #236]	; (80046a4 <EndeffectorCheck+0x124>)
 80045b8:	2203      	movs	r2, #3
 80045ba:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 80045bc:	4b3a      	ldr	r3, [pc, #232]	; (80046a8 <EndeffectorCheck+0x128>)
 80045be:	2201      	movs	r2, #1
 80045c0:	701a      	strb	r2, [r3, #0]
		TestMode();
 80045c2:	f7fc fdcd 	bl	8001160 <TestMode>
 80045c6:	e050      	b.n	800466a <EndeffectorCheck+0xea>
	}

	else if(registerFrame[0x02].U16 == 2 && PreState != 2){
 80045c8:	4b34      	ldr	r3, [pc, #208]	; (800469c <EndeffectorCheck+0x11c>)
 80045ca:	889b      	ldrh	r3, [r3, #4]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d10c      	bne.n	80045ea <EndeffectorCheck+0x6a>
 80045d0:	4b33      	ldr	r3, [pc, #204]	; (80046a0 <EndeffectorCheck+0x120>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d008      	beq.n	80045ea <EndeffectorCheck+0x6a>
		testState = GripOn;
 80045d8:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <EndeffectorCheck+0x124>)
 80045da:	2204      	movs	r2, #4
 80045dc:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 80045de:	4b32      	ldr	r3, [pc, #200]	; (80046a8 <EndeffectorCheck+0x128>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
		TestMode();
 80045e4:	f7fc fdbc 	bl	8001160 <TestMode>
 80045e8:	e03f      	b.n	800466a <EndeffectorCheck+0xea>
	}

	else if(registerFrame[0x02].U16 == 0 && PreState == 2){
 80045ea:	4b2c      	ldr	r3, [pc, #176]	; (800469c <EndeffectorCheck+0x11c>)
 80045ec:	889b      	ldrh	r3, [r3, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10c      	bne.n	800460c <EndeffectorCheck+0x8c>
 80045f2:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <EndeffectorCheck+0x120>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d108      	bne.n	800460c <EndeffectorCheck+0x8c>
		testState = GripOff;
 80045fa:	4b2a      	ldr	r3, [pc, #168]	; (80046a4 <EndeffectorCheck+0x124>)
 80045fc:	2207      	movs	r2, #7
 80045fe:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 8004600:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <EndeffectorCheck+0x128>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
		TestMode();
 8004606:	f7fc fdab 	bl	8001160 <TestMode>
 800460a:	e02e      	b.n	800466a <EndeffectorCheck+0xea>
	}

	else if(registerFrame[0x02].U16 == 6 && PreState != 6){
 800460c:	4b23      	ldr	r3, [pc, #140]	; (800469c <EndeffectorCheck+0x11c>)
 800460e:	889b      	ldrh	r3, [r3, #4]
 8004610:	2b06      	cmp	r3, #6
 8004612:	d113      	bne.n	800463c <EndeffectorCheck+0xbc>
 8004614:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <EndeffectorCheck+0x120>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b06      	cmp	r3, #6
 800461a:	d00f      	beq.n	800463c <EndeffectorCheck+0xbc>
		testState = PickUp;
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <EndeffectorCheck+0x124>)
 800461e:	2205      	movs	r2, #5
 8004620:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 8004622:	4b21      	ldr	r3, [pc, #132]	; (80046a8 <EndeffectorCheck+0x128>)
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
		TestMode();
 8004628:	f7fc fd9a 	bl	8001160 <TestMode>
		Delay = HAL_GetTick() + 2000;
 800462c:	f001 fc66 	bl	8005efc <HAL_GetTick>
 8004630:	4603      	mov	r3, r0
 8004632:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004636:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <EndeffectorCheck+0x12c>)
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e016      	b.n	800466a <EndeffectorCheck+0xea>
	}

	else if(registerFrame[0x02].U16 == 10 && PreState != 10){
 800463c:	4b17      	ldr	r3, [pc, #92]	; (800469c <EndeffectorCheck+0x11c>)
 800463e:	889b      	ldrh	r3, [r3, #4]
 8004640:	2b0a      	cmp	r3, #10
 8004642:	d112      	bne.n	800466a <EndeffectorCheck+0xea>
 8004644:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <EndeffectorCheck+0x120>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b0a      	cmp	r3, #10
 800464a:	d00e      	beq.n	800466a <EndeffectorCheck+0xea>
		testState = PlaceDown;
 800464c:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <EndeffectorCheck+0x124>)
 800464e:	2206      	movs	r2, #6
 8004650:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 8004652:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <EndeffectorCheck+0x128>)
 8004654:	2201      	movs	r2, #1
 8004656:	701a      	strb	r2, [r3, #0]
		TestMode();
 8004658:	f7fc fd82 	bl	8001160 <TestMode>
		Delay = HAL_GetTick() + 2000;
 800465c:	f001 fc4e 	bl	8005efc <HAL_GetTick>
 8004660:	4603      	mov	r3, r0
 8004662:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004666:	4a11      	ldr	r2, [pc, #68]	; (80046ac <EndeffectorCheck+0x12c>)
 8004668:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick() >= Delay && (registerFrame[0x02].U16 == 6 || registerFrame[0x02].U16 == 10)){
 800466a:	f001 fc47 	bl	8005efc <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0e      	ldr	r3, [pc, #56]	; (80046ac <EndeffectorCheck+0x12c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d30a      	bcc.n	800468e <EndeffectorCheck+0x10e>
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <EndeffectorCheck+0x11c>)
 800467a:	889b      	ldrh	r3, [r3, #4]
 800467c:	2b06      	cmp	r3, #6
 800467e:	d003      	beq.n	8004688 <EndeffectorCheck+0x108>
 8004680:	4b06      	ldr	r3, [pc, #24]	; (800469c <EndeffectorCheck+0x11c>)
 8004682:	889b      	ldrh	r3, [r3, #4]
 8004684:	2b0a      	cmp	r3, #10
 8004686:	d102      	bne.n	800468e <EndeffectorCheck+0x10e>
		registerFrame[0x02].U16 = 2;
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <EndeffectorCheck+0x11c>)
 800468a:	2202      	movs	r2, #2
 800468c:	809a      	strh	r2, [r3, #4]
	}

	PreState = registerFrame[0x02].U16;
 800468e:	4b03      	ldr	r3, [pc, #12]	; (800469c <EndeffectorCheck+0x11c>)
 8004690:	889b      	ldrh	r3, [r3, #4]
 8004692:	b2da      	uxtb	r2, r3
 8004694:	4b02      	ldr	r3, [pc, #8]	; (80046a0 <EndeffectorCheck+0x120>)
 8004696:	701a      	strb	r2, [r3, #0]
}
 8004698:	bf00      	nop
 800469a:	bd80      	pop	{r7, pc}
 800469c:	20000ca0 	.word	0x20000ca0
 80046a0:	20000e54 	.word	0x20000e54
 80046a4:	200002c4 	.word	0x200002c4
 80046a8:	200002c0 	.word	0x200002c0
 80046ac:	20000e58 	.word	0x20000e58

080046b0 <PickPlace>:

void PickPlace(){
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
	static uint8_t PPState = 0;

	switch(PPState){
 80046b4:	4b15      	ldr	r3, [pc, #84]	; (800470c <PickPlace+0x5c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <PickPlace+0x12>
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d00f      	beq.n	80046e0 <PickPlace+0x30>
		TestMode();

		PPState = (PPState + 1) % 2;
		break;
	}
}
 80046c0:	e022      	b.n	8004708 <PickPlace+0x58>
		testState = PickUp;
 80046c2:	4b13      	ldr	r3, [pc, #76]	; (8004710 <PickPlace+0x60>)
 80046c4:	2205      	movs	r2, #5
 80046c6:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 80046c8:	4b12      	ldr	r3, [pc, #72]	; (8004714 <PickPlace+0x64>)
 80046ca:	2201      	movs	r2, #1
 80046cc:	701a      	strb	r2, [r3, #0]
		TestMode();
 80046ce:	f7fc fd47 	bl	8001160 <TestMode>
		PPState = PPState + 1;
 80046d2:	4b0e      	ldr	r3, [pc, #56]	; (800470c <PickPlace+0x5c>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	4b0c      	ldr	r3, [pc, #48]	; (800470c <PickPlace+0x5c>)
 80046dc:	701a      	strb	r2, [r3, #0]
		break;
 80046de:	e013      	b.n	8004708 <PickPlace+0x58>
		testState = PlaceDown;
 80046e0:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <PickPlace+0x60>)
 80046e2:	2206      	movs	r2, #6
 80046e4:	701a      	strb	r2, [r3, #0]
		Stamp = 1;
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <PickPlace+0x64>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
		TestMode();
 80046ec:	f7fc fd38 	bl	8001160 <TestMode>
		PPState = (PPState + 1) % 2;
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <PickPlace+0x5c>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	bfb8      	it	lt
 80046fe:	425b      	neglt	r3, r3
 8004700:	b2da      	uxtb	r2, r3
 8004702:	4b02      	ldr	r3, [pc, #8]	; (800470c <PickPlace+0x5c>)
 8004704:	701a      	strb	r2, [r3, #0]
		break;
 8004706:	bf00      	nop
}
 8004708:	bf00      	nop
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000e70 	.word	0x20000e70
 8004710:	200002c4 	.word	0x200002c4
 8004714:	200002c0 	.word	0x200002c0

08004718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800471c:	b672      	cpsid	i
}
 800471e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004720:	e7fe      	b.n	8004720 <Error_Handler+0x8>
	...

08004724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	4b10      	ldr	r3, [pc, #64]	; (8004770 <HAL_MspInit+0x4c>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <HAL_MspInit+0x4c>)
 8004734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004738:	6453      	str	r3, [r2, #68]	; 0x44
 800473a:	4b0d      	ldr	r3, [pc, #52]	; (8004770 <HAL_MspInit+0x4c>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	607b      	str	r3, [r7, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	603b      	str	r3, [r7, #0]
 800474a:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_MspInit+0x4c>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	4a08      	ldr	r2, [pc, #32]	; (8004770 <HAL_MspInit+0x4c>)
 8004750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004754:	6413      	str	r3, [r2, #64]	; 0x40
 8004756:	4b06      	ldr	r3, [pc, #24]	; (8004770 <HAL_MspInit+0x4c>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475e:	603b      	str	r3, [r7, #0]
 8004760:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004762:	2007      	movs	r0, #7
 8004764:	f002 f8a8 	bl	80068b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004768:	bf00      	nop
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40023800 	.word	0x40023800

08004774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004778:	e7fe      	b.n	8004778 <NMI_Handler+0x4>

0800477a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800477e:	e7fe      	b.n	800477e <HardFault_Handler+0x4>

08004780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004784:	e7fe      	b.n	8004784 <MemManage_Handler+0x4>

08004786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800478a:	e7fe      	b.n	800478a <BusFault_Handler+0x4>

0800478c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004790:	e7fe      	b.n	8004790 <UsageFault_Handler+0x4>

08004792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047c0:	f001 fb88 	bl	8005ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80047cc:	2004      	movs	r0, #4
 80047ce:	f002 fe87 	bl	80074e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80047dc:	4802      	ldr	r0, [pc, #8]	; (80047e8 <DMA1_Stream6_IRQHandler+0x10>)
 80047de:	f002 fa45 	bl	8006c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80047e2:	bf00      	nop
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	2000126c 	.word	0x2000126c

080047ec <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80047f0:	4802      	ldr	r0, [pc, #8]	; (80047fc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80047f2:	f006 fbdf 	bl	800afb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80047f6:	bf00      	nop
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20001144 	.word	0x20001144

08004800 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004804:	4802      	ldr	r0, [pc, #8]	; (8004810 <TIM2_IRQHandler+0x10>)
 8004806:	f006 fbd5 	bl	800afb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20000e74 	.word	0x20000e74

08004814 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004818:	4802      	ldr	r0, [pc, #8]	; (8004824 <TIM3_IRQHandler+0x10>)
 800481a:	f006 fbcb 	bl	800afb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000f28 	.word	0x20000f28

08004828 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800482c:	4802      	ldr	r0, [pc, #8]	; (8004838 <TIM4_IRQHandler+0x10>)
 800482e:	f006 fbc1 	bl	800afb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000fdc 	.word	0x20000fdc

0800483c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004840:	4802      	ldr	r0, [pc, #8]	; (800484c <I2C1_EV_IRQHandler+0x10>)
 8004842:	f003 facd 	bl	8007de0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000038c 	.word	0x2000038c

08004850 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004854:	4802      	ldr	r0, [pc, #8]	; (8004860 <I2C1_ER_IRQHandler+0x10>)
 8004856:	f003 fc34 	bl	80080c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800485a:	bf00      	nop
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	2000038c 	.word	0x2000038c

08004864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004868:	4802      	ldr	r0, [pc, #8]	; (8004874 <USART2_IRQHandler+0x10>)
 800486a:	f007 fe59 	bl	800c520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800486e:	bf00      	nop
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	200011f8 	.word	0x200011f8

08004878 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800487c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004880:	f002 fe2e 	bl	80074e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004884:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004888:	f002 fe2a 	bl	80074e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800488c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004890:	f002 fe26 	bl	80074e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}

08004898 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800489c:	4802      	ldr	r0, [pc, #8]	; (80048a8 <DMA2_Stream0_IRQHandler+0x10>)
 800489e:	f002 f9e5 	bl	8006c6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80048a2:	bf00      	nop
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2000032c 	.word	0x2000032c

080048ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <SystemInit+0x20>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	4a05      	ldr	r2, [pc, #20]	; (80048cc <SystemInit+0x20>)
 80048b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048c0:	bf00      	nop
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	e000ed00 	.word	0xe000ed00

080048d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08c      	sub	sp, #48	; 0x30
 80048d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	2224      	movs	r2, #36	; 0x24
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f008 fe9c 	bl	800d61c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048e4:	1d3b      	adds	r3, r7, #4
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048ec:	4b21      	ldr	r3, [pc, #132]	; (8004974 <MX_TIM2_Init+0xa4>)
 80048ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80048f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80048f4:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <MX_TIM2_Init+0xa4>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <MX_TIM2_Init+0xa4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <MX_TIM2_Init+0xa4>)
 8004902:	f04f 32ff 	mov.w	r2, #4294967295
 8004906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004908:	4b1a      	ldr	r3, [pc, #104]	; (8004974 <MX_TIM2_Init+0xa4>)
 800490a:	2200      	movs	r2, #0
 800490c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <MX_TIM2_Init+0xa4>)
 8004910:	2200      	movs	r2, #0
 8004912:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004914:	2303      	movs	r3, #3
 8004916:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800491c:	2301      	movs	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004928:	2300      	movs	r3, #0
 800492a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800492c:	2301      	movs	r3, #1
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004930:	2300      	movs	r3, #0
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004934:	2300      	movs	r3, #0
 8004936:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004938:	f107 030c 	add.w	r3, r7, #12
 800493c:	4619      	mov	r1, r3
 800493e:	480d      	ldr	r0, [pc, #52]	; (8004974 <MX_TIM2_Init+0xa4>)
 8004940:	f006 f9f6 	bl	800ad30 <HAL_TIM_Encoder_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800494a:	f7ff fee5 	bl	8004718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800494e:	2300      	movs	r3, #0
 8004950:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004952:	2300      	movs	r3, #0
 8004954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004956:	1d3b      	adds	r3, r7, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4806      	ldr	r0, [pc, #24]	; (8004974 <MX_TIM2_Init+0xa4>)
 800495c:	f007 fb00 	bl	800bf60 <HAL_TIMEx_MasterConfigSynchronization>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8004966:	f7ff fed7 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800496a:	bf00      	nop
 800496c:	3730      	adds	r7, #48	; 0x30
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	20000e74 	.word	0x20000e74

08004978 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800497e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]
 800498a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498c:	f107 0320 	add.w	r3, r7, #32
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
 80049a4:	615a      	str	r2, [r3, #20]
 80049a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80049a8:	4b2c      	ldr	r3, [pc, #176]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049aa:	4a2d      	ldr	r2, [pc, #180]	; (8004a60 <MX_TIM3_Init+0xe8>)
 80049ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80049ae:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b4:	4b29      	ldr	r3, [pc, #164]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80049ba:	4b28      	ldr	r3, [pc, #160]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049bc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80049c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049c2:	4b26      	ldr	r3, [pc, #152]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049ce:	4823      	ldr	r0, [pc, #140]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049d0:	f005 fea6 	bl	800a720 <HAL_TIM_Base_Init>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80049da:	f7ff fe9d 	bl	8004718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049e8:	4619      	mov	r1, r3
 80049ea:	481c      	ldr	r0, [pc, #112]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049ec:	f006 fd28 	bl	800b440 <HAL_TIM_ConfigClockSource>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80049f6:	f7ff fe8f 	bl	8004718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80049fa:	4818      	ldr	r0, [pc, #96]	; (8004a5c <MX_TIM3_Init+0xe4>)
 80049fc:	f005 ffb4 	bl	800a968 <HAL_TIM_PWM_Init>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004a06:	f7ff fe87 	bl	8004718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a12:	f107 0320 	add.w	r3, r7, #32
 8004a16:	4619      	mov	r1, r3
 8004a18:	4810      	ldr	r0, [pc, #64]	; (8004a5c <MX_TIM3_Init+0xe4>)
 8004a1a:	f007 faa1 	bl	800bf60 <HAL_TIMEx_MasterConfigSynchronization>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004a24:	f7ff fe78 	bl	8004718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a28:	2360      	movs	r3, #96	; 0x60
 8004a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a30:	2300      	movs	r3, #0
 8004a32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a38:	1d3b      	adds	r3, r7, #4
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4807      	ldr	r0, [pc, #28]	; (8004a5c <MX_TIM3_Init+0xe4>)
 8004a40:	f006 fc3c 	bl	800b2bc <HAL_TIM_PWM_ConfigChannel>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004a4a:	f7ff fe65 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a4e:	4803      	ldr	r0, [pc, #12]	; (8004a5c <MX_TIM3_Init+0xe4>)
 8004a50:	f000 f9c0 	bl	8004dd4 <HAL_TIM_MspPostInit>

}
 8004a54:	bf00      	nop
 8004a56:	3738      	adds	r7, #56	; 0x38
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	20000f28 	.word	0x20000f28
 8004a60:	40000400 	.word	0x40000400

08004a64 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	605a      	str	r2, [r3, #4]
 8004a74:	609a      	str	r2, [r3, #8]
 8004a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a78:	463b      	mov	r3, r7
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004a80:	4b1d      	ldr	r3, [pc, #116]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004a82:	4a1e      	ldr	r2, [pc, #120]	; (8004afc <MX_TIM4_Init+0x98>)
 8004a84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 99;
 8004a86:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004a88:	2263      	movs	r2, #99	; 0x63
 8004a8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 399;
 8004a92:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004a94:	f240 128f 	movw	r2, #399	; 0x18f
 8004a98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a9a:	4b17      	ldr	r3, [pc, #92]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004aa0:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004aa6:	4814      	ldr	r0, [pc, #80]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004aa8:	f005 fe3a 	bl	800a720 <HAL_TIM_Base_Init>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004ab2:	f7ff fe31 	bl	8004718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	480d      	ldr	r0, [pc, #52]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004ac4:	f006 fcbc 	bl	800b440 <HAL_TIM_ConfigClockSource>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004ace:	f7ff fe23 	bl	8004718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004ada:	463b      	mov	r3, r7
 8004adc:	4619      	mov	r1, r3
 8004ade:	4806      	ldr	r0, [pc, #24]	; (8004af8 <MX_TIM4_Init+0x94>)
 8004ae0:	f007 fa3e 	bl	800bf60 <HAL_TIMEx_MasterConfigSynchronization>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8004aea:	f7ff fe15 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004aee:	bf00      	nop
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	20000fdc 	.word	0x20000fdc
 8004afc:	40000800 	.word	0x40000800

08004b00 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b06:	f107 0308 	add.w	r3, r7, #8
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	609a      	str	r2, [r3, #8]
 8004b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b14:	463b      	mov	r3, r7
 8004b16:	2200      	movs	r2, #0
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004b1c:	4b1d      	ldr	r3, [pc, #116]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b1e:	4a1e      	ldr	r2, [pc, #120]	; (8004b98 <MX_TIM5_Init+0x98>)
 8004b20:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8004b22:	4b1c      	ldr	r3, [pc, #112]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b24:	2253      	movs	r2, #83	; 0x53
 8004b26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b28:	4b1a      	ldr	r3, [pc, #104]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b36:	4b17      	ldr	r3, [pc, #92]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b3c:	4b15      	ldr	r3, [pc, #84]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004b42:	4814      	ldr	r0, [pc, #80]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b44:	f005 fdec 	bl	800a720 <HAL_TIM_Base_Init>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8004b4e:	f7ff fde3 	bl	8004718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	480d      	ldr	r0, [pc, #52]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b60:	f006 fc6e 	bl	800b440 <HAL_TIM_ConfigClockSource>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8004b6a:	f7ff fdd5 	bl	8004718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004b76:	463b      	mov	r3, r7
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4806      	ldr	r0, [pc, #24]	; (8004b94 <MX_TIM5_Init+0x94>)
 8004b7c:	f007 f9f0 	bl	800bf60 <HAL_TIMEx_MasterConfigSynchronization>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8004b86:	f7ff fdc7 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20001090 	.word	0x20001090
 8004b98:	40000c00 	.word	0x40000c00

08004b9c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ba2:	1d3b      	adds	r3, r7, #4
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	60da      	str	r2, [r3, #12]
 8004bae:	611a      	str	r2, [r3, #16]
 8004bb0:	615a      	str	r2, [r3, #20]
 8004bb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004bb4:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bb6:	4a22      	ldr	r2, [pc, #136]	; (8004c40 <MX_TIM11_Init+0xa4>)
 8004bb8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8004bba:	4b20      	ldr	r3, [pc, #128]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bbc:	2263      	movs	r2, #99	; 0x63
 8004bbe:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bc0:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8004bc6:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bc8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8004bcc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bce:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004bd4:	4b19      	ldr	r3, [pc, #100]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004bda:	4818      	ldr	r0, [pc, #96]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bdc:	f005 fda0 	bl	800a720 <HAL_TIM_Base_Init>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004be6:	f7ff fd97 	bl	8004718 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8004bea:	4814      	ldr	r0, [pc, #80]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bec:	f005 fe56 	bl	800a89c <HAL_TIM_OC_Init>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004bf6:	f7ff fd8f 	bl	8004718 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8004bfa:	2108      	movs	r1, #8
 8004bfc:	480f      	ldr	r0, [pc, #60]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004bfe:	f005 ffc9 	bl	800ab94 <HAL_TIM_OnePulse_Init>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8004c08:	f7ff fd86 	bl	8004718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8004c10:	f240 5399 	movw	r3, #1433	; 0x599
 8004c14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	2200      	movs	r2, #0
 8004c22:	4619      	mov	r1, r3
 8004c24:	4805      	ldr	r0, [pc, #20]	; (8004c3c <MX_TIM11_Init+0xa0>)
 8004c26:	f006 faed 	bl	800b204 <HAL_TIM_OC_ConfigChannel>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8004c30:	f7ff fd72 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004c34:	bf00      	nop
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20001144 	.word	0x20001144
 8004c40:	40014800 	.word	0x40014800

08004c44 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4c:	f107 0314 	add.w	r3, r7, #20
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]
 8004c58:	60da      	str	r2, [r3, #12]
 8004c5a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c64:	d133      	bne.n	8004cce <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c66:	2300      	movs	r3, #0
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	4a1a      	ldr	r2, [pc, #104]	; (8004cd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004c70:	f043 0301 	orr.w	r3, r3, #1
 8004c74:	6413      	str	r3, [r2, #64]	; 0x40
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4b14      	ldr	r3, [pc, #80]	; (8004cd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a13      	ldr	r2, [pc, #76]	; (8004cd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004caa:	2300      	movs	r3, #0
 8004cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cb2:	f107 0314 	add.w	r3, r7, #20
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4808      	ldr	r0, [pc, #32]	; (8004cdc <HAL_TIM_Encoder_MspInit+0x98>)
 8004cba:	f002 fa5b 	bl	8007174 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	201c      	movs	r0, #28
 8004cc4:	f001 fe03 	bl	80068ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004cc8:	201c      	movs	r0, #28
 8004cca:	f001 fe1c 	bl	8006906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004cce:	bf00      	nop
 8004cd0:	3728      	adds	r7, #40	; 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800
 8004cdc:	40020000 	.word	0x40020000

08004ce0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <HAL_TIM_Base_MspInit+0xe0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d116      	bne.n	8004d20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a32      	ldr	r2, [pc, #200]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004cfc:	f043 0302 	orr.w	r3, r3, #2
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	4b30      	ldr	r3, [pc, #192]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	617b      	str	r3, [r7, #20]
 8004d0c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2100      	movs	r1, #0
 8004d12:	201d      	movs	r0, #29
 8004d14:	f001 fddb 	bl	80068ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004d18:	201d      	movs	r0, #29
 8004d1a:	f001 fdf4 	bl	8006906 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8004d1e:	e04a      	b.n	8004db6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <HAL_TIM_Base_MspInit+0xe8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d116      	bne.n	8004d58 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	4a24      	ldr	r2, [pc, #144]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d34:	f043 0304 	orr.w	r3, r3, #4
 8004d38:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3a:	4b22      	ldr	r3, [pc, #136]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8004d46:	2201      	movs	r2, #1
 8004d48:	2100      	movs	r1, #0
 8004d4a:	201e      	movs	r0, #30
 8004d4c:	f001 fdbf 	bl	80068ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d50:	201e      	movs	r0, #30
 8004d52:	f001 fdd8 	bl	8006906 <HAL_NVIC_EnableIRQ>
}
 8004d56:	e02e      	b.n	8004db6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM5)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <HAL_TIM_Base_MspInit+0xec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d10e      	bne.n	8004d80 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	4b17      	ldr	r3, [pc, #92]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	4a16      	ldr	r2, [pc, #88]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d6c:	f043 0308 	orr.w	r3, r3, #8
 8004d70:	6413      	str	r3, [r2, #64]	; 0x40
 8004d72:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
}
 8004d7e:	e01a      	b.n	8004db6 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <HAL_TIM_Base_MspInit+0xf0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d115      	bne.n	8004db6 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60bb      	str	r3, [r7, #8]
 8004d8e:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d98:	6453      	str	r3, [r2, #68]	; 0x44
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <HAL_TIM_Base_MspInit+0xe4>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da2:	60bb      	str	r3, [r7, #8]
 8004da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2100      	movs	r1, #0
 8004daa:	201a      	movs	r0, #26
 8004dac:	f001 fd8f 	bl	80068ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004db0:	201a      	movs	r0, #26
 8004db2:	f001 fda8 	bl	8006906 <HAL_NVIC_EnableIRQ>
}
 8004db6:	bf00      	nop
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40000400 	.word	0x40000400
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40014800 	.word	0x40014800

08004dd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	f107 030c 	add.w	r3, r7, #12
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a12      	ldr	r2, [pc, #72]	; (8004e3c <HAL_TIM_MspPostInit+0x68>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d11e      	bne.n	8004e34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004df6:	2300      	movs	r3, #0
 8004df8:	60bb      	str	r3, [r7, #8]
 8004dfa:	4b11      	ldr	r3, [pc, #68]	; (8004e40 <HAL_TIM_MspPostInit+0x6c>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	4a10      	ldr	r2, [pc, #64]	; (8004e40 <HAL_TIM_MspPostInit+0x6c>)
 8004e00:	f043 0304 	orr.w	r3, r3, #4
 8004e04:	6313      	str	r3, [r2, #48]	; 0x30
 8004e06:	4b0e      	ldr	r3, [pc, #56]	; (8004e40 <HAL_TIM_MspPostInit+0x6c>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f003 0304 	and.w	r3, r3, #4
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e24:	2302      	movs	r3, #2
 8004e26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e28:	f107 030c 	add.w	r3, r7, #12
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4805      	ldr	r0, [pc, #20]	; (8004e44 <HAL_TIM_MspPostInit+0x70>)
 8004e30:	f002 f9a0 	bl	8007174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004e34:	bf00      	nop
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	40000400 	.word	0x40000400
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40020800 	.word	0x40020800

08004e48 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e4c:	4b12      	ldr	r3, [pc, #72]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e4e:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <MX_USART2_UART_Init+0x54>)
 8004e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e54:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8004e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004e60:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e62:	4b0d      	ldr	r3, [pc, #52]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004e68:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e70:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e72:	220c      	movs	r2, #12
 8004e74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e76:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e7c:	4b06      	ldr	r3, [pc, #24]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e82:	4805      	ldr	r0, [pc, #20]	; (8004e98 <MX_USART2_UART_Init+0x50>)
 8004e84:	f007 f8f8 	bl	800c078 <HAL_UART_Init>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8004e8e:	f7ff fc43 	bl	8004718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004e92:	bf00      	nop
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	200011f8 	.word	0x200011f8
 8004e9c:	40004400 	.word	0x40004400

08004ea0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	; 0x28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <HAL_UART_MspInit+0xf0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d161      	bne.n	8004f86 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	4b33      	ldr	r3, [pc, #204]	; (8004f94 <HAL_UART_MspInit+0xf4>)
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	4a32      	ldr	r2, [pc, #200]	; (8004f94 <HAL_UART_MspInit+0xf4>)
 8004ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed2:	4b30      	ldr	r3, [pc, #192]	; (8004f94 <HAL_UART_MspInit+0xf4>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eda:	613b      	str	r3, [r7, #16]
 8004edc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	4b2c      	ldr	r3, [pc, #176]	; (8004f94 <HAL_UART_MspInit+0xf4>)
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	; (8004f94 <HAL_UART_MspInit+0xf4>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6313      	str	r3, [r2, #48]	; 0x30
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <HAL_UART_MspInit+0xf4>)
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004efa:	230c      	movs	r3, #12
 8004efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efe:	2302      	movs	r3, #2
 8004f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f06:	2303      	movs	r3, #3
 8004f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f0a:	2307      	movs	r3, #7
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f0e:	f107 0314 	add.w	r3, r7, #20
 8004f12:	4619      	mov	r1, r3
 8004f14:	4820      	ldr	r0, [pc, #128]	; (8004f98 <HAL_UART_MspInit+0xf8>)
 8004f16:	f002 f92d 	bl	8007174 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004f1a:	4b20      	ldr	r3, [pc, #128]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f1c:	4a20      	ldr	r2, [pc, #128]	; (8004fa0 <HAL_UART_MspInit+0x100>)
 8004f1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004f20:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f26:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f28:	4b1c      	ldr	r3, [pc, #112]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f2a:	2240      	movs	r2, #64	; 0x40
 8004f2c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f34:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f3a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f3c:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f42:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f44:	2200      	movs	r2, #0
 8004f46:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004f48:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004f5a:	4810      	ldr	r0, [pc, #64]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f5c:	f001 fcee 	bl	800693c <HAL_DMA_Init>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8004f66:	f7ff fbd7 	bl	8004718 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f6e:	635a      	str	r2, [r3, #52]	; 0x34
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <HAL_UART_MspInit+0xfc>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004f76:	2200      	movs	r2, #0
 8004f78:	2100      	movs	r1, #0
 8004f7a:	2026      	movs	r0, #38	; 0x26
 8004f7c:	f001 fca7 	bl	80068ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004f80:	2026      	movs	r0, #38	; 0x26
 8004f82:	f001 fcc0 	bl	8006906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004f86:	bf00      	nop
 8004f88:	3728      	adds	r7, #40	; 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40004400 	.word	0x40004400
 8004f94:	40023800 	.word	0x40023800
 8004f98:	40020000 	.word	0x40020000
 8004f9c:	2000126c 	.word	0x2000126c
 8004fa0:	400260a0 	.word	0x400260a0

08004fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004fa8:	480d      	ldr	r0, [pc, #52]	; (8004fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004faa:	490e      	ldr	r1, [pc, #56]	; (8004fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004fac:	4a0e      	ldr	r2, [pc, #56]	; (8004fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fb0:	e002      	b.n	8004fb8 <LoopCopyDataInit>

08004fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fb6:	3304      	adds	r3, #4

08004fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fbc:	d3f9      	bcc.n	8004fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fbe:	4a0b      	ldr	r2, [pc, #44]	; (8004fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004fc0:	4c0b      	ldr	r4, [pc, #44]	; (8004ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fc4:	e001      	b.n	8004fca <LoopFillZerobss>

08004fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fc8:	3204      	adds	r2, #4

08004fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fcc:	d3fb      	bcc.n	8004fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004fce:	f7ff fc6d 	bl	80048ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fd2:	f008 faf1 	bl	800d5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fd6:	f7fe f917 	bl	8003208 <main>
  bx  lr    
 8004fda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fe4:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 8004fe8:	0800f228 	.word	0x0800f228
  ldr r2, =_sbss
 8004fec:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 8004ff0:	200012d0 	.word	0x200012d0

08004ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ff4:	e7fe      	b.n	8004ff4 <ADC_IRQHandler>
	...

08004ff8 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b0a1      	sub	sp, #132	; 0x84
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	ed87 0a03 	vstr	s0, [r7, #12]
 8005002:	edc7 0a02 	vstr	s1, [r7, #8]
 8005006:	6078      	str	r0, [r7, #4]
    if (x > 0.0f)
 8005008:	edd7 7a02 	vldr	s15, [r7, #8]
 800500c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	f340 808e 	ble.w	8005134 <arm_atan2_f32+0x13c>
    {
        *result=arm_atan_f32(y/x);
 8005018:	edd7 6a03 	vldr	s13, [r7, #12]
 800501c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005024:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   int sign=0;
 8005028:	2300      	movs	r3, #0
 800502a:	67bb      	str	r3, [r7, #120]	; 0x78
   float32_t res=0.0f;
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	677b      	str	r3, [r7, #116]	; 0x74
   if (x < 0.0f)
 8005032:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800503a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800503e:	d507      	bpl.n	8005050 <arm_atan2_f32+0x58>
      sign=1;
 8005040:	2301      	movs	r3, #1
 8005042:	67bb      	str	r3, [r7, #120]	; 0x78
      x=-x;
 8005044:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005048:	eef1 7a67 	vneg.f32	s15, s15
 800504c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   if (x > 1.0f)
 8005050:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800505c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005060:	dd31      	ble.n	80050c6 <arm_atan2_f32+0xce>
      x = 1.0f / x;
 8005062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005066:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800506a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800506e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
 8005072:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005074:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8005076:	4bb5      	ldr	r3, [pc, #724]	; (800534c <arm_atan2_f32+0x354>)
 8005078:	66fb      	str	r3, [r7, #108]	; 0x6c
    int i=1;
 800507a:	2301      	movs	r3, #1
 800507c:	66bb      	str	r3, [r7, #104]	; 0x68
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800507e:	2301      	movs	r3, #1
 8005080:	66bb      	str	r3, [r7, #104]	; 0x68
 8005082:	e014      	b.n	80050ae <arm_atan2_f32+0xb6>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005084:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8005088:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800508c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005090:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005092:	f1c3 0309 	rsb	r3, r3, #9
 8005096:	4aae      	ldr	r2, [pc, #696]	; (8005350 <arm_atan2_f32+0x358>)
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4413      	add	r3, r2
 800509c:	edd3 7a00 	vldr	s15, [r3]
 80050a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050a4:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80050a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050aa:	3301      	adds	r3, #1
 80050ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050b0:	2b09      	cmp	r3, #9
 80050b2:	dde7      	ble.n	8005084 <arm_atan2_f32+0x8c>
    return(res);
 80050b4:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80050b8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8005354 <arm_atan2_f32+0x35c>
 80050bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050c0:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 80050c4:	e028      	b.n	8005118 <arm_atan2_f32+0x120>
 80050c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c8:	667b      	str	r3, [r7, #100]	; 0x64
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80050ca:	4ba0      	ldr	r3, [pc, #640]	; (800534c <arm_atan2_f32+0x354>)
 80050cc:	663b      	str	r3, [r7, #96]	; 0x60
    int i=1;
 80050ce:	2301      	movs	r3, #1
 80050d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80050d2:	2301      	movs	r3, #1
 80050d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050d6:	e014      	b.n	8005102 <arm_atan2_f32+0x10a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80050d8:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
 80050dc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80050e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e6:	f1c3 0309 	rsb	r3, r3, #9
 80050ea:	4a99      	ldr	r2, [pc, #612]	; (8005350 <arm_atan2_f32+0x358>)
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	edd3 7a00 	vldr	s15, [r3]
 80050f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80050fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fe:	3301      	adds	r3, #1
 8005100:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005104:	2b09      	cmp	r3, #9
 8005106:	dde7      	ble.n	80050d8 <arm_atan2_f32+0xe0>
    return(res);
 8005108:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
     res += arm_atan_limited_f32(x);
 800510c:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 8005110:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005114:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   if (sign)
 8005118:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <arm_atan2_f32+0x132>
     res = -res;
 800511e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005122:	eef1 7a67 	vneg.f32	s15, s15
 8005126:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   return(res);
 800512a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
        *result=arm_atan_f32(y/x);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	601a      	str	r2, [r3, #0]
        return(ARM_MATH_SUCCESS);
 8005130:	2300      	movs	r3, #0
 8005132:	e175      	b.n	8005420 <arm_atan2_f32+0x428>
    }
    if (x < 0.0f)
 8005134:	edd7 7a02 	vldr	s15, [r7, #8]
 8005138:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800513c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005140:	f140 814d 	bpl.w	80053de <arm_atan2_f32+0x3e6>
    {
        if (y > 0.0f)
 8005144:	edd7 7a03 	vldr	s15, [r7, #12]
 8005148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005150:	f340 8093 	ble.w	800527a <arm_atan2_f32+0x282>
        {
           *result=arm_atan_f32(y/x) + PI;
 8005154:	edd7 6a03 	vldr	s13, [r7, #12]
 8005158:	ed97 7a02 	vldr	s14, [r7, #8]
 800515c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005160:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   int sign=0;
 8005164:	2300      	movs	r3, #0
 8005166:	657b      	str	r3, [r7, #84]	; 0x54
   float32_t res=0.0f;
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	653b      	str	r3, [r7, #80]	; 0x50
   if (x < 0.0f)
 800516e:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517a:	d507      	bpl.n	800518c <arm_atan2_f32+0x194>
      sign=1;
 800517c:	2301      	movs	r3, #1
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
      x=-x;
 8005180:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005184:	eef1 7a67 	vneg.f32	s15, s15
 8005188:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   if (x > 1.0f)
 800518c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519c:	dd31      	ble.n	8005202 <arm_atan2_f32+0x20a>
      x = 1.0f / x;
 800519e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80051a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051aa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80051ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80051b2:	4b66      	ldr	r3, [pc, #408]	; (800534c <arm_atan2_f32+0x354>)
 80051b4:	64bb      	str	r3, [r7, #72]	; 0x48
    int i=1;
 80051b6:	2301      	movs	r3, #1
 80051b8:	647b      	str	r3, [r7, #68]	; 0x44
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80051ba:	2301      	movs	r3, #1
 80051bc:	647b      	str	r3, [r7, #68]	; 0x44
 80051be:	e014      	b.n	80051ea <arm_atan2_f32+0x1f2>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80051c0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80051c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80051c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ce:	f1c3 0309 	rsb	r3, r3, #9
 80051d2:	4a5f      	ldr	r2, [pc, #380]	; (8005350 <arm_atan2_f32+0x358>)
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	edd3 7a00 	vldr	s15, [r3]
 80051dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051e0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80051e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e6:	3301      	adds	r3, #1
 80051e8:	647b      	str	r3, [r7, #68]	; 0x44
 80051ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	dde7      	ble.n	80051c0 <arm_atan2_f32+0x1c8>
    return(res);
 80051f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80051f4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005354 <arm_atan2_f32+0x35c>
 80051f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
 8005200:	e028      	b.n	8005254 <arm_atan2_f32+0x25c>
 8005202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005204:	643b      	str	r3, [r7, #64]	; 0x40
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8005206:	4b51      	ldr	r3, [pc, #324]	; (800534c <arm_atan2_f32+0x354>)
 8005208:	63fb      	str	r3, [r7, #60]	; 0x3c
    int i=1;
 800520a:	2301      	movs	r3, #1
 800520c:	63bb      	str	r3, [r7, #56]	; 0x38
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800520e:	2301      	movs	r3, #1
 8005210:	63bb      	str	r3, [r7, #56]	; 0x38
 8005212:	e014      	b.n	800523e <arm_atan2_f32+0x246>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8005214:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005218:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800521c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005222:	f1c3 0309 	rsb	r3, r3, #9
 8005226:	4a4a      	ldr	r2, [pc, #296]	; (8005350 <arm_atan2_f32+0x358>)
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	edd3 7a00 	vldr	s15, [r3]
 8005230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005234:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523a:	3301      	adds	r3, #1
 800523c:	63bb      	str	r3, [r7, #56]	; 0x38
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	2b09      	cmp	r3, #9
 8005242:	dde7      	ble.n	8005214 <arm_atan2_f32+0x21c>
    return(res);
 8005244:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
     res += arm_atan_limited_f32(x);
 8005248:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800524c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005250:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   if (sign)
 8005254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <arm_atan2_f32+0x26e>
     res = -res;
 800525a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800525e:	eef1 7a67 	vneg.f32	s15, s15
 8005262:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   return(res);
 8005266:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
           *result=arm_atan_f32(y/x) + PI;
 800526a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005358 <arm_atan2_f32+0x360>
 800526e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	edc3 7a00 	vstr	s15, [r3]
 8005278:	e0af      	b.n	80053da <arm_atan2_f32+0x3e2>
        }
        else if (y < 0.0f)
 800527a:	edd7 7a03 	vldr	s15, [r7, #12]
 800527e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005286:	f140 809c 	bpl.w	80053c2 <arm_atan2_f32+0x3ca>
        {
           *result=arm_atan_f32(y/x) - PI;
 800528a:	edd7 6a03 	vldr	s13, [r7, #12]
 800528e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005292:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005296:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   int sign=0;
 800529a:	2300      	movs	r3, #0
 800529c:	633b      	str	r3, [r7, #48]	; 0x30
   float32_t res=0.0f;
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   if (x < 0.0f)
 80052a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80052a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b0:	d507      	bpl.n	80052c2 <arm_atan2_f32+0x2ca>
      sign=1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	633b      	str	r3, [r7, #48]	; 0x30
      x=-x;
 80052b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80052ba:	eef1 7a67 	vneg.f32	s15, s15
 80052be:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   if (x > 1.0f)
 80052c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80052c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	dd31      	ble.n	8005338 <arm_atan2_f32+0x340>
      x = 1.0f / x;
 80052d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80052dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80052e8:	4b18      	ldr	r3, [pc, #96]	; (800534c <arm_atan2_f32+0x354>)
 80052ea:	627b      	str	r3, [r7, #36]	; 0x24
    int i=1;
 80052ec:	2301      	movs	r3, #1
 80052ee:	623b      	str	r3, [r7, #32]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80052f0:	2301      	movs	r3, #1
 80052f2:	623b      	str	r3, [r7, #32]
 80052f4:	e014      	b.n	8005320 <arm_atan2_f32+0x328>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80052f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80052fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80052fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f1c3 0309 	rsb	r3, r3, #9
 8005308:	4a11      	ldr	r2, [pc, #68]	; (8005350 <arm_atan2_f32+0x358>)
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	edd3 7a00 	vldr	s15, [r3]
 8005312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005316:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	3301      	adds	r3, #1
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2b09      	cmp	r3, #9
 8005324:	dde7      	ble.n	80052f6 <arm_atan2_f32+0x2fe>
    return(res);
 8005326:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
      res = PIHALFF32 - arm_atan_limited_f32(x);
 800532a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8005354 <arm_atan2_f32+0x35c>
 800532e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005332:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
 8005336:	e031      	b.n	800539c <arm_atan2_f32+0x3a4>
 8005338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533a:	61fb      	str	r3, [r7, #28]
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800533c:	4b03      	ldr	r3, [pc, #12]	; (800534c <arm_atan2_f32+0x354>)
 800533e:	61bb      	str	r3, [r7, #24]
    int i=1;
 8005340:	2301      	movs	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005344:	2301      	movs	r3, #1
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e01d      	b.n	8005386 <arm_atan2_f32+0x38e>
 800534a:	bf00      	nop
 800534c:	bd0492a5 	.word	0xbd0492a5
 8005350:	0800eff4 	.word	0x0800eff4
 8005354:	3fc90fdb 	.word	0x3fc90fdb
 8005358:	40490fdb 	.word	0x40490fdb
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800535c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005360:	edd7 7a06 	vldr	s15, [r7, #24]
 8005364:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f1c3 0309 	rsb	r3, r3, #9
 800536e:	4a2f      	ldr	r2, [pc, #188]	; (800542c <arm_atan2_f32+0x434>)
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	edd3 7a00 	vldr	s15, [r3]
 8005378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800537c:	edc7 7a06 	vstr	s15, [r7, #24]
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3301      	adds	r3, #1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b09      	cmp	r3, #9
 800538a:	dde7      	ble.n	800535c <arm_atan2_f32+0x364>
    return(res);
 800538c:	edd7 7a06 	vldr	s15, [r7, #24]
     res += arm_atan_limited_f32(x);
 8005390:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005398:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   if (sign)
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <arm_atan2_f32+0x3b6>
     res = -res;
 80053a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80053a6:	eef1 7a67 	vneg.f32	s15, s15
 80053aa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   return(res);
 80053ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
           *result=arm_atan_f32(y/x) - PI;
 80053b2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005430 <arm_atan2_f32+0x438>
 80053b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	edc3 7a00 	vstr	s15, [r3]
 80053c0:	e00b      	b.n	80053da <arm_atan2_f32+0x3e2>
        }
        else
        {
            if (signbit(y))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <arm_atan2_f32+0x3dc>
            {
               *result= -PI;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a19      	ldr	r2, [pc, #100]	; (8005434 <arm_atan2_f32+0x43c>)
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	e002      	b.n	80053da <arm_atan2_f32+0x3e2>
            }
            else
            {
               *result= PI;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a18      	ldr	r2, [pc, #96]	; (8005438 <arm_atan2_f32+0x440>)
 80053d8:	601a      	str	r2, [r3, #0]
            }
        }
        return(ARM_MATH_SUCCESS);
 80053da:	2300      	movs	r3, #0
 80053dc:	e020      	b.n	8005420 <arm_atan2_f32+0x428>
    }
    if (x == 0.0f)
 80053de:	edd7 7a02 	vldr	s15, [r7, #8]
 80053e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	d117      	bne.n	800541c <arm_atan2_f32+0x424>
    {
        if (y > 0.0f)
 80053ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80053f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f8:	dd04      	ble.n	8005404 <arm_atan2_f32+0x40c>
        {
            *result=PIHALFF32;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a0f      	ldr	r2, [pc, #60]	; (800543c <arm_atan2_f32+0x444>)
 80053fe:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8005400:	2300      	movs	r3, #0
 8005402:	e00d      	b.n	8005420 <arm_atan2_f32+0x428>
        }
        if (y < 0.0f)
 8005404:	edd7 7a03 	vldr	s15, [r7, #12]
 8005408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800540c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005410:	d504      	bpl.n	800541c <arm_atan2_f32+0x424>
        {
            *result=-PIHALFF32;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a0a      	ldr	r2, [pc, #40]	; (8005440 <arm_atan2_f32+0x448>)
 8005416:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8005418:	2300      	movs	r3, #0
 800541a:	e001      	b.n	8005420 <arm_atan2_f32+0x428>
        }
    }
    

    return(ARM_MATH_NANINF);
 800541c:	f06f 0303 	mvn.w	r3, #3

}
 8005420:	4618      	mov	r0, r3
 8005422:	3784      	adds	r7, #132	; 0x84
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	0800eff4 	.word	0x0800eff4
 8005430:	40490fdb 	.word	0x40490fdb
 8005434:	c0490fdb 	.word	0xc0490fdb
 8005438:	40490fdb 	.word	0x40490fdb
 800543c:	3fc90fdb 	.word	0x3fc90fdb
 8005440:	bfc90fdb 	.word	0xbfc90fdb

08005444 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005444:	b480      	push	{r7}
 8005446:	b08b      	sub	sp, #44	; 0x2c
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	881b      	ldrh	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	885b      	ldrh	r3, [r3, #2]
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005476:	e013      	b.n	80054a0 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	627a      	str	r2, [r7, #36]	; 0x24
 800547e:	ed93 7a00 	vldr	s14, [r3]
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	623a      	str	r2, [r7, #32]
 8005488:	edd3 7a00 	vldr	s15, [r3]
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	61fa      	str	r2, [r7, #28]
 8005492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005496:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	3b01      	subs	r3, #1
 800549e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e8      	bne.n	8005478 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80054a6:	2300      	movs	r3, #0
 80054a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80054aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	372c      	adds	r7, #44	; 0x2c
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	607b      	str	r3, [r7, #4]
 80054c4:	460b      	mov	r3, r1
 80054c6:	817b      	strh	r3, [r7, #10]
 80054c8:	4613      	mov	r3, r2
 80054ca:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	897a      	ldrh	r2, [r7, #10]
 80054d0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	893a      	ldrh	r2, [r7, #8]
 80054d6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	605a      	str	r2, [r3, #4]
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b0bb      	sub	sp, #236	; 0xec
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	663b      	str	r3, [r7, #96]	; 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	881b      	ldrh	r3, [r3, #0]
 8005504:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	885b      	ldrh	r3, [r3, #2]
 800550a:	65bb      	str	r3, [r7, #88]	; 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800551a:	2300      	movs	r3, #0
 800551c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8005520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8005526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800552c:	e03b      	b.n	80055a6 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800552e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005530:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 800553a:	e00c      	b.n	8005556 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005540:	1d1a      	adds	r2, r3, #4
 8005542:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
        j--;
 800554c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005550:	3b01      	subs	r3, #1
 8005552:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1ee      	bne.n	800553c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005568:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800556c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800556e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005572:	3b01      	subs	r3, #1
 8005574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005578:	e00c      	b.n	8005594 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800557a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557e:	1d1a      	adds	r2, r3, #4
 8005580:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8005584:	f04f 0200 	mov.w	r2, #0
 8005588:	601a      	str	r2, [r3, #0]
        j--;
 800558a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800558e:	3b01      	subs	r3, #1
 8005590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
      while (j > 0U)
 8005594:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1ee      	bne.n	800557a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800559c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055a0:	3b01      	subs	r3, #1
 80055a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    while (rowCnt > 0U)
 80055a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1bf      	bne.n	800552e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055b4:	e2c7      	b.n	8005b46 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80055b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055ba:	653b      	str	r3, [r7, #80]	; 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685a      	ldr	r2, [r3, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	885b      	ldrh	r3, [r3, #2]
 80055c4:	3301      	adds	r3, #1
 80055c6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80055ca:	fb01 f303 	mul.w	r3, r1, r3
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      pivot = *pTmp;
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      selectedRow = column;
 80055e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80055e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055ec:	3301      	adds	r3, #1
 80055ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055f2:	e02c      	b.n	800564e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	885b      	ldrh	r3, [r3, #2]
 80055fc:	4619      	mov	r1, r3
 80055fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005602:	fb03 f101 	mul.w	r1, r3, r1
 8005606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800560a:	440b      	add	r3, r1
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          newPivot = *pTmp;
 8005614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	657b      	str	r3, [r7, #84]	; 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800561c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8005620:	eeb0 7ae7 	vabs.f32	s14, s15
 8005624:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005628:	eef0 7ae7 	vabs.f32	s15, s15
 800562c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005634:	dd06      	ble.n	8005644 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8005636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800563a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            pivot = newPivot;
 800563e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8005644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005648:	3301      	adds	r3, #1
 800564a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800564e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005654:	429a      	cmp	r2, r3
 8005656:	d3cd      	bcc.n	80055f4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8005658:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 800565c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005664:	f000 809b 	beq.w	800579e <arm_mat_inverse_f32+0x2b4>
 8005668:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800566c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005670:	429a      	cmp	r2, r3
 8005672:	f000 8094 	beq.w	800579e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	885b      	ldrh	r3, [r3, #2]
 800568a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800568c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800568e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	64bb      	str	r3, [r7, #72]	; 0x48
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800569a:	fb03 f202 	mul.w	r2, r3, r2
 800569e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056a2:	4413      	add	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80056aa:	4413      	add	r3, r2
 80056ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056b6:	fb03 f202 	mul.w	r2, r3, r2
 80056ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056be:	4413      	add	r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c6:	4413      	add	r3, r2
 80056c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056cc:	2300      	movs	r3, #0
 80056ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80056d2:	e018      	b.n	8005706 <arm_mat_inverse_f32+0x21c>
 80056d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	63bb      	str	r3, [r7, #56]	; 0x38
 80056dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80056e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056f2:	1d1a      	adds	r2, r3, #4
 80056f4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80056f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fa:	601a      	str	r2, [r3, #0]
 80056fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005700:	3301      	adds	r3, #1
 8005702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005706:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800570a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570c:	429a      	cmp	r2, r3
 800570e:	dbe1      	blt.n	80056d4 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	885b      	ldrh	r3, [r3, #2]
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
 8005726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
 800572a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800572e:	fb02 f303 	mul.w	r3, r2, r3
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005738:	4413      	add	r3, r2
 800573a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800573e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005740:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005744:	fb02 f303 	mul.w	r3, r2, r3
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800574e:	4413      	add	r3, r2
 8005750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005754:	2300      	movs	r3, #0
 8005756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800575a:	e018      	b.n	800578e <arm_mat_inverse_f32+0x2a4>
 800575c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005768:	1d1a      	adds	r2, r3, #4
 800576a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800576e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005772:	6812      	ldr	r2, [r2, #0]
 8005774:	601a      	str	r2, [r3, #0]
 8005776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800577a:	1d1a      	adds	r2, r3, #4
 800577c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005788:	3301      	adds	r3, #1
 800578a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800578e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005794:	429a      	cmp	r2, r3
 8005796:	dbe1      	blt.n	800575c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8005798:	2301      	movs	r3, #1
 800579a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800579e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d009      	beq.n	80057ba <arm_mat_inverse_f32+0x2d0>
 80057a6:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80057aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80057ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b2:	d102      	bne.n	80057ba <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80057b4:	f06f 0304 	mvn.w	r3, #4
 80057b8:	e208      	b.n	8005bcc <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80057ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057be:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 80057c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c6:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	885b      	ldrh	r3, [r3, #2]
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
 80057d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
 80057e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80057e6:	fb03 f202 	mul.w	r2, r3, r2
 80057ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80057f6:	4413      	add	r3, r2
 80057f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057fc:	2300      	movs	r3, #0
 80057fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005802:	e011      	b.n	8005828 <arm_mat_inverse_f32+0x33e>
 8005804:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005808:	1d1a      	adds	r2, r3, #4
 800580a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800580e:	ed93 7a00 	vldr	s14, [r3]
 8005812:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc3 7a00 	vstr	s15, [r3]
 800581e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005822:	3301      	adds	r3, #1
 8005824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005828:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582e:	429a      	cmp	r2, r3
 8005830:	dbe8      	blt.n	8005804 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	885b      	ldrh	r3, [r3, #2]
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005842:	62bb      	str	r3, [r7, #40]	; 0x28
 8005844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005848:	fb02 f303 	mul.w	r3, r2, r3
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005852:	4413      	add	r3, r2
 8005854:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005858:	2300      	movs	r3, #0
 800585a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800585e:	e011      	b.n	8005884 <arm_mat_inverse_f32+0x39a>
 8005860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005864:	1d1a      	adds	r2, r3, #4
 8005866:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800586a:	ed93 7a00 	vldr	s14, [r3]
 800586e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc3 7a00 	vstr	s15, [r3]
 800587a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800587e:	3301      	adds	r3, #1
 8005880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005884:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588a:	429a      	cmp	r2, r3
 800588c:	dbe8      	blt.n	8005860 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800588e:	2300      	movs	r3, #0
 8005890:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8005894:	e0ae      	b.n	80059f4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	885b      	ldrh	r3, [r3, #2]
 800589e:	4619      	mov	r1, r3
 80058a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058a4:	fb03 f101 	mul.w	r1, r3, r1
 80058a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ac:	440b      	add	r3, r1
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	885b      	ldrh	r3, [r3, #2]
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80058e6:	fb03 f202 	mul.w	r2, r3, r2
 80058ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80058f6:	4413      	add	r3, r2
 80058f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005900:	fb03 f202 	mul.w	r2, r3, r2
 8005904:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005908:	4413      	add	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005910:	4413      	add	r3, r2
 8005912:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005916:	2300      	movs	r3, #0
 8005918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800591c:	e01a      	b.n	8005954 <arm_mat_inverse_f32+0x46a>
 800591e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005922:	1d1a      	adds	r2, r3, #4
 8005924:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005928:	ed93 7a00 	vldr	s14, [r3]
 800592c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005934:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005938:	1d1a      	adds	r2, r3, #4
 800593a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800593e:	ed93 7a00 	vldr	s14, [r3]
 8005942:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005946:	edc3 7a00 	vstr	s15, [r3]
 800594a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800594e:	3301      	adds	r3, #1
 8005950:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005954:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	429a      	cmp	r2, r3
 800595c:	dbdf      	blt.n	800591e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	885b      	ldrh	r3, [r3, #2]
 8005972:	60fb      	str	r3, [r7, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	60bb      	str	r3, [r7, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800597e:	fb02 f303 	mul.w	r3, r2, r3
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005988:	4413      	add	r3, r2
 800598a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800599c:	4413      	add	r3, r2
 800599e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059a2:	2300      	movs	r3, #0
 80059a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059a8:	e01a      	b.n	80059e0 <arm_mat_inverse_f32+0x4f6>
 80059aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059ae:	1d1a      	adds	r2, r3, #4
 80059b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059b4:	ed93 7a00 	vldr	s14, [r3]
 80059b8:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 80059bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059c4:	1d1a      	adds	r2, r3, #4
 80059c6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80059ca:	ed93 7a00 	vldr	s14, [r3]
 80059ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059d2:	edc3 7a00 	vstr	s15, [r3]
 80059d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059da:	3301      	adds	r3, #1
 80059dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	dbdf      	blt.n	80059aa <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80059ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ee:	3301      	adds	r3, #1
 80059f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80059f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80059f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fa:	429a      	cmp	r2, r3
 80059fc:	f4ff af4b 	bcc.w	8005896 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a02:	3301      	adds	r3, #1
 8005a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005a08:	e092      	b.n	8005b30 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	885b      	ldrh	r3, [r3, #2]
 8005a12:	4619      	mov	r1, r3
 8005a14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a18:	fb03 f101 	mul.w	r1, r3, r1
 8005a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a20:	440b      	add	r3, r1
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
           pivot = *pTmp;
 8005a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	677b      	str	r3, [r7, #116]	; 0x74
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	627b      	str	r3, [r7, #36]	; 0x24
 8005a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	623b      	str	r3, [r7, #32]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005a56:	fb03 f202 	mul.w	r2, r3, r2
 8005a5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a64:	4413      	add	r3, r2
 8005a66:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a6c:	fb03 f202 	mul.w	r2, r3, r2
 8005a70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005a7a:	4413      	add	r3, r2
 8005a7c:	677b      	str	r3, [r7, #116]	; 0x74
 8005a7e:	2300      	movs	r3, #0
 8005a80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a82:	e014      	b.n	8005aae <arm_mat_inverse_f32+0x5c4>
 8005a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	677a      	str	r2, [r7, #116]	; 0x74
 8005a8a:	ed93 7a00 	vldr	s14, [r3]
 8005a8e:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	67ba      	str	r2, [r7, #120]	; 0x78
 8005a9c:	ed93 7a00 	vldr	s14, [r3]
 8005aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aa4:	edc3 7a00 	vstr	s15, [r3]
 8005aa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005aaa:	3301      	adds	r3, #1
 8005aac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005aae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	dbe6      	blt.n	8005a84 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	885b      	ldrh	r3, [r3, #2]
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	61bb      	str	r3, [r7, #24]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ada:	4413      	add	r3, r2
 8005adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005aea:	4413      	add	r3, r2
 8005aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aee:	2300      	movs	r3, #0
 8005af0:	673b      	str	r3, [r7, #112]	; 0x70
 8005af2:	e014      	b.n	8005b1e <arm_mat_inverse_f32+0x634>
 8005af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	66ba      	str	r2, [r7, #104]	; 0x68
 8005afa:	ed93 7a00 	vldr	s14, [r3]
 8005afe:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b08:	1d1a      	adds	r2, r3, #4
 8005b0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005b0c:	ed93 7a00 	vldr	s14, [r3]
 8005b10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b14:	edc3 7a00 	vstr	s15, [r3]
 8005b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	673b      	str	r3, [r7, #112]	; 0x70
 8005b1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	dbe6      	blt.n	8005af4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8005b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b30:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b36:	429a      	cmp	r2, r3
 8005b38:	f4ff af67 	bcc.w	8005a0a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8005b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b40:	3301      	adds	r3, #1
 8005b42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	f4ff ad32 	bcc.w	80055b6 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005b52:	2300      	movs	r3, #0
 8005b54:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8005b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d033      	beq.n	8005bc8 <arm_mat_inverse_f32+0x6de>
 8005b60:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8005b64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6c:	d12c      	bne.n	8005bc8 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b7a:	e010      	b.n	8005b9e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8005b7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005b84:	4413      	add	r3, r2
 8005b86:	edd3 7a00 	vldr	s15, [r3]
 8005b8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b92:	d10d      	bne.n	8005bb0 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8005b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b98:	3301      	adds	r3, #1
 8005b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d3e6      	bcc.n	8005b7c <arm_mat_inverse_f32+0x692>
 8005bae:	e000      	b.n	8005bb2 <arm_mat_inverse_f32+0x6c8>
            break;
 8005bb0:	bf00      	nop
      }

      if (i == numRows * numCols)
 8005bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d102      	bne.n	8005bc8 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8005bc2:	23fb      	movs	r3, #251	; 0xfb
 8005bc4:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
    }
  }

  /* Return to application */
  return (status);
 8005bc8:	f997 30c3 	ldrsb.w	r3, [r7, #195]	; 0xc3
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	37ec      	adds	r7, #236	; 0xec
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b093      	sub	sp, #76	; 0x4c
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	885b      	ldrh	r3, [r3, #2]
 8005c0c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	885b      	ldrh	r3, [r3, #2]
 8005c12:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8005c14:	2300      	movs	r3, #0
 8005c16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c18:	8b7b      	ldrh	r3, [r7, #26]
 8005c1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	69fa      	ldr	r2, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	63bb      	str	r3, [r7, #56]	; 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8005c26:	8b3b      	ldrh	r3, [r7, #24]
 8005c28:	633b      	str	r3, [r7, #48]	; 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	643b      	str	r3, [r7, #64]	; 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8005c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c38:	647b      	str	r3, [r7, #68]	; 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8005c3a:	8afb      	ldrh	r3, [r7, #22]
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8005c3e:	e017      	b.n	8005c70 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8005c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	647a      	str	r2, [r7, #68]	; 0x44
 8005c46:	ed93 7a00 	vldr	s14, [r3]
 8005c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c54:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
          pIn2 += numColsB;
 8005c60:	8b3b      	ldrh	r3, [r7, #24]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c66:	4413      	add	r3, r2
 8005c68:	643b      	str	r3, [r7, #64]	; 0x40

          /* Decrement loop counter */
          colCnt--;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
        while (colCnt > 0U)
 8005c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1e4      	bne.n	8005c40 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8005c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c78:	1d1a      	adds	r2, r3, #4
 8005c7a:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c7e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	3b01      	subs	r3, #1
 8005c84:	633b      	str	r3, [r7, #48]	; 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8005c86:	8b3a      	ldrh	r2, [r7, #24]
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	6a3a      	ldr	r2, [r7, #32]
 8005c90:	4413      	add	r3, r2
 8005c92:	643b      	str	r3, [r7, #64]	; 0x40

      } while (col > 0U);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1ca      	bne.n	8005c30 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8005c9a:	8b3b      	ldrh	r3, [r7, #24]
 8005c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c9e:	4413      	add	r3, r2
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pInA = pInA + numColsA;
 8005ca2:	8afb      	ldrh	r3, [r7, #22]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ca8:	4413      	add	r3, r2
 8005caa:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Decrement row loop counter */
      row--;
 8005cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28

    } while (row > 0U);
 8005cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1b1      	bne.n	8005c1c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8005cbc:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	374c      	adds	r7, #76	; 0x4c
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b08b      	sub	sp, #44	; 0x2c
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cd8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	885b      	ldrh	r3, [r3, #2]
 8005cf0:	fb02 f303 	mul.w	r3, r2, r3
 8005cf4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005cfa:	e010      	b.n	8005d1e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	1d1a      	adds	r2, r3, #4
 8005d00:	627a      	str	r2, [r7, #36]	; 0x24
 8005d02:	ed93 7a00 	vldr	s14, [r3]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	1d1a      	adds	r2, r3, #4
 8005d0a:	623a      	str	r2, [r7, #32]
 8005d0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d14:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1eb      	bne.n	8005cfc <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005d24:	2300      	movs	r3, #0
 8005d26:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8005d28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	372c      	adds	r7, #44	; 0x2c
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b08b      	sub	sp, #44	; 0x2c
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	885b      	ldrh	r3, [r3, #2]
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8005d6a:	e013      	b.n	8005d94 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	627a      	str	r2, [r7, #36]	; 0x24
 8005d72:	ed93 7a00 	vldr	s14, [r3]
 8005d76:	6a3b      	ldr	r3, [r7, #32]
 8005d78:	1d1a      	adds	r2, r3, #4
 8005d7a:	623a      	str	r2, [r7, #32]
 8005d7c:	edd3 7a00 	vldr	s15, [r3]
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	1d1a      	adds	r2, r3, #4
 8005d84:	61fa      	str	r2, [r7, #28]
 8005d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d8a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e8      	bne.n	8005d6c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8005d9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	372c      	adds	r7, #44	; 0x2c
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b08b      	sub	sp, #44	; 0x2c
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	885b      	ldrh	r3, [r3, #2]
 8005dce:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8005dd0:	89fb      	ldrh	r3, [r7, #14]
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8005de2:	89bb      	ldrh	r3, [r7, #12]
 8005de4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8005de6:	e00d      	b.n	8005e04 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	627a      	str	r2, [r7, #36]	; 0x24
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8005df4:	89fb      	ldrh	r3, [r7, #14]
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	6a3a      	ldr	r2, [r7, #32]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1ee      	bne.n	8005de8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1dd      	bne.n	8005dd8 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8005e20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	372c      	adds	r7, #44	; 0x2c
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e34:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <HAL_Init+0x40>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a0d      	ldr	r2, [pc, #52]	; (8005e70 <HAL_Init+0x40>)
 8005e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e40:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <HAL_Init+0x40>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <HAL_Init+0x40>)
 8005e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e4c:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <HAL_Init+0x40>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <HAL_Init+0x40>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e58:	2003      	movs	r0, #3
 8005e5a:	f000 fd2d 	bl	80068b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f000 f808 	bl	8005e74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e64:	f7fe fc5e 	bl	8004724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023c00 	.word	0x40023c00

08005e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005e7c:	4b12      	ldr	r3, [pc, #72]	; (8005ec8 <HAL_InitTick+0x54>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b12      	ldr	r3, [pc, #72]	; (8005ecc <HAL_InitTick+0x58>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fd45 	bl	8006922 <HAL_SYSTICK_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e00e      	b.n	8005ec0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b0f      	cmp	r3, #15
 8005ea6:	d80a      	bhi.n	8005ebe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb0:	f000 fd0d 	bl	80068ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005eb4:	4a06      	ldr	r2, [pc, #24]	; (8005ed0 <HAL_InitTick+0x5c>)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e000      	b.n	8005ec0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000234 	.word	0x20000234
 8005ecc:	2000023c 	.word	0x2000023c
 8005ed0:	20000238 	.word	0x20000238

08005ed4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_IncTick+0x20>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	461a      	mov	r2, r3
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_IncTick+0x24>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	4a04      	ldr	r2, [pc, #16]	; (8005ef8 <HAL_IncTick+0x24>)
 8005ee6:	6013      	str	r3, [r2, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	2000023c 	.word	0x2000023c
 8005ef8:	200012cc 	.word	0x200012cc

08005efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return uwTick;
 8005f00:	4b03      	ldr	r3, [pc, #12]	; (8005f10 <HAL_GetTick+0x14>)
 8005f02:	681b      	ldr	r3, [r3, #0]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	200012cc 	.word	0x200012cc

08005f14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e033      	b.n	8005f92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d109      	bne.n	8005f46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fc ff28 	bl	8002d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d118      	bne.n	8005f84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005f5a:	f023 0302 	bic.w	r3, r3, #2
 8005f5e:	f043 0202 	orr.w	r2, r3, #2
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa58 	bl	800641c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	f043 0201 	orr.w	r2, r3, #1
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	641a      	str	r2, [r3, #64]	; 0x40
 8005f82:	e001      	b.n	8005f88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_ADC_Start_DMA+0x1e>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e0ce      	b.n	8006158 <HAL_ADC_Start_DMA+0x1bc>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d018      	beq.n	8006002 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005fe0:	4b5f      	ldr	r3, [pc, #380]	; (8006160 <HAL_ADC_Start_DMA+0x1c4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a5f      	ldr	r2, [pc, #380]	; (8006164 <HAL_ADC_Start_DMA+0x1c8>)
 8005fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fea:	0c9a      	lsrs	r2, r3, #18
 8005fec:	4613      	mov	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005ff4:	e002      	b.n	8005ffc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f9      	bne.n	8005ff6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006010:	d107      	bne.n	8006022 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006020:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b01      	cmp	r3, #1
 800602e:	f040 8086 	bne.w	800613e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006050:	2b00      	cmp	r3, #0
 8006052:	d007      	beq.n	8006064 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006058:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800605c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800606c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006070:	d106      	bne.n	8006080 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	f023 0206 	bic.w	r2, r3, #6
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	645a      	str	r2, [r3, #68]	; 0x44
 800607e:	e002      	b.n	8006086 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800608e:	4b36      	ldr	r3, [pc, #216]	; (8006168 <HAL_ADC_Start_DMA+0x1cc>)
 8006090:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	4a35      	ldr	r2, [pc, #212]	; (800616c <HAL_ADC_Start_DMA+0x1d0>)
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	4a34      	ldr	r2, [pc, #208]	; (8006170 <HAL_ADC_Start_DMA+0x1d4>)
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	4a33      	ldr	r2, [pc, #204]	; (8006174 <HAL_ADC_Start_DMA+0x1d8>)
 80060a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80060b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80060c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	334c      	adds	r3, #76	; 0x4c
 80060de:	4619      	mov	r1, r3
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f000 fcd8 	bl	8006a98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	f003 031f 	and.w	r3, r3, #31
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10f      	bne.n	8006114 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d129      	bne.n	8006156 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006110:	609a      	str	r2, [r3, #8]
 8006112:	e020      	b.n	8006156 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a17      	ldr	r2, [pc, #92]	; (8006178 <HAL_ADC_Start_DMA+0x1dc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d11b      	bne.n	8006156 <HAL_ADC_Start_DMA+0x1ba>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d114      	bne.n	8006156 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689a      	ldr	r2, [r3, #8]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800613a:	609a      	str	r2, [r3, #8]
 800613c:	e00b      	b.n	8006156 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	f043 0210 	orr.w	r2, r3, #16
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614e:	f043 0201 	orr.w	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000234 	.word	0x20000234
 8006164:	431bde83 	.word	0x431bde83
 8006168:	40012300 	.word	0x40012300
 800616c:	08006615 	.word	0x08006615
 8006170:	080066cf 	.word	0x080066cf
 8006174:	080066eb 	.word	0x080066eb
 8006178:	40012000 	.word	0x40012000

0800617c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006198:	bf00      	nop
 800619a:	370c      	adds	r7, #12
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b083      	sub	sp, #12
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80061c2:	2300      	movs	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_ADC_ConfigChannel+0x1c>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e113      	b.n	80063fc <HAL_ADC_ConfigChannel+0x244>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b09      	cmp	r3, #9
 80061e2:	d925      	bls.n	8006230 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68d9      	ldr	r1, [r3, #12]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	4613      	mov	r3, r2
 80061f4:	005b      	lsls	r3, r3, #1
 80061f6:	4413      	add	r3, r2
 80061f8:	3b1e      	subs	r3, #30
 80061fa:	2207      	movs	r2, #7
 80061fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006200:	43da      	mvns	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	400a      	ands	r2, r1
 8006208:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68d9      	ldr	r1, [r3, #12]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	4618      	mov	r0, r3
 800621c:	4603      	mov	r3, r0
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	4403      	add	r3, r0
 8006222:	3b1e      	subs	r3, #30
 8006224:	409a      	lsls	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	60da      	str	r2, [r3, #12]
 800622e:	e022      	b.n	8006276 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6919      	ldr	r1, [r3, #16]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	461a      	mov	r2, r3
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	2207      	movs	r2, #7
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	43da      	mvns	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	400a      	ands	r2, r1
 8006252:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6919      	ldr	r1, [r3, #16]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	4618      	mov	r0, r3
 8006266:	4603      	mov	r3, r0
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	4403      	add	r3, r0
 800626c:	409a      	lsls	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b06      	cmp	r3, #6
 800627c:	d824      	bhi.n	80062c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	4613      	mov	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	3b05      	subs	r3, #5
 8006290:	221f      	movs	r2, #31
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	43da      	mvns	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	400a      	ands	r2, r1
 800629e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	4618      	mov	r0, r3
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	3b05      	subs	r3, #5
 80062ba:	fa00 f203 	lsl.w	r2, r0, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	635a      	str	r2, [r3, #52]	; 0x34
 80062c6:	e04c      	b.n	8006362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b0c      	cmp	r3, #12
 80062ce:	d824      	bhi.n	800631a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	3b23      	subs	r3, #35	; 0x23
 80062e2:	221f      	movs	r2, #31
 80062e4:	fa02 f303 	lsl.w	r3, r2, r3
 80062e8:	43da      	mvns	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	400a      	ands	r2, r1
 80062f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	4618      	mov	r0, r3
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	3b23      	subs	r3, #35	; 0x23
 800630c:	fa00 f203 	lsl.w	r2, r0, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
 8006318:	e023      	b.n	8006362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	4613      	mov	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4413      	add	r3, r2
 800632a:	3b41      	subs	r3, #65	; 0x41
 800632c:	221f      	movs	r2, #31
 800632e:	fa02 f303 	lsl.w	r3, r2, r3
 8006332:	43da      	mvns	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	400a      	ands	r2, r1
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	4618      	mov	r0, r3
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	3b41      	subs	r3, #65	; 0x41
 8006356:	fa00 f203 	lsl.w	r2, r0, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006362:	4b29      	ldr	r3, [pc, #164]	; (8006408 <HAL_ADC_ConfigChannel+0x250>)
 8006364:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a28      	ldr	r2, [pc, #160]	; (800640c <HAL_ADC_ConfigChannel+0x254>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10f      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x1d8>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b12      	cmp	r3, #18
 8006376:	d10b      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1d      	ldr	r2, [pc, #116]	; (800640c <HAL_ADC_ConfigChannel+0x254>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d12b      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x23a>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <HAL_ADC_ConfigChannel+0x258>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <HAL_ADC_ConfigChannel+0x1f4>
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b11      	cmp	r3, #17
 80063aa:	d122      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a11      	ldr	r2, [pc, #68]	; (8006410 <HAL_ADC_ConfigChannel+0x258>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d111      	bne.n	80063f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80063ce:	4b11      	ldr	r3, [pc, #68]	; (8006414 <HAL_ADC_ConfigChannel+0x25c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a11      	ldr	r2, [pc, #68]	; (8006418 <HAL_ADC_ConfigChannel+0x260>)
 80063d4:	fba2 2303 	umull	r2, r3, r2, r3
 80063d8:	0c9a      	lsrs	r2, r3, #18
 80063da:	4613      	mov	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80063e4:	e002      	b.n	80063ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	3b01      	subs	r3, #1
 80063ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f9      	bne.n	80063e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40012300 	.word	0x40012300
 800640c:	40012000 	.word	0x40012000
 8006410:	10000012 	.word	0x10000012
 8006414:	20000234 	.word	0x20000234
 8006418:	431bde83 	.word	0x431bde83

0800641c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006424:	4b79      	ldr	r3, [pc, #484]	; (800660c <ADC_Init+0x1f0>)
 8006426:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6859      	ldr	r1, [r3, #4]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	021a      	lsls	r2, r3, #8
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	430a      	orrs	r2, r1
 8006464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6859      	ldr	r1, [r3, #4]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	6899      	ldr	r1, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	4a58      	ldr	r2, [pc, #352]	; (8006610 <ADC_Init+0x1f4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d022      	beq.n	80064fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6899      	ldr	r1, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	e00f      	b.n	800651a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006518:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0202 	bic.w	r2, r2, #2
 8006528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6899      	ldr	r1, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	7e1b      	ldrb	r3, [r3, #24]
 8006534:	005a      	lsls	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01b      	beq.n	8006580 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006556:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006566:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6859      	ldr	r1, [r3, #4]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	3b01      	subs	r3, #1
 8006574:	035a      	lsls	r2, r3, #13
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	430a      	orrs	r2, r1
 800657c:	605a      	str	r2, [r3, #4]
 800657e:	e007      	b.n	8006590 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800658e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	051a      	lsls	r2, r3, #20
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80065c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6899      	ldr	r1, [r3, #8]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065d2:	025a      	lsls	r2, r3, #9
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	430a      	orrs	r2, r1
 80065da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6899      	ldr	r1, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	029a      	lsls	r2, r3, #10
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	609a      	str	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	3714      	adds	r7, #20
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	40012300 	.word	0x40012300
 8006610:	0f000001 	.word	0x0f000001

08006614 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006626:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800662a:	2b00      	cmp	r3, #0
 800662c:	d13c      	bne.n	80066a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006644:	2b00      	cmp	r3, #0
 8006646:	d12b      	bne.n	80066a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800664c:	2b00      	cmp	r3, #0
 800664e:	d127      	bne.n	80066a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006668:	2b00      	cmp	r3, #0
 800666a:	d119      	bne.n	80066a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 0220 	bic.w	r2, r2, #32
 800667a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006698:	f043 0201 	orr.w	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff fd6b 	bl	800617c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80066a6:	e00e      	b.n	80066c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f003 0310 	and.w	r3, r3, #16
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f7ff fd75 	bl	80061a4 <HAL_ADC_ErrorCallback>
}
 80066ba:	e004      	b.n	80066c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	4798      	blx	r3
}
 80066c6:	bf00      	nop
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b084      	sub	sp, #16
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fd57 	bl	8006190 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2240      	movs	r2, #64	; 0x40
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f043 0204 	orr.w	r2, r3, #4
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f7ff fd4a 	bl	80061a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f003 0307 	and.w	r3, r3, #7
 8006726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <__NVIC_SetPriorityGrouping+0x44>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006734:	4013      	ands	r3, r2
 8006736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800674a:	4a04      	ldr	r2, [pc, #16]	; (800675c <__NVIC_SetPriorityGrouping+0x44>)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	60d3      	str	r3, [r2, #12]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	e000ed00 	.word	0xe000ed00

08006760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006764:	4b04      	ldr	r3, [pc, #16]	; (8006778 <__NVIC_GetPriorityGrouping+0x18>)
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	0a1b      	lsrs	r3, r3, #8
 800676a:	f003 0307 	and.w	r3, r3, #7
}
 800676e:	4618      	mov	r0, r3
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	e000ed00 	.word	0xe000ed00

0800677c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800678a:	2b00      	cmp	r3, #0
 800678c:	db0b      	blt.n	80067a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800678e:	79fb      	ldrb	r3, [r7, #7]
 8006790:	f003 021f 	and.w	r2, r3, #31
 8006794:	4907      	ldr	r1, [pc, #28]	; (80067b4 <__NVIC_EnableIRQ+0x38>)
 8006796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	2001      	movs	r0, #1
 800679e:	fa00 f202 	lsl.w	r2, r0, r2
 80067a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	e000e100 	.word	0xe000e100

080067b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	4603      	mov	r3, r0
 80067c0:	6039      	str	r1, [r7, #0]
 80067c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	db0a      	blt.n	80067e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	490c      	ldr	r1, [pc, #48]	; (8006804 <__NVIC_SetPriority+0x4c>)
 80067d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d6:	0112      	lsls	r2, r2, #4
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	440b      	add	r3, r1
 80067dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067e0:	e00a      	b.n	80067f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	4908      	ldr	r1, [pc, #32]	; (8006808 <__NVIC_SetPriority+0x50>)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	3b04      	subs	r3, #4
 80067f0:	0112      	lsls	r2, r2, #4
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	440b      	add	r3, r1
 80067f6:	761a      	strb	r2, [r3, #24]
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	e000e100 	.word	0xe000e100
 8006808:	e000ed00 	.word	0xe000ed00

0800680c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	; 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 0307 	and.w	r3, r3, #7
 800681e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f1c3 0307 	rsb	r3, r3, #7
 8006826:	2b04      	cmp	r3, #4
 8006828:	bf28      	it	cs
 800682a:	2304      	movcs	r3, #4
 800682c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	3304      	adds	r3, #4
 8006832:	2b06      	cmp	r3, #6
 8006834:	d902      	bls.n	800683c <NVIC_EncodePriority+0x30>
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	3b03      	subs	r3, #3
 800683a:	e000      	b.n	800683e <NVIC_EncodePriority+0x32>
 800683c:	2300      	movs	r3, #0
 800683e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006840:	f04f 32ff 	mov.w	r2, #4294967295
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	43da      	mvns	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	401a      	ands	r2, r3
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006854:	f04f 31ff 	mov.w	r1, #4294967295
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	fa01 f303 	lsl.w	r3, r1, r3
 800685e:	43d9      	mvns	r1, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006864:	4313      	orrs	r3, r2
         );
}
 8006866:	4618      	mov	r0, r3
 8006868:	3724      	adds	r7, #36	; 0x24
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3b01      	subs	r3, #1
 8006880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006884:	d301      	bcc.n	800688a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006886:	2301      	movs	r3, #1
 8006888:	e00f      	b.n	80068aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800688a:	4a0a      	ldr	r2, [pc, #40]	; (80068b4 <SysTick_Config+0x40>)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3b01      	subs	r3, #1
 8006890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006892:	210f      	movs	r1, #15
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	f7ff ff8e 	bl	80067b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <SysTick_Config+0x40>)
 800689e:	2200      	movs	r2, #0
 80068a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068a2:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <SysTick_Config+0x40>)
 80068a4:	2207      	movs	r2, #7
 80068a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068a8:	2300      	movs	r3, #0
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	e000e010 	.word	0xe000e010

080068b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f7ff ff29 	bl	8006718 <__NVIC_SetPriorityGrouping>
}
 80068c6:	bf00      	nop
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b086      	sub	sp, #24
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	4603      	mov	r3, r0
 80068d6:	60b9      	str	r1, [r7, #8]
 80068d8:	607a      	str	r2, [r7, #4]
 80068da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80068e0:	f7ff ff3e 	bl	8006760 <__NVIC_GetPriorityGrouping>
 80068e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	68b9      	ldr	r1, [r7, #8]
 80068ea:	6978      	ldr	r0, [r7, #20]
 80068ec:	f7ff ff8e 	bl	800680c <NVIC_EncodePriority>
 80068f0:	4602      	mov	r2, r0
 80068f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068f6:	4611      	mov	r1, r2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7ff ff5d 	bl	80067b8 <__NVIC_SetPriority>
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	4603      	mov	r3, r0
 800690e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff ff31 	bl	800677c <__NVIC_EnableIRQ>
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7ff ffa2 	bl	8006874 <SysTick_Config>
 8006930:	4603      	mov	r3, r0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006944:	2300      	movs	r3, #0
 8006946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006948:	f7ff fad8 	bl	8005efc <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	e099      	b.n	8006a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2202      	movs	r2, #2
 800695c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f022 0201 	bic.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006978:	e00f      	b.n	800699a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800697a:	f7ff fabf 	bl	8005efc <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b05      	cmp	r3, #5
 8006986:	d908      	bls.n	800699a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2203      	movs	r2, #3
 8006992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e078      	b.n	8006a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e8      	bne.n	800697a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4b38      	ldr	r3, [pc, #224]	; (8006a94 <HAL_DMA_Init+0x158>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685a      	ldr	r2, [r3, #4]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80069d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80069de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d107      	bne.n	8006a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	4313      	orrs	r3, r2
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0307 	bic.w	r3, r3, #7
 8006a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	697a      	ldr	r2, [r7, #20]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2a:	2b04      	cmp	r3, #4
 8006a2c:	d117      	bne.n	8006a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00e      	beq.n	8006a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fb1b 	bl	800707c <DMA_CheckFifoParam>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d008      	beq.n	8006a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2240      	movs	r2, #64	; 0x40
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e016      	b.n	8006a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fad2 	bl	8007010 <DMA_CalcBaseAndBitshift>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a74:	223f      	movs	r2, #63	; 0x3f
 8006a76:	409a      	lsls	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	f010803f 	.word	0xf010803f

08006a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d101      	bne.n	8006abe <HAL_DMA_Start_IT+0x26>
 8006aba:	2302      	movs	r3, #2
 8006abc:	e040      	b.n	8006b40 <HAL_DMA_Start_IT+0xa8>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d12f      	bne.n	8006b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	68b9      	ldr	r1, [r7, #8]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f000 fa64 	bl	8006fb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af0:	223f      	movs	r2, #63	; 0x3f
 8006af2:	409a      	lsls	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0216 	orr.w	r2, r2, #22
 8006b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0208 	orr.w	r2, r2, #8
 8006b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f042 0201 	orr.w	r2, r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e005      	b.n	8006b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006b56:	f7ff f9d1 	bl	8005efc <HAL_GetTick>
 8006b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	2b02      	cmp	r3, #2
 8006b66:	d008      	beq.n	8006b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2280      	movs	r2, #128	; 0x80
 8006b6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e052      	b.n	8006c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0216 	bic.w	r2, r2, #22
 8006b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d103      	bne.n	8006baa <HAL_DMA_Abort+0x62>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d007      	beq.n	8006bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0208 	bic.w	r2, r2, #8
 8006bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bca:	e013      	b.n	8006bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bcc:	f7ff f996 	bl	8005efc <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b05      	cmp	r3, #5
 8006bd8:	d90c      	bls.n	8006bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2203      	movs	r2, #3
 8006be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006bf0:	2303      	movs	r3, #3
 8006bf2:	e015      	b.n	8006c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1e4      	bne.n	8006bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c06:	223f      	movs	r2, #63	; 0x3f
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d004      	beq.n	8006c46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2280      	movs	r2, #128	; 0x80
 8006c40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e00c      	b.n	8006c60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2205      	movs	r2, #5
 8006c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c78:	4b8e      	ldr	r3, [pc, #568]	; (8006eb4 <HAL_DMA_IRQHandler+0x248>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a8e      	ldr	r2, [pc, #568]	; (8006eb8 <HAL_DMA_IRQHandler+0x24c>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	0a9b      	lsrs	r3, r3, #10
 8006c84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c96:	2208      	movs	r2, #8
 8006c98:	409a      	lsls	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01a      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d013      	beq.n	8006cd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0204 	bic.w	r2, r2, #4
 8006cbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd0:	f043 0201 	orr.w	r2, r3, #1
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cdc:	2201      	movs	r2, #1
 8006cde:	409a      	lsls	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d012      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	409a      	lsls	r2, r3
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d06:	f043 0202 	orr.w	r2, r3, #2
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	2204      	movs	r2, #4
 8006d14:	409a      	lsls	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d012      	beq.n	8006d44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	2204      	movs	r2, #4
 8006d32:	409a      	lsls	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3c:	f043 0204 	orr.w	r2, r3, #4
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d48:	2210      	movs	r2, #16
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d043      	beq.n	8006ddc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0308 	and.w	r3, r3, #8
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d03c      	beq.n	8006ddc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d66:	2210      	movs	r2, #16
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d018      	beq.n	8006dae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d108      	bne.n	8006d9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d024      	beq.n	8006ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4798      	blx	r3
 8006d9a:	e01f      	b.n	8006ddc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01b      	beq.n	8006ddc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
 8006dac:	e016      	b.n	8006ddc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d107      	bne.n	8006dcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0208 	bic.w	r2, r2, #8
 8006dca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006de0:	2220      	movs	r2, #32
 8006de2:	409a      	lsls	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4013      	ands	r3, r2
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 808f 	beq.w	8006f0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f003 0310 	and.w	r3, r3, #16
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 8087 	beq.w	8006f0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e02:	2220      	movs	r2, #32
 8006e04:	409a      	lsls	r2, r3
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b05      	cmp	r3, #5
 8006e14:	d136      	bne.n	8006e84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 0216 	bic.w	r2, r2, #22
 8006e24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	695a      	ldr	r2, [r3, #20]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_DMA_IRQHandler+0x1da>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0208 	bic.w	r2, r2, #8
 8006e54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5a:	223f      	movs	r2, #63	; 0x3f
 8006e5c:	409a      	lsls	r2, r3
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d07e      	beq.n	8006f78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
        }
        return;
 8006e82:	e079      	b.n	8006f78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01d      	beq.n	8006ece <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10d      	bne.n	8006ebc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d031      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
 8006eb0:	e02c      	b.n	8006f0c <HAL_DMA_IRQHandler+0x2a0>
 8006eb2:	bf00      	nop
 8006eb4:	20000234 	.word	0x20000234
 8006eb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d023      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3
 8006ecc:	e01e      	b.n	8006f0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10f      	bne.n	8006efc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0210 	bic.w	r2, r2, #16
 8006eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d032      	beq.n	8006f7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d022      	beq.n	8006f66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2205      	movs	r2, #5
 8006f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0201 	bic.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60bb      	str	r3, [r7, #8]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d307      	bcc.n	8006f54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f2      	bne.n	8006f38 <HAL_DMA_IRQHandler+0x2cc>
 8006f52:	e000      	b.n	8006f56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006f54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d005      	beq.n	8006f7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
 8006f76:	e000      	b.n	8006f7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006f78:	bf00      	nop
    }
  }
}
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f8e:	b2db      	uxtb	r3, r3
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d108      	bne.n	8006ff4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006ff2:	e007      	b.n	8007004 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68ba      	ldr	r2, [r7, #8]
 8006ffa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	687a      	ldr	r2, [r7, #4]
 8007002:	60da      	str	r2, [r3, #12]
}
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	3b10      	subs	r3, #16
 8007020:	4a14      	ldr	r2, [pc, #80]	; (8007074 <DMA_CalcBaseAndBitshift+0x64>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	091b      	lsrs	r3, r3, #4
 8007028:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <DMA_CalcBaseAndBitshift+0x68>)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4413      	add	r3, r2
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d909      	bls.n	8007052 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	1d1a      	adds	r2, r3, #4
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	659a      	str	r2, [r3, #88]	; 0x58
 8007050:	e007      	b.n	8007062 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800705a:	f023 0303 	bic.w	r3, r3, #3
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	aaaaaaab 	.word	0xaaaaaaab
 8007078:	0800f01c 	.word	0x0800f01c

0800707c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	699b      	ldr	r3, [r3, #24]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d11f      	bne.n	80070d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b03      	cmp	r3, #3
 800709a:	d856      	bhi.n	800714a <DMA_CheckFifoParam+0xce>
 800709c:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <DMA_CheckFifoParam+0x28>)
 800709e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a2:	bf00      	nop
 80070a4:	080070b5 	.word	0x080070b5
 80070a8:	080070c7 	.word	0x080070c7
 80070ac:	080070b5 	.word	0x080070b5
 80070b0:	0800714b 	.word	0x0800714b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d046      	beq.n	800714e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070c4:	e043      	b.n	800714e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80070ce:	d140      	bne.n	8007152 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070d4:	e03d      	b.n	8007152 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070de:	d121      	bne.n	8007124 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d837      	bhi.n	8007156 <DMA_CheckFifoParam+0xda>
 80070e6:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <DMA_CheckFifoParam+0x70>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	080070fd 	.word	0x080070fd
 80070f0:	08007103 	.word	0x08007103
 80070f4:	080070fd 	.word	0x080070fd
 80070f8:	08007115 	.word	0x08007115
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007100:	e030      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d025      	beq.n	800715a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007112:	e022      	b.n	800715a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800711c:	d11f      	bne.n	800715e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007122:	e01c      	b.n	800715e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	2b02      	cmp	r3, #2
 8007128:	d903      	bls.n	8007132 <DMA_CheckFifoParam+0xb6>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b03      	cmp	r3, #3
 800712e:	d003      	beq.n	8007138 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007130:	e018      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	73fb      	strb	r3, [r7, #15]
      break;
 8007136:	e015      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00e      	beq.n	8007162 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
      break;
 8007148:	e00b      	b.n	8007162 <DMA_CheckFifoParam+0xe6>
      break;
 800714a:	bf00      	nop
 800714c:	e00a      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      break;
 800714e:	bf00      	nop
 8007150:	e008      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      break;
 8007152:	bf00      	nop
 8007154:	e006      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      break;
 8007156:	bf00      	nop
 8007158:	e004      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      break;
 800715a:	bf00      	nop
 800715c:	e002      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      break;   
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <DMA_CheckFifoParam+0xe8>
      break;
 8007162:	bf00      	nop
    }
  } 
  
  return status; 
 8007164:	7bfb      	ldrb	r3, [r7, #15]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop

08007174 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007174:	b480      	push	{r7}
 8007176:	b089      	sub	sp, #36	; 0x24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007182:	2300      	movs	r3, #0
 8007184:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007186:	2300      	movs	r3, #0
 8007188:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
 800718e:	e159      	b.n	8007444 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007190:	2201      	movs	r2, #1
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	fa02 f303 	lsl.w	r3, r2, r3
 8007198:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4013      	ands	r3, r2
 80071a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	f040 8148 	bne.w	800743e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d005      	beq.n	80071c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071c2:	2b02      	cmp	r3, #2
 80071c4:	d130      	bne.n	8007228 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	2203      	movs	r2, #3
 80071d2:	fa02 f303 	lsl.w	r3, r2, r3
 80071d6:	43db      	mvns	r3, r3
 80071d8:	69ba      	ldr	r2, [r7, #24]
 80071da:	4013      	ands	r3, r2
 80071dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68da      	ldr	r2, [r3, #12]
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ea:	69ba      	ldr	r2, [r7, #24]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071fc:	2201      	movs	r2, #1
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	43db      	mvns	r3, r3
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	4013      	ands	r3, r2
 800720a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	091b      	lsrs	r3, r3, #4
 8007212:	f003 0201 	and.w	r2, r3, #1
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	69ba      	ldr	r2, [r7, #24]
 800721e:	4313      	orrs	r3, r2
 8007220:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f003 0303 	and.w	r3, r3, #3
 8007230:	2b03      	cmp	r3, #3
 8007232:	d017      	beq.n	8007264 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	005b      	lsls	r3, r3, #1
 800723e:	2203      	movs	r2, #3
 8007240:	fa02 f303 	lsl.w	r3, r2, r3
 8007244:	43db      	mvns	r3, r3
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	4013      	ands	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	005b      	lsls	r3, r3, #1
 8007254:	fa02 f303 	lsl.w	r3, r2, r3
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	4313      	orrs	r3, r2
 800725c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d123      	bne.n	80072b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	08da      	lsrs	r2, r3, #3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3208      	adds	r2, #8
 8007278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	220f      	movs	r2, #15
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	43db      	mvns	r3, r3
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	4013      	ands	r3, r2
 8007292:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	08da      	lsrs	r2, r3, #3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	3208      	adds	r2, #8
 80072b2:	69b9      	ldr	r1, [r7, #24]
 80072b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	2203      	movs	r2, #3
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	43db      	mvns	r3, r3
 80072ca:	69ba      	ldr	r2, [r7, #24]
 80072cc:	4013      	ands	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f003 0203 	and.w	r2, r3, #3
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 80a2 	beq.w	800743e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	4b57      	ldr	r3, [pc, #348]	; (800745c <HAL_GPIO_Init+0x2e8>)
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007302:	4a56      	ldr	r2, [pc, #344]	; (800745c <HAL_GPIO_Init+0x2e8>)
 8007304:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007308:	6453      	str	r3, [r2, #68]	; 0x44
 800730a:	4b54      	ldr	r3, [pc, #336]	; (800745c <HAL_GPIO_Init+0x2e8>)
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007316:	4a52      	ldr	r2, [pc, #328]	; (8007460 <HAL_GPIO_Init+0x2ec>)
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	3302      	adds	r3, #2
 800731e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	220f      	movs	r2, #15
 800732e:	fa02 f303 	lsl.w	r3, r2, r3
 8007332:	43db      	mvns	r3, r3
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	4013      	ands	r3, r2
 8007338:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a49      	ldr	r2, [pc, #292]	; (8007464 <HAL_GPIO_Init+0x2f0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d019      	beq.n	8007376 <HAL_GPIO_Init+0x202>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4a48      	ldr	r2, [pc, #288]	; (8007468 <HAL_GPIO_Init+0x2f4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d013      	beq.n	8007372 <HAL_GPIO_Init+0x1fe>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	4a47      	ldr	r2, [pc, #284]	; (800746c <HAL_GPIO_Init+0x2f8>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d00d      	beq.n	800736e <HAL_GPIO_Init+0x1fa>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	4a46      	ldr	r2, [pc, #280]	; (8007470 <HAL_GPIO_Init+0x2fc>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d007      	beq.n	800736a <HAL_GPIO_Init+0x1f6>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a45      	ldr	r2, [pc, #276]	; (8007474 <HAL_GPIO_Init+0x300>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <HAL_GPIO_Init+0x1f2>
 8007362:	2304      	movs	r3, #4
 8007364:	e008      	b.n	8007378 <HAL_GPIO_Init+0x204>
 8007366:	2307      	movs	r3, #7
 8007368:	e006      	b.n	8007378 <HAL_GPIO_Init+0x204>
 800736a:	2303      	movs	r3, #3
 800736c:	e004      	b.n	8007378 <HAL_GPIO_Init+0x204>
 800736e:	2302      	movs	r3, #2
 8007370:	e002      	b.n	8007378 <HAL_GPIO_Init+0x204>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <HAL_GPIO_Init+0x204>
 8007376:	2300      	movs	r3, #0
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	f002 0203 	and.w	r2, r2, #3
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	4093      	lsls	r3, r2
 8007382:	69ba      	ldr	r2, [r7, #24]
 8007384:	4313      	orrs	r3, r2
 8007386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007388:	4935      	ldr	r1, [pc, #212]	; (8007460 <HAL_GPIO_Init+0x2ec>)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	089b      	lsrs	r3, r3, #2
 800738e:	3302      	adds	r3, #2
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007396:	4b38      	ldr	r3, [pc, #224]	; (8007478 <HAL_GPIO_Init+0x304>)
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	43db      	mvns	r3, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4013      	ands	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80073b2:	69ba      	ldr	r2, [r7, #24]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80073ba:	4a2f      	ldr	r2, [pc, #188]	; (8007478 <HAL_GPIO_Init+0x304>)
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073c0:	4b2d      	ldr	r3, [pc, #180]	; (8007478 <HAL_GPIO_Init+0x304>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	43db      	mvns	r3, r3
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4013      	ands	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80073e4:	4a24      	ldr	r2, [pc, #144]	; (8007478 <HAL_GPIO_Init+0x304>)
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80073ea:	4b23      	ldr	r3, [pc, #140]	; (8007478 <HAL_GPIO_Init+0x304>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	43db      	mvns	r3, r3
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	4013      	ands	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800740e:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_GPIO_Init+0x304>)
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007414:	4b18      	ldr	r3, [pc, #96]	; (8007478 <HAL_GPIO_Init+0x304>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	43db      	mvns	r3, r3
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	4013      	ands	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007430:	69ba      	ldr	r2, [r7, #24]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4313      	orrs	r3, r2
 8007436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007438:	4a0f      	ldr	r2, [pc, #60]	; (8007478 <HAL_GPIO_Init+0x304>)
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	3301      	adds	r3, #1
 8007442:	61fb      	str	r3, [r7, #28]
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b0f      	cmp	r3, #15
 8007448:	f67f aea2 	bls.w	8007190 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800744c:	bf00      	nop
 800744e:	bf00      	nop
 8007450:	3724      	adds	r7, #36	; 0x24
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40023800 	.word	0x40023800
 8007460:	40013800 	.word	0x40013800
 8007464:	40020000 	.word	0x40020000
 8007468:	40020400 	.word	0x40020400
 800746c:	40020800 	.word	0x40020800
 8007470:	40020c00 	.word	0x40020c00
 8007474:	40021000 	.word	0x40021000
 8007478:	40013c00 	.word	0x40013c00

0800747c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	4013      	ands	r3, r2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e001      	b.n	800749e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
 80074b8:	4613      	mov	r3, r2
 80074ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074bc:	787b      	ldrb	r3, [r7, #1]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074c8:	e003      	b.n	80074d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074ca:	887b      	ldrh	r3, [r7, #2]
 80074cc:	041a      	lsls	r2, r3, #16
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	619a      	str	r2, [r3, #24]
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80074ea:	4b08      	ldr	r3, [pc, #32]	; (800750c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80074ec:	695a      	ldr	r2, [r3, #20]
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d006      	beq.n	8007504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80074f6:	4a05      	ldr	r2, [pc, #20]	; (800750c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80074f8:	88fb      	ldrh	r3, [r7, #6]
 80074fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fc fcbe 	bl	8003e80 <HAL_GPIO_EXTI_Callback>
  }
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40013c00 	.word	0x40013c00

08007510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e12b      	b.n	800777a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fb fe0e 	bl	8003158 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2224      	movs	r2, #36	; 0x24
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0201 	bic.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007574:	f003 f8ac 	bl	800a6d0 <HAL_RCC_GetPCLK1Freq>
 8007578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4a81      	ldr	r2, [pc, #516]	; (8007784 <HAL_I2C_Init+0x274>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d807      	bhi.n	8007594 <HAL_I2C_Init+0x84>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a80      	ldr	r2, [pc, #512]	; (8007788 <HAL_I2C_Init+0x278>)
 8007588:	4293      	cmp	r3, r2
 800758a:	bf94      	ite	ls
 800758c:	2301      	movls	r3, #1
 800758e:	2300      	movhi	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	e006      	b.n	80075a2 <HAL_I2C_Init+0x92>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a7d      	ldr	r2, [pc, #500]	; (800778c <HAL_I2C_Init+0x27c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	bf94      	ite	ls
 800759c:	2301      	movls	r3, #1
 800759e:	2300      	movhi	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0e7      	b.n	800777a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a78      	ldr	r2, [pc, #480]	; (8007790 <HAL_I2C_Init+0x280>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	0c9b      	lsrs	r3, r3, #18
 80075b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	4a6a      	ldr	r2, [pc, #424]	; (8007784 <HAL_I2C_Init+0x274>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d802      	bhi.n	80075e4 <HAL_I2C_Init+0xd4>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	3301      	adds	r3, #1
 80075e2:	e009      	b.n	80075f8 <HAL_I2C_Init+0xe8>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	4a69      	ldr	r2, [pc, #420]	; (8007794 <HAL_I2C_Init+0x284>)
 80075f0:	fba2 2303 	umull	r2, r3, r2, r3
 80075f4:	099b      	lsrs	r3, r3, #6
 80075f6:	3301      	adds	r3, #1
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800760a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	495c      	ldr	r1, [pc, #368]	; (8007784 <HAL_I2C_Init+0x274>)
 8007614:	428b      	cmp	r3, r1
 8007616:	d819      	bhi.n	800764c <HAL_I2C_Init+0x13c>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1e59      	subs	r1, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	fbb1 f3f3 	udiv	r3, r1, r3
 8007626:	1c59      	adds	r1, r3, #1
 8007628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800762c:	400b      	ands	r3, r1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <HAL_I2C_Init+0x138>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1e59      	subs	r1, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007640:	3301      	adds	r3, #1
 8007642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007646:	e051      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 8007648:	2304      	movs	r3, #4
 800764a:	e04f      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d111      	bne.n	8007678 <HAL_I2C_Init+0x168>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	1e58      	subs	r0, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	440b      	add	r3, r1
 8007662:	fbb0 f3f3 	udiv	r3, r0, r3
 8007666:	3301      	adds	r3, #1
 8007668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800766c:	2b00      	cmp	r3, #0
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	e012      	b.n	800769e <HAL_I2C_Init+0x18e>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	1e58      	subs	r0, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6859      	ldr	r1, [r3, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	0099      	lsls	r1, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	fbb0 f3f3 	udiv	r3, r0, r3
 800768e:	3301      	adds	r3, #1
 8007690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007694:	2b00      	cmp	r3, #0
 8007696:	bf0c      	ite	eq
 8007698:	2301      	moveq	r3, #1
 800769a:	2300      	movne	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_I2C_Init+0x196>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e022      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10e      	bne.n	80076cc <HAL_I2C_Init+0x1bc>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1e58      	subs	r0, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6859      	ldr	r1, [r3, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	440b      	add	r3, r1
 80076bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80076c0:	3301      	adds	r3, #1
 80076c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ca:	e00f      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	1e58      	subs	r0, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	0099      	lsls	r1, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	fbb0 f3f3 	udiv	r3, r0, r3
 80076e2:	3301      	adds	r3, #1
 80076e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	6809      	ldr	r1, [r1, #0]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69da      	ldr	r2, [r3, #28]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800771a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6911      	ldr	r1, [r2, #16]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	68d2      	ldr	r2, [r2, #12]
 8007726:	4311      	orrs	r1, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	430b      	orrs	r3, r1
 800772e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	000186a0 	.word	0x000186a0
 8007788:	001e847f 	.word	0x001e847f
 800778c:	003d08ff 	.word	0x003d08ff
 8007790:	431bde83 	.word	0x431bde83
 8007794:	10624dd3 	.word	0x10624dd3

08007798 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	461a      	mov	r2, r3
 80077a4:	460b      	mov	r3, r1
 80077a6:	817b      	strh	r3, [r7, #10]
 80077a8:	4613      	mov	r3, r2
 80077aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077ac:	f7fe fba6 	bl	8005efc <HAL_GetTick>
 80077b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	f040 80e0 	bne.w	8007980 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	2319      	movs	r3, #25
 80077c6:	2201      	movs	r2, #1
 80077c8:	4970      	ldr	r1, [pc, #448]	; (800798c <HAL_I2C_Master_Transmit+0x1f4>)
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f002 f8e6 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
 80077d8:	e0d3      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_I2C_Master_Transmit+0x50>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e0cc      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d007      	beq.n	800780e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800781c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2221      	movs	r2, #33	; 0x21
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2210      	movs	r2, #16
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	893a      	ldrh	r2, [r7, #8]
 800783e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a50      	ldr	r2, [pc, #320]	; (8007990 <HAL_I2C_Master_Transmit+0x1f8>)
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007850:	8979      	ldrh	r1, [r7, #10]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	6a3a      	ldr	r2, [r7, #32]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f001 fea8 	bl	80095ac <I2C_MasterRequestWrite>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e08d      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007866:	2300      	movs	r3, #0
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800787c:	e066      	b.n	800794c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	6a39      	ldr	r1, [r7, #32]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f002 f960 	bl	8009b48 <I2C_WaitOnTXEFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	2b04      	cmp	r3, #4
 8007894:	d107      	bne.n	80078a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e06b      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d11b      	bne.n	8007920 <HAL_I2C_Master_Transmit+0x188>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	6a39      	ldr	r1, [r7, #32]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f002 f950 	bl	8009bca <I2C_WaitOnBTFFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00d      	beq.n	800794c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	2b04      	cmp	r3, #4
 8007936:	d107      	bne.n	8007948 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007946:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e01a      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007950:	2b00      	cmp	r3, #0
 8007952:	d194      	bne.n	800787e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e000      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	00100002 	.word	0x00100002
 8007990:	ffff0000 	.word	0xffff0000

08007994 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	; 0x30
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	461a      	mov	r2, r3
 80079a0:	460b      	mov	r3, r1
 80079a2:	817b      	strh	r3, [r7, #10]
 80079a4:	4613      	mov	r3, r2
 80079a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079a8:	f7fe faa8 	bl	8005efc <HAL_GetTick>
 80079ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	f040 820b 	bne.w	8007dd2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	2319      	movs	r3, #25
 80079c2:	2201      	movs	r2, #1
 80079c4:	497c      	ldr	r1, [pc, #496]	; (8007bb8 <HAL_I2C_Master_Receive+0x224>)
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f001 ffe8 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
 80079d4:	e1fe      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_I2C_Master_Receive+0x50>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e1f7      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d007      	beq.n	8007a0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f042 0201 	orr.w	r2, r2, #1
 8007a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2222      	movs	r2, #34	; 0x22
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2210      	movs	r2, #16
 8007a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	893a      	ldrh	r2, [r7, #8]
 8007a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4a5c      	ldr	r2, [pc, #368]	; (8007bbc <HAL_I2C_Master_Receive+0x228>)
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007a4c:	8979      	ldrh	r1, [r7, #10]
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f001 fe2c 	bl	80096b0 <I2C_MasterRequestRead>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e1b8      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d113      	bne.n	8007a92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	623b      	str	r3, [r7, #32]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e18c      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d11b      	bne.n	8007ad2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e16c      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d11b      	bne.n	8007b12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afa:	2300      	movs	r3, #0
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	e14c      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b38:	e138      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f200 80f1 	bhi.w	8007d26 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d123      	bne.n	8007b94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f002 f8ad 	bl	8009cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e139      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b92:	e10b      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d14e      	bne.n	8007c3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4906      	ldr	r1, [pc, #24]	; (8007bc0 <HAL_I2C_Master_Receive+0x22c>)
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f001 fef8 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e10e      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
 8007bb6:	bf00      	nop
 8007bb8:	00100002 	.word	0x00100002
 8007bbc:	ffff0000 	.word	0xffff0000
 8007bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c38:	e0b8      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2200      	movs	r2, #0
 8007c42:	4966      	ldr	r1, [pc, #408]	; (8007ddc <HAL_I2C_Master_Receive+0x448>)
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f001 fea9 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0bf      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	494f      	ldr	r1, [pc, #316]	; (8007ddc <HAL_I2C_Master_Receive+0x448>)
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f001 fe7b 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e091      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d24:	e042      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f001 ffc0 	bl	8009cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e04c      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d118      	bne.n	8007dac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f aec2 	bne.w	8007b3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e000      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
  }
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	; 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	00010004 	.word	0x00010004

08007de0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e00:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e08:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007e0a:	7bfb      	ldrb	r3, [r7, #15]
 8007e0c:	2b10      	cmp	r3, #16
 8007e0e:	d003      	beq.n	8007e18 <HAL_I2C_EV_IRQHandler+0x38>
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b40      	cmp	r3, #64	; 0x40
 8007e14:	f040 80c1 	bne.w	8007f9a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	695b      	ldr	r3, [r3, #20]
 8007e26:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10d      	bne.n	8007e4e <HAL_I2C_EV_IRQHandler+0x6e>
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007e38:	d003      	beq.n	8007e42 <HAL_I2C_EV_IRQHandler+0x62>
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007e40:	d101      	bne.n	8007e46 <HAL_I2C_EV_IRQHandler+0x66>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <HAL_I2C_EV_IRQHandler+0x68>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	f000 8132 	beq.w	80080b2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00c      	beq.n	8007e72 <HAL_I2C_EV_IRQHandler+0x92>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	0a5b      	lsrs	r3, r3, #9
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d006      	beq.n	8007e72 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 ffa8 	bl	8009dba <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fd83 	bl	8008976 <I2C_Master_SB>
 8007e70:	e092      	b.n	8007f98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	08db      	lsrs	r3, r3, #3
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d009      	beq.n	8007e92 <HAL_I2C_EV_IRQHandler+0xb2>
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	0a5b      	lsrs	r3, r3, #9
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d003      	beq.n	8007e92 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fdf9 	bl	8008a82 <I2C_Master_ADD10>
 8007e90:	e082      	b.n	8007f98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d009      	beq.n	8007eb2 <HAL_I2C_EV_IRQHandler+0xd2>
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	0a5b      	lsrs	r3, r3, #9
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fe13 	bl	8008ad6 <I2C_Master_ADDR>
 8007eb0:	e072      	b.n	8007f98 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	089b      	lsrs	r3, r3, #2
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d03b      	beq.n	8007f36 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ecc:	f000 80f3 	beq.w	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	09db      	lsrs	r3, r3, #7
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00f      	beq.n	8007efc <HAL_I2C_EV_IRQHandler+0x11c>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	0a9b      	lsrs	r3, r3, #10
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <HAL_I2C_EV_IRQHandler+0x11c>
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	089b      	lsrs	r3, r3, #2
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d103      	bne.n	8007efc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f9f3 	bl	80082e0 <I2C_MasterTransmit_TXE>
 8007efa:	e04d      	b.n	8007f98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	089b      	lsrs	r3, r3, #2
 8007f00:	f003 0301 	and.w	r3, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80d6 	beq.w	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	0a5b      	lsrs	r3, r3, #9
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80cf 	beq.w	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
 8007f1a:	2b21      	cmp	r3, #33	; 0x21
 8007f1c:	d103      	bne.n	8007f26 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa7a 	bl	8008418 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f24:	e0c7      	b.n	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b40      	cmp	r3, #64	; 0x40
 8007f2a:	f040 80c4 	bne.w	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 fae8 	bl	8008504 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f34:	e0bf      	b.n	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f44:	f000 80b7 	beq.w	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	099b      	lsrs	r3, r3, #6
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00f      	beq.n	8007f74 <HAL_I2C_EV_IRQHandler+0x194>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	0a9b      	lsrs	r3, r3, #10
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d009      	beq.n	8007f74 <HAL_I2C_EV_IRQHandler+0x194>
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	089b      	lsrs	r3, r3, #2
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d103      	bne.n	8007f74 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fb5d 	bl	800862c <I2C_MasterReceive_RXNE>
 8007f72:	e011      	b.n	8007f98 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	089b      	lsrs	r3, r3, #2
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 809a 	beq.w	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	0a5b      	lsrs	r3, r3, #9
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f000 8093 	beq.w	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fc06 	bl	80087a2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007f96:	e08e      	b.n	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007f98:	e08d      	b.n	80080b6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d004      	beq.n	8007fac <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	61fb      	str	r3, [r7, #28]
 8007faa:	e007      	b.n	8007fbc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	695b      	ldr	r3, [r3, #20]
 8007fba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d012      	beq.n	8007fee <HAL_I2C_EV_IRQHandler+0x20e>
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	0a5b      	lsrs	r3, r3, #9
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00c      	beq.n	8007fee <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007fe4:	69b9      	ldr	r1, [r7, #24]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 ffc4 	bl	8008f74 <I2C_Slave_ADDR>
 8007fec:	e066      	b.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	091b      	lsrs	r3, r3, #4
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <HAL_I2C_EV_IRQHandler+0x22e>
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	0a5b      	lsrs	r3, r3, #9
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 fffe 	bl	8009008 <I2C_Slave_STOPF>
 800800c:	e056      	b.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	2b21      	cmp	r3, #33	; 0x21
 8008012:	d002      	beq.n	800801a <HAL_I2C_EV_IRQHandler+0x23a>
 8008014:	7bbb      	ldrb	r3, [r7, #14]
 8008016:	2b29      	cmp	r3, #41	; 0x29
 8008018:	d125      	bne.n	8008066 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	09db      	lsrs	r3, r3, #7
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00f      	beq.n	8008046 <HAL_I2C_EV_IRQHandler+0x266>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	0a9b      	lsrs	r3, r3, #10
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d009      	beq.n	8008046 <HAL_I2C_EV_IRQHandler+0x266>
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	089b      	lsrs	r3, r3, #2
 8008036:	f003 0301 	and.w	r3, r3, #1
 800803a:	2b00      	cmp	r3, #0
 800803c:	d103      	bne.n	8008046 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 feda 	bl	8008df8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008044:	e039      	b.n	80080ba <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	089b      	lsrs	r3, r3, #2
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d033      	beq.n	80080ba <HAL_I2C_EV_IRQHandler+0x2da>
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	0a5b      	lsrs	r3, r3, #9
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d02d      	beq.n	80080ba <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 ff07 	bl	8008e72 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008064:	e029      	b.n	80080ba <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	099b      	lsrs	r3, r3, #6
 800806a:	f003 0301 	and.w	r3, r3, #1
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00f      	beq.n	8008092 <HAL_I2C_EV_IRQHandler+0x2b2>
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	0a9b      	lsrs	r3, r3, #10
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	2b00      	cmp	r3, #0
 800807c:	d009      	beq.n	8008092 <HAL_I2C_EV_IRQHandler+0x2b2>
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b00      	cmp	r3, #0
 8008088:	d103      	bne.n	8008092 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 ff12 	bl	8008eb4 <I2C_SlaveReceive_RXNE>
 8008090:	e014      	b.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	089b      	lsrs	r3, r3, #2
 8008096:	f003 0301 	and.w	r3, r3, #1
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	0a5b      	lsrs	r3, r3, #9
 80080a2:	f003 0301 	and.w	r3, r3, #1
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d008      	beq.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 ff40 	bl	8008f30 <I2C_SlaveReceive_BTF>
 80080b0:	e004      	b.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80080b2:	bf00      	nop
 80080b4:	e002      	b.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80080ba:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80080bc:	3720      	adds	r7, #32
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b08a      	sub	sp, #40	; 0x28
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80080da:	2300      	movs	r3, #0
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080e4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	0a1b      	lsrs	r3, r3, #8
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00e      	beq.n	8008110 <HAL_I2C_ER_IRQHandler+0x4e>
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	0a1b      	lsrs	r3, r3, #8
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d008      	beq.n	8008110 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	f043 0301 	orr.w	r3, r3, #1
 8008104:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800810e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	0a5b      	lsrs	r3, r3, #9
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00e      	beq.n	800813a <HAL_I2C_ER_IRQHandler+0x78>
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	0a1b      	lsrs	r3, r3, #8
 8008120:	f003 0301 	and.w	r3, r3, #1
 8008124:	2b00      	cmp	r3, #0
 8008126:	d008      	beq.n	800813a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	f043 0302 	orr.w	r3, r3, #2
 800812e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8008138:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	0a9b      	lsrs	r3, r3, #10
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d03f      	beq.n	80081c6 <HAL_I2C_ER_IRQHandler+0x104>
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	0a1b      	lsrs	r3, r3, #8
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d039      	beq.n	80081c6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8008152:	7efb      	ldrb	r3, [r7, #27]
 8008154:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815a:	b29b      	uxth	r3, r3
 800815c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008164:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800816c:	7ebb      	ldrb	r3, [r7, #26]
 800816e:	2b20      	cmp	r3, #32
 8008170:	d112      	bne.n	8008198 <HAL_I2C_ER_IRQHandler+0xd6>
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10f      	bne.n	8008198 <HAL_I2C_ER_IRQHandler+0xd6>
 8008178:	7cfb      	ldrb	r3, [r7, #19]
 800817a:	2b21      	cmp	r3, #33	; 0x21
 800817c:	d008      	beq.n	8008190 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800817e:	7cfb      	ldrb	r3, [r7, #19]
 8008180:	2b29      	cmp	r3, #41	; 0x29
 8008182:	d005      	beq.n	8008190 <HAL_I2C_ER_IRQHandler+0xce>
 8008184:	7cfb      	ldrb	r3, [r7, #19]
 8008186:	2b28      	cmp	r3, #40	; 0x28
 8008188:	d106      	bne.n	8008198 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b21      	cmp	r3, #33	; 0x21
 800818e:	d103      	bne.n	8008198 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f869 	bl	8009268 <I2C_Slave_AF>
 8008196:	e016      	b.n	80081c6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081a0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	f043 0304 	orr.w	r3, r3, #4
 80081a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80081aa:	7efb      	ldrb	r3, [r7, #27]
 80081ac:	2b10      	cmp	r3, #16
 80081ae:	d002      	beq.n	80081b6 <HAL_I2C_ER_IRQHandler+0xf4>
 80081b0:	7efb      	ldrb	r3, [r7, #27]
 80081b2:	2b40      	cmp	r3, #64	; 0x40
 80081b4:	d107      	bne.n	80081c6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081c4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	0adb      	lsrs	r3, r3, #11
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <HAL_I2C_ER_IRQHandler+0x12e>
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	0a1b      	lsrs	r3, r3, #8
 80081d6:	f003 0301 	and.w	r3, r3, #1
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d008      	beq.n	80081f0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	f043 0308 	orr.w	r3, r3, #8
 80081e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80081ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d008      	beq.n	8008208 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	431a      	orrs	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f8a0 	bl	8009348 <I2C_ITError>
  }
}
 8008208:	bf00      	nop
 800820a:	3728      	adds	r7, #40	; 0x28
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
 800826c:	4613      	mov	r3, r2
 800826e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008302:	2b00      	cmp	r3, #0
 8008304:	d150      	bne.n	80083a8 <I2C_MasterTransmit_TXE+0xc8>
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	2b21      	cmp	r3, #33	; 0x21
 800830a:	d14d      	bne.n	80083a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2b08      	cmp	r3, #8
 8008310:	d01d      	beq.n	800834e <I2C_MasterTransmit_TXE+0x6e>
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b20      	cmp	r3, #32
 8008316:	d01a      	beq.n	800834e <I2C_MasterTransmit_TXE+0x6e>
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800831e:	d016      	beq.n	800834e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800832e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2211      	movs	r2, #17
 8008334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff ff62 	bl	8008210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800834c:	e060      	b.n	8008410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685a      	ldr	r2, [r3, #4]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800835c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800836c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b40      	cmp	r3, #64	; 0x40
 8008386:	d107      	bne.n	8008398 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7ff ff7d 	bl	8008290 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008396:	e03b      	b.n	8008410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7ff ff35 	bl	8008210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80083a6:	e033      	b.n	8008410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
 80083aa:	2b21      	cmp	r3, #33	; 0x21
 80083ac:	d005      	beq.n	80083ba <I2C_MasterTransmit_TXE+0xda>
 80083ae:	7bbb      	ldrb	r3, [r7, #14]
 80083b0:	2b40      	cmp	r3, #64	; 0x40
 80083b2:	d12d      	bne.n	8008410 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	2b22      	cmp	r3, #34	; 0x22
 80083b8:	d12a      	bne.n	8008410 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083be:	b29b      	uxth	r3, r3
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d108      	bne.n	80083d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80083d4:	e01c      	b.n	8008410 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b40      	cmp	r3, #64	; 0x40
 80083e0:	d103      	bne.n	80083ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f88e 	bl	8008504 <I2C_MemoryTransmit_TXE_BTF>
}
 80083e8:	e012      	b.n	8008410 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008404:	b29b      	uxth	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	b29a      	uxth	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800840e:	e7ff      	b.n	8008410 <I2C_MasterTransmit_TXE+0x130>
 8008410:	bf00      	nop
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008424:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b21      	cmp	r3, #33	; 0x21
 8008430:	d164      	bne.n	80084fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008436:	b29b      	uxth	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d012      	beq.n	8008462 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844c:	1c5a      	adds	r2, r3, #1
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008456:	b29b      	uxth	r3, r3
 8008458:	3b01      	subs	r3, #1
 800845a:	b29a      	uxth	r2, r3
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008460:	e04c      	b.n	80084fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b08      	cmp	r3, #8
 8008466:	d01d      	beq.n	80084a4 <I2C_MasterTransmit_BTF+0x8c>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b20      	cmp	r3, #32
 800846c:	d01a      	beq.n	80084a4 <I2C_MasterTransmit_BTF+0x8c>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008474:	d016      	beq.n	80084a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008484:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2211      	movs	r2, #17
 800848a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7ff feb7 	bl	8008210 <HAL_I2C_MasterTxCpltCallback>
}
 80084a2:	e02b      	b.n	80084fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80084b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2220      	movs	r2, #32
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d107      	bne.n	80084ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff fed2 	bl	8008290 <HAL_I2C_MemTxCpltCallback>
}
 80084ec:	e006      	b.n	80084fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff fe8a 	bl	8008210 <HAL_I2C_MasterTxCpltCallback>
}
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008512:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008518:	2b00      	cmp	r3, #0
 800851a:	d11d      	bne.n	8008558 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008520:	2b01      	cmp	r3, #1
 8008522:	d10b      	bne.n	800853c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008528:	b2da      	uxtb	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008534:	1c9a      	adds	r2, r3, #2
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800853a:	e073      	b.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008540:	b29b      	uxth	r3, r3
 8008542:	121b      	asrs	r3, r3, #8
 8008544:	b2da      	uxtb	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008556:	e065      	b.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800855c:	2b01      	cmp	r3, #1
 800855e:	d10b      	bne.n	8008578 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008564:	b2da      	uxtb	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008570:	1c5a      	adds	r2, r3, #1
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008576:	e055      	b.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857c:	2b02      	cmp	r3, #2
 800857e:	d151      	bne.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	2b22      	cmp	r3, #34	; 0x22
 8008584:	d10d      	bne.n	80085a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008594:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80085a0:	e040      	b.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d015      	beq.n	80085d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	2b21      	cmp	r3, #33	; 0x21
 80085b0:	d112      	bne.n	80085d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	781a      	ldrb	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80085d6:	e025      	b.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085dc:	b29b      	uxth	r3, r3
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d120      	bne.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	2b21      	cmp	r3, #33	; 0x21
 80085e6:	d11d      	bne.n	8008624 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80085f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008606:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2220      	movs	r2, #32
 8008612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fe36 	bl	8008290 <HAL_I2C_MemTxCpltCallback>
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b22      	cmp	r3, #34	; 0x22
 800863e:	f040 80ac 	bne.w	800879a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008646:	b29b      	uxth	r3, r3
 8008648:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b03      	cmp	r3, #3
 800864e:	d921      	bls.n	8008694 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691a      	ldr	r2, [r3, #16]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800866c:	b29b      	uxth	r3, r3
 800866e:	3b01      	subs	r3, #1
 8008670:	b29a      	uxth	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800867a:	b29b      	uxth	r3, r3
 800867c:	2b03      	cmp	r3, #3
 800867e:	f040 808c 	bne.w	800879a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008690:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8008692:	e082      	b.n	800879a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	2b02      	cmp	r3, #2
 800869a:	d075      	beq.n	8008788 <I2C_MasterReceive_RXNE+0x15c>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d002      	beq.n	80086a8 <I2C_MasterReceive_RXNE+0x7c>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d16f      	bne.n	8008788 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f001 facf 	bl	8009c4c <I2C_WaitOnSTOPRequestThroughIT>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d142      	bne.n	800873a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086c2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086d2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	691a      	ldr	r2, [r3, #16]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b40      	cmp	r3, #64	; 0x40
 800870c:	d10a      	bne.n	8008724 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff fdc1 	bl	80082a4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008722:	e03a      	b.n	800879a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2212      	movs	r2, #18
 8008730:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff fd76 	bl	8008224 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008738:	e02f      	b.n	800879a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	685a      	ldr	r2, [r3, #4]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008748:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	691a      	ldr	r2, [r3, #16]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008754:	b2d2      	uxtb	r2, r2
 8008756:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800875c:	1c5a      	adds	r2, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008766:	b29b      	uxth	r3, r3
 8008768:	3b01      	subs	r3, #1
 800876a:	b29a      	uxth	r2, r3
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2220      	movs	r2, #32
 8008774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff fd99 	bl	80082b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008786:	e008      	b.n	800879a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008796:	605a      	str	r2, [r3, #4]
}
 8008798:	e7ff      	b.n	800879a <I2C_MasterReceive_RXNE+0x16e>
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d11b      	bne.n	80087f2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087c8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691a      	ldr	r2, [r3, #16]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	b2d2      	uxtb	r2, r2
 80087d6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	1c5a      	adds	r2, r3, #1
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	3b01      	subs	r3, #1
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80087f0:	e0bd      	b.n	800896e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d129      	bne.n	8008850 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685a      	ldr	r2, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800880a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b04      	cmp	r3, #4
 8008810:	d00a      	beq.n	8008828 <I2C_MasterReceive_BTF+0x86>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b02      	cmp	r3, #2
 8008816:	d007      	beq.n	8008828 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008826:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	b2d2      	uxtb	r2, r2
 8008834:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008844:	b29b      	uxth	r3, r3
 8008846:	3b01      	subs	r3, #1
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800884e:	e08e      	b.n	800896e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b02      	cmp	r3, #2
 8008858:	d176      	bne.n	8008948 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d002      	beq.n	8008866 <I2C_MasterReceive_BTF+0xc4>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b10      	cmp	r3, #16
 8008864:	d108      	bne.n	8008878 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008874:	601a      	str	r2, [r3, #0]
 8008876:	e019      	b.n	80088ac <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b04      	cmp	r3, #4
 800887c:	d002      	beq.n	8008884 <I2C_MasterReceive_BTF+0xe2>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b02      	cmp	r3, #2
 8008882:	d108      	bne.n	8008896 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681a      	ldr	r2, [r3, #0]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008892:	601a      	str	r2, [r3, #0]
 8008894:	e00a      	b.n	80088ac <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b10      	cmp	r3, #16
 800889a:	d007      	beq.n	80088ac <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	691a      	ldr	r2, [r3, #16]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	b2d2      	uxtb	r2, r2
 80088de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	3b01      	subs	r3, #1
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	685a      	ldr	r2, [r3, #4]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008906:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2220      	movs	r2, #32
 800890c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b40      	cmp	r3, #64	; 0x40
 800891a:	d10a      	bne.n	8008932 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7ff fcba 	bl	80082a4 <HAL_I2C_MemRxCpltCallback>
}
 8008930:	e01d      	b.n	800896e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2212      	movs	r2, #18
 800893e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7ff fc6f 	bl	8008224 <HAL_I2C_MasterRxCpltCallback>
}
 8008946:	e012      	b.n	800896e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	3b01      	subs	r3, #1
 8008968:	b29a      	uxth	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800896e:	bf00      	nop
 8008970:	3710      	adds	r7, #16
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d117      	bne.n	80089ba <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800898e:	2b00      	cmp	r3, #0
 8008990:	d109      	bne.n	80089a6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008996:	b2db      	uxtb	r3, r3
 8008998:	461a      	mov	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089a2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80089a4:	e067      	b.n	8008a76 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f043 0301 	orr.w	r3, r3, #1
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	611a      	str	r2, [r3, #16]
}
 80089b8:	e05d      	b.n	8008a76 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80089c2:	d133      	bne.n	8008a2c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b21      	cmp	r3, #33	; 0x21
 80089ce:	d109      	bne.n	80089e4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	461a      	mov	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80089e0:	611a      	str	r2, [r3, #16]
 80089e2:	e008      	b.n	80089f6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	f043 0301 	orr.w	r3, r3, #1
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d004      	beq.n	8008a08 <I2C_Master_SB+0x92>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d108      	bne.n	8008a1a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d032      	beq.n	8008a76 <I2C_Master_SB+0x100>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d02d      	beq.n	8008a76 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a28:	605a      	str	r2, [r3, #4]
}
 8008a2a:	e024      	b.n	8008a76 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10e      	bne.n	8008a52 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	11db      	asrs	r3, r3, #7
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 0306 	and.w	r3, r3, #6
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f063 030f 	orn	r3, r3, #15
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	611a      	str	r2, [r3, #16]
}
 8008a50:	e011      	b.n	8008a76 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d10d      	bne.n	8008a76 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	11db      	asrs	r3, r3, #7
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	f003 0306 	and.w	r3, r3, #6
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f063 030e 	orn	r3, r3, #14
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	611a      	str	r2, [r3, #16]
}
 8008a76:	bf00      	nop
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b083      	sub	sp, #12
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a8e:	b2da      	uxtb	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d004      	beq.n	8008aa8 <I2C_Master_ADD10+0x26>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d108      	bne.n	8008aba <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00c      	beq.n	8008aca <I2C_Master_ADD10+0x48>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d007      	beq.n	8008aca <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ac8:	605a      	str	r2, [r3, #4]
  }
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b091      	sub	sp, #68	; 0x44
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aec:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b22      	cmp	r3, #34	; 0x22
 8008afe:	f040 8169 	bne.w	8008dd4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10f      	bne.n	8008b2a <I2C_Master_ADDR+0x54>
 8008b0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b0e:	2b40      	cmp	r3, #64	; 0x40
 8008b10:	d10b      	bne.n	8008b2a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b12:	2300      	movs	r3, #0
 8008b14:	633b      	str	r3, [r7, #48]	; 0x30
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	695b      	ldr	r3, [r3, #20]
 8008b1c:	633b      	str	r3, [r7, #48]	; 0x30
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	633b      	str	r3, [r7, #48]	; 0x30
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	e160      	b.n	8008dec <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d11d      	bne.n	8008b6e <I2C_Master_ADDR+0x98>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	691b      	ldr	r3, [r3, #16]
 8008b36:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008b3a:	d118      	bne.n	8008b6e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b60:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b66:	1c5a      	adds	r2, r3, #1
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8008b6c:	e13e      	b.n	8008dec <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d113      	bne.n	8008ba0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b78:	2300      	movs	r3, #0
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e115      	b.n	8008dcc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	f040 808a 	bne.w	8008cc0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008bb2:	d137      	bne.n	8008c24 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bc2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd2:	d113      	bne.n	8008bfc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008be2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008be4:	2300      	movs	r3, #0
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	e0e7      	b.n	8008dcc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	623b      	str	r3, [r7, #32]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	623b      	str	r3, [r7, #32]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699b      	ldr	r3, [r3, #24]
 8008c0e:	623b      	str	r3, [r7, #32]
 8008c10:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	e0d3      	b.n	8008dcc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	d02e      	beq.n	8008c88 <I2C_Master_ADDR+0x1b2>
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	2b20      	cmp	r3, #32
 8008c2e:	d02b      	beq.n	8008c88 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c32:	2b12      	cmp	r3, #18
 8008c34:	d102      	bne.n	8008c3c <I2C_Master_ADDR+0x166>
 8008c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d125      	bne.n	8008c88 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	2b04      	cmp	r3, #4
 8008c40:	d00e      	beq.n	8008c60 <I2C_Master_ADDR+0x18a>
 8008c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d00b      	beq.n	8008c60 <I2C_Master_ADDR+0x18a>
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	2b10      	cmp	r3, #16
 8008c4c:	d008      	beq.n	8008c60 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	e007      	b.n	8008c70 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008c6e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	61fb      	str	r3, [r7, #28]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	61fb      	str	r3, [r7, #28]
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	e0a1      	b.n	8008dcc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c96:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008c98:	2300      	movs	r3, #0
 8008c9a:	61bb      	str	r3, [r7, #24]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	61bb      	str	r3, [r7, #24]
 8008cac:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	e085      	b.n	8008dcc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d14d      	bne.n	8008d66 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d016      	beq.n	8008cfe <I2C_Master_ADDR+0x228>
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	2b02      	cmp	r3, #2
 8008cd4:	d013      	beq.n	8008cfe <I2C_Master_ADDR+0x228>
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd8:	2b10      	cmp	r3, #16
 8008cda:	d010      	beq.n	8008cfe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cea:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e007      	b.n	8008d0e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d0c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d1c:	d117      	bne.n	8008d4e <I2C_Master_ADDR+0x278>
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d24:	d00b      	beq.n	8008d3e <I2C_Master_ADDR+0x268>
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d008      	beq.n	8008d3e <I2C_Master_ADDR+0x268>
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d005      	beq.n	8008d3e <I2C_Master_ADDR+0x268>
 8008d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d34:	2b10      	cmp	r3, #16
 8008d36:	d002      	beq.n	8008d3e <I2C_Master_ADDR+0x268>
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	2b20      	cmp	r3, #32
 8008d3c:	d107      	bne.n	8008d4e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008d4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	617b      	str	r3, [r7, #20]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	617b      	str	r3, [r7, #20]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	e032      	b.n	8008dcc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d74:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d84:	d117      	bne.n	8008db6 <I2C_Master_ADDR+0x2e0>
 8008d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008d8c:	d00b      	beq.n	8008da6 <I2C_Master_ADDR+0x2d0>
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d008      	beq.n	8008da6 <I2C_Master_ADDR+0x2d0>
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	2b08      	cmp	r3, #8
 8008d98:	d005      	beq.n	8008da6 <I2C_Master_ADDR+0x2d0>
 8008d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9c:	2b10      	cmp	r3, #16
 8008d9e:	d002      	beq.n	8008da6 <I2C_Master_ADDR+0x2d0>
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d107      	bne.n	8008db6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008db4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008db6:	2300      	movs	r3, #0
 8008db8:	613b      	str	r3, [r7, #16]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	613b      	str	r3, [r7, #16]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	613b      	str	r3, [r7, #16]
 8008dca:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008dd2:	e00b      	b.n	8008dec <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	60fb      	str	r3, [r7, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	68fb      	ldr	r3, [r7, #12]
}
 8008dea:	e7ff      	b.n	8008dec <I2C_Master_ADDR+0x316>
 8008dec:	bf00      	nop
 8008dee:	3744      	adds	r7, #68	; 0x44
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e06:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d02b      	beq.n	8008e6a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	781a      	ldrb	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e22:	1c5a      	adds	r2, r3, #1
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d114      	bne.n	8008e6a <I2C_SlaveTransmit_TXE+0x72>
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	2b29      	cmp	r3, #41	; 0x29
 8008e44:	d111      	bne.n	8008e6a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e54:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2221      	movs	r2, #33	; 0x21
 8008e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2228      	movs	r2, #40	; 0x28
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7ff f9e7 	bl	8008238 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d011      	beq.n	8008ea8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e88:	781a      	ldrb	r2, [r3, #0]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e94:	1c5a      	adds	r2, r3, #1
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d02c      	beq.n	8008f28 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	b2d2      	uxtb	r2, r2
 8008eda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	1c5a      	adds	r2, r3, #1
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d114      	bne.n	8008f28 <I2C_SlaveReceive_RXNE+0x74>
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2b2a      	cmp	r3, #42	; 0x2a
 8008f02:	d111      	bne.n	8008f28 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f12:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2222      	movs	r2, #34	; 0x22
 8008f18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2228      	movs	r2, #40	; 0x28
 8008f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f7ff f992 	bl	800824c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008f28:	bf00      	nop
 8008f2a:	3710      	adds	r7, #16
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d012      	beq.n	8008f68 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	3b01      	subs	r3, #1
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008f68:	bf00      	nop
 8008f6a:	370c      	adds	r7, #12
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f8e:	2b28      	cmp	r3, #40	; 0x28
 8008f90:	d127      	bne.n	8008fe2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	089b      	lsrs	r3, r3, #2
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	09db      	lsrs	r3, r3, #7
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d103      	bne.n	8008fc6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	81bb      	strh	r3, [r7, #12]
 8008fc4:	e002      	b.n	8008fcc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008fd4:	89ba      	ldrh	r2, [r7, #12]
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff f940 	bl	8008260 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008fe0:	e00e      	b.n	8009000 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	60bb      	str	r3, [r7, #8]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	60bb      	str	r3, [r7, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	60bb      	str	r3, [r7, #8]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8009000:	bf00      	nop
 8009002:	3710      	adds	r7, #16
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009016:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685a      	ldr	r2, [r3, #4]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009026:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8009028:	2300      	movs	r3, #0
 800902a:	60bb      	str	r3, [r7, #8]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	60bb      	str	r3, [r7, #8]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0201 	orr.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009054:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009064:	d172      	bne.n	800914c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	2b22      	cmp	r3, #34	; 0x22
 800906a:	d002      	beq.n	8009072 <I2C_Slave_STOPF+0x6a>
 800906c:	7bfb      	ldrb	r3, [r7, #15]
 800906e:	2b2a      	cmp	r3, #42	; 0x2a
 8009070:	d135      	bne.n	80090de <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	b29a      	uxth	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009084:	b29b      	uxth	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d005      	beq.n	8009096 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908e:	f043 0204 	orr.w	r2, r3, #4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685a      	ldr	r2, [r3, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090a4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fd ff68 	bl	8006f80 <HAL_DMA_GetState>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d049      	beq.n	800914a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ba:	4a69      	ldr	r2, [pc, #420]	; (8009260 <I2C_Slave_STOPF+0x258>)
 80090bc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fd fdb0 	bl	8006c28 <HAL_DMA_Abort_IT>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d03d      	beq.n	800914a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80090dc:	e035      	b.n	800914a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f043 0204 	orr.w	r2, r3, #4
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009110:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009116:	4618      	mov	r0, r3
 8009118:	f7fd ff32 	bl	8006f80 <HAL_DMA_GetState>
 800911c:	4603      	mov	r3, r0
 800911e:	2b01      	cmp	r3, #1
 8009120:	d014      	beq.n	800914c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009126:	4a4e      	ldr	r2, [pc, #312]	; (8009260 <I2C_Slave_STOPF+0x258>)
 8009128:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912e:	4618      	mov	r0, r3
 8009130:	f7fd fd7a 	bl	8006c28 <HAL_DMA_Abort_IT>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d008      	beq.n	800914c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
 8009148:	e000      	b.n	800914c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800914a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d03e      	beq.n	80091d4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	f003 0304 	and.w	r3, r3, #4
 8009160:	2b04      	cmp	r3, #4
 8009162:	d112      	bne.n	800918a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	691a      	ldr	r2, [r3, #16]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	b2d2      	uxtb	r2, r2
 8009170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009180:	b29b      	uxth	r3, r3
 8009182:	3b01      	subs	r3, #1
 8009184:	b29a      	uxth	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d112      	bne.n	80091be <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	691a      	ldr	r2, [r3, #16]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	b2d2      	uxtb	r2, r2
 80091a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d005      	beq.n	80091d4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091cc:	f043 0204 	orr.w	r2, r3, #4
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f8b3 	bl	8009348 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80091e2:	e039      	b.n	8009258 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	2b2a      	cmp	r3, #42	; 0x2a
 80091e8:	d109      	bne.n	80091fe <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2228      	movs	r2, #40	; 0x28
 80091f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7ff f827 	bl	800824c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009204:	b2db      	uxtb	r3, r3
 8009206:	2b28      	cmp	r3, #40	; 0x28
 8009208:	d111      	bne.n	800922e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4a15      	ldr	r2, [pc, #84]	; (8009264 <I2C_Slave_STOPF+0x25c>)
 800920e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff f828 	bl	800827c <HAL_I2C_ListenCpltCallback>
}
 800922c:	e014      	b.n	8009258 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	2b22      	cmp	r3, #34	; 0x22
 8009234:	d002      	beq.n	800923c <I2C_Slave_STOPF+0x234>
 8009236:	7bfb      	ldrb	r3, [r7, #15]
 8009238:	2b22      	cmp	r3, #34	; 0x22
 800923a:	d10d      	bne.n	8009258 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2220      	movs	r2, #32
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fe fffa 	bl	800824c <HAL_I2C_SlaveRxCpltCallback>
}
 8009258:	bf00      	nop
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	0800984d 	.word	0x0800984d
 8009264:	ffff0000 	.word	0xffff0000

08009268 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009276:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800927c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	2b08      	cmp	r3, #8
 8009282:	d002      	beq.n	800928a <I2C_Slave_AF+0x22>
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	2b20      	cmp	r3, #32
 8009288:	d129      	bne.n	80092de <I2C_Slave_AF+0x76>
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b28      	cmp	r3, #40	; 0x28
 800928e:	d126      	bne.n	80092de <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a2c      	ldr	r2, [pc, #176]	; (8009344 <I2C_Slave_AF+0xdc>)
 8009294:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80092a4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80092ae:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092be:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2220      	movs	r2, #32
 80092ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2200      	movs	r2, #0
 80092d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7fe ffd0 	bl	800827c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80092dc:	e02e      	b.n	800933c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b21      	cmp	r3, #33	; 0x21
 80092e2:	d126      	bne.n	8009332 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a17      	ldr	r2, [pc, #92]	; (8009344 <I2C_Slave_AF+0xdc>)
 80092e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2221      	movs	r2, #33	; 0x21
 80092ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2220      	movs	r2, #32
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800930e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009318:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009328:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7fe ff84 	bl	8008238 <HAL_I2C_SlaveTxCpltCallback>
}
 8009330:	e004      	b.n	800933c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800933a:	615a      	str	r2, [r3, #20]
}
 800933c:	bf00      	nop
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	ffff0000 	.word	0xffff0000

08009348 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009356:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800935e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b10      	cmp	r3, #16
 8009364:	d002      	beq.n	800936c <I2C_ITError+0x24>
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b40      	cmp	r3, #64	; 0x40
 800936a:	d10a      	bne.n	8009382 <I2C_ITError+0x3a>
 800936c:	7bfb      	ldrb	r3, [r7, #15]
 800936e:	2b22      	cmp	r3, #34	; 0x22
 8009370:	d107      	bne.n	8009382 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009380:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009388:	2b28      	cmp	r3, #40	; 0x28
 800938a:	d107      	bne.n	800939c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2228      	movs	r2, #40	; 0x28
 8009396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800939a:	e015      	b.n	80093c8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093aa:	d00a      	beq.n	80093c2 <I2C_ITError+0x7a>
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	2b60      	cmp	r3, #96	; 0x60
 80093b0:	d007      	beq.n	80093c2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093d6:	d162      	bne.n	800949e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093e6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d020      	beq.n	8009438 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	4a6a      	ldr	r2, [pc, #424]	; (80095a4 <I2C_ITError+0x25c>)
 80093fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	4618      	mov	r0, r3
 8009404:	f7fd fc10 	bl	8006c28 <HAL_DMA_Abort_IT>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	f000 8089 	beq.w	8009522 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 0201 	bic.w	r2, r2, #1
 800941e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800942c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009432:	4610      	mov	r0, r2
 8009434:	4798      	blx	r3
 8009436:	e074      	b.n	8009522 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	4a59      	ldr	r2, [pc, #356]	; (80095a4 <I2C_ITError+0x25c>)
 800943e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	4618      	mov	r0, r3
 8009446:	f7fd fbef 	bl	8006c28 <HAL_DMA_Abort_IT>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d068      	beq.n	8009522 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800945a:	2b40      	cmp	r3, #64	; 0x40
 800945c:	d10b      	bne.n	8009476 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	b2d2      	uxtb	r2, r2
 800946a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009498:	4610      	mov	r0, r2
 800949a:	4798      	blx	r3
 800949c:	e041      	b.n	8009522 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b60      	cmp	r3, #96	; 0x60
 80094a8:	d125      	bne.n	80094f6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	695b      	ldr	r3, [r3, #20]
 80094be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c2:	2b40      	cmp	r3, #64	; 0x40
 80094c4:	d10b      	bne.n	80094de <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	1c5a      	adds	r2, r3, #1
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f022 0201 	bic.w	r2, r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fe feec 	bl	80082cc <HAL_I2C_AbortCpltCallback>
 80094f4:	e015      	b.n	8009522 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	695b      	ldr	r3, [r3, #20]
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b40      	cmp	r3, #64	; 0x40
 8009502:	d10b      	bne.n	800951c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691a      	ldr	r2, [r3, #16]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950e:	b2d2      	uxtb	r2, r2
 8009510:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	1c5a      	adds	r2, r3, #1
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fe fecb 	bl	80082b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009526:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10e      	bne.n	8009550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009538:	2b00      	cmp	r3, #0
 800953a:	d109      	bne.n	8009550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8009542:	2b00      	cmp	r3, #0
 8009544:	d104      	bne.n	8009550 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800954c:	2b00      	cmp	r3, #0
 800954e:	d007      	beq.n	8009560 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800955e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009566:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b04      	cmp	r3, #4
 8009572:	d113      	bne.n	800959c <I2C_ITError+0x254>
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	2b28      	cmp	r3, #40	; 0x28
 8009578:	d110      	bne.n	800959c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a0a      	ldr	r2, [pc, #40]	; (80095a8 <I2C_ITError+0x260>)
 800957e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2220      	movs	r2, #32
 800958a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f7fe fe70 	bl	800827c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800959c:	bf00      	nop
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	0800984d 	.word	0x0800984d
 80095a8:	ffff0000 	.word	0xffff0000

080095ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	607a      	str	r2, [r7, #4]
 80095b6:	603b      	str	r3, [r7, #0]
 80095b8:	460b      	mov	r3, r1
 80095ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d006      	beq.n	80095d6 <I2C_MasterRequestWrite+0x2a>
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d003      	beq.n	80095d6 <I2C_MasterRequestWrite+0x2a>
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095d4:	d108      	bne.n	80095e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e00b      	b.n	8009600 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ec:	2b12      	cmp	r3, #18
 80095ee:	d107      	bne.n	8009600 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 f9c5 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 8009612:	4603      	mov	r3, r0
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00d      	beq.n	8009634 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009626:	d103      	bne.n	8009630 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800962e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e035      	b.n	80096a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800963c:	d108      	bne.n	8009650 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800963e:	897b      	ldrh	r3, [r7, #10]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	461a      	mov	r2, r3
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800964c:	611a      	str	r2, [r3, #16]
 800964e:	e01b      	b.n	8009688 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009650:	897b      	ldrh	r3, [r7, #10]
 8009652:	11db      	asrs	r3, r3, #7
 8009654:	b2db      	uxtb	r3, r3
 8009656:	f003 0306 	and.w	r3, r3, #6
 800965a:	b2db      	uxtb	r3, r3
 800965c:	f063 030f 	orn	r3, r3, #15
 8009660:	b2da      	uxtb	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	490e      	ldr	r1, [pc, #56]	; (80096a8 <I2C_MasterRequestWrite+0xfc>)
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f9eb 	bl	8009a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e010      	b.n	80096a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800967e:	897b      	ldrh	r3, [r7, #10]
 8009680:	b2da      	uxtb	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	4907      	ldr	r1, [pc, #28]	; (80096ac <I2C_MasterRequestWrite+0x100>)
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 f9db 	bl	8009a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e000      	b.n	80096a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3718      	adds	r7, #24
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	00010008 	.word	0x00010008
 80096ac:	00010002 	.word	0x00010002

080096b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	603b      	str	r3, [r7, #0]
 80096bc:	460b      	mov	r3, r1
 80096be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	2b08      	cmp	r3, #8
 80096da:	d006      	beq.n	80096ea <I2C_MasterRequestRead+0x3a>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d003      	beq.n	80096ea <I2C_MasterRequestRead+0x3a>
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80096e8:	d108      	bne.n	80096fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096f8:	601a      	str	r2, [r3, #0]
 80096fa:	e00b      	b.n	8009714 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009700:	2b11      	cmp	r3, #17
 8009702:	d107      	bne.n	8009714 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009712:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f93b 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00d      	beq.n	8009748 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800973a:	d103      	bne.n	8009744 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009744:	2303      	movs	r3, #3
 8009746:	e079      	b.n	800983c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	691b      	ldr	r3, [r3, #16]
 800974c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009750:	d108      	bne.n	8009764 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009752:	897b      	ldrh	r3, [r7, #10]
 8009754:	b2db      	uxtb	r3, r3
 8009756:	f043 0301 	orr.w	r3, r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	611a      	str	r2, [r3, #16]
 8009762:	e05f      	b.n	8009824 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009764:	897b      	ldrh	r3, [r7, #10]
 8009766:	11db      	asrs	r3, r3, #7
 8009768:	b2db      	uxtb	r3, r3
 800976a:	f003 0306 	and.w	r3, r3, #6
 800976e:	b2db      	uxtb	r3, r3
 8009770:	f063 030f 	orn	r3, r3, #15
 8009774:	b2da      	uxtb	r2, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	4930      	ldr	r1, [pc, #192]	; (8009844 <I2C_MasterRequestRead+0x194>)
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f000 f961 	bl	8009a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e054      	b.n	800983c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009792:	897b      	ldrh	r3, [r7, #10]
 8009794:	b2da      	uxtb	r2, r3
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	4929      	ldr	r1, [pc, #164]	; (8009848 <I2C_MasterRequestRead+0x198>)
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 f951 	bl	8009a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	e044      	b.n	800983c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097b2:	2300      	movs	r3, #0
 80097b4:	613b      	str	r3, [r7, #16]
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	613b      	str	r3, [r7, #16]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	613b      	str	r3, [r7, #16]
 80097c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 f8d9 	bl	800999c <I2C_WaitOnFlagUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00d      	beq.n	800980c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097fe:	d103      	bne.n	8009808 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009806:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e017      	b.n	800983c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800980c:	897b      	ldrh	r3, [r7, #10]
 800980e:	11db      	asrs	r3, r3, #7
 8009810:	b2db      	uxtb	r3, r3
 8009812:	f003 0306 	and.w	r3, r3, #6
 8009816:	b2db      	uxtb	r3, r3
 8009818:	f063 030e 	orn	r3, r3, #14
 800981c:	b2da      	uxtb	r2, r3
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	4907      	ldr	r1, [pc, #28]	; (8009848 <I2C_MasterRequestRead+0x198>)
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f90d 	bl	8009a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	00010008 	.word	0x00010008
 8009848:	00010002 	.word	0x00010002

0800984c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b086      	sub	sp, #24
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009864:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009866:	4b4b      	ldr	r3, [pc, #300]	; (8009994 <I2C_DMAAbort+0x148>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	08db      	lsrs	r3, r3, #3
 800986c:	4a4a      	ldr	r2, [pc, #296]	; (8009998 <I2C_DMAAbort+0x14c>)
 800986e:	fba2 2303 	umull	r2, r3, r2, r3
 8009872:	0a1a      	lsrs	r2, r3, #8
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	00da      	lsls	r2, r3, #3
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988a:	f043 0220 	orr.w	r2, r3, #32
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009892:	e00a      	b.n	80098aa <I2C_DMAAbort+0x5e>
    }
    count--;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3b01      	subs	r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098a8:	d0ea      	beq.n	8009880 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b6:	2200      	movs	r2, #0
 80098b8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d003      	beq.n	80098ca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c6:	2200      	movs	r2, #0
 80098c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098d8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	2200      	movs	r2, #0
 80098de:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d003      	beq.n	80098f0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ec:	2200      	movs	r2, #0
 80098ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	2200      	movs	r2, #0
 80098fe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f022 0201 	bic.w	r2, r2, #1
 800990e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b60      	cmp	r3, #96	; 0x60
 800991a:	d10e      	bne.n	800993a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	2220      	movs	r2, #32
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	2200      	movs	r2, #0
 8009930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009932:	6978      	ldr	r0, [r7, #20]
 8009934:	f7fe fcca 	bl	80082cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009938:	e027      	b.n	800998a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800993a:	7cfb      	ldrb	r3, [r7, #19]
 800993c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009940:	2b28      	cmp	r3, #40	; 0x28
 8009942:	d117      	bne.n	8009974 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f042 0201 	orr.w	r2, r2, #1
 8009952:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009962:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	2200      	movs	r2, #0
 8009968:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2228      	movs	r2, #40	; 0x28
 800996e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009972:	e007      	b.n	8009984 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2220      	movs	r2, #32
 8009978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009984:	6978      	ldr	r0, [r7, #20]
 8009986:	f7fe fc97 	bl	80082b8 <HAL_I2C_ErrorCallback>
}
 800998a:	bf00      	nop
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000234 	.word	0x20000234
 8009998:	14f8b589 	.word	0x14f8b589

0800999c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	603b      	str	r3, [r7, #0]
 80099a8:	4613      	mov	r3, r2
 80099aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099ac:	e025      	b.n	80099fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b4:	d021      	beq.n	80099fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b6:	f7fc faa1 	bl	8005efc <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d302      	bcc.n	80099cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d116      	bne.n	80099fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2220      	movs	r2, #32
 80099d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e6:	f043 0220 	orr.w	r2, r3, #32
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	e023      	b.n	8009a42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	0c1b      	lsrs	r3, r3, #16
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d10d      	bne.n	8009a20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	43da      	mvns	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf0c      	ite	eq
 8009a16:	2301      	moveq	r3, #1
 8009a18:	2300      	movne	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	e00c      	b.n	8009a3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	43da      	mvns	r2, r3
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	4013      	ands	r3, r2
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	bf0c      	ite	eq
 8009a32:	2301      	moveq	r3, #1
 8009a34:	2300      	movne	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	461a      	mov	r2, r3
 8009a3a:	79fb      	ldrb	r3, [r7, #7]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d0b6      	beq.n	80099ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3710      	adds	r7, #16
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a58:	e051      	b.n	8009afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a68:	d123      	bne.n	8009ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	f043 0204 	orr.w	r2, r3, #4
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e046      	b.n	8009b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab8:	d021      	beq.n	8009afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aba:	f7fc fa1f 	bl	8005efc <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d302      	bcc.n	8009ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d116      	bne.n	8009afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aea:	f043 0220 	orr.w	r2, r3, #32
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e020      	b.n	8009b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	0c1b      	lsrs	r3, r3, #16
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d10c      	bne.n	8009b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	43da      	mvns	r2, r3
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4013      	ands	r3, r2
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	bf14      	ite	ne
 8009b1a:	2301      	movne	r3, #1
 8009b1c:	2300      	moveq	r3, #0
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	e00b      	b.n	8009b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	43da      	mvns	r2, r3
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	bf14      	ite	ne
 8009b34:	2301      	movne	r3, #1
 8009b36:	2300      	moveq	r3, #0
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d18d      	bne.n	8009a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b54:	e02d      	b.n	8009bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 f900 	bl	8009d5c <I2C_IsAcknowledgeFailed>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d001      	beq.n	8009b66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e02d      	b.n	8009bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6c:	d021      	beq.n	8009bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b6e:	f7fc f9c5 	bl	8005efc <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d302      	bcc.n	8009b84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d116      	bne.n	8009bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2220      	movs	r2, #32
 8009b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9e:	f043 0220 	orr.w	r2, r3, #32
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e007      	b.n	8009bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bbc:	2b80      	cmp	r3, #128	; 0x80
 8009bbe:	d1ca      	bne.n	8009b56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b084      	sub	sp, #16
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	60f8      	str	r0, [r7, #12]
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bd6:	e02d      	b.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f8bf 	bl	8009d5c <I2C_IsAcknowledgeFailed>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e02d      	b.n	8009c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bee:	d021      	beq.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bf0:	f7fc f984 	bl	8005efc <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d302      	bcc.n	8009c06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d116      	bne.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2220      	movs	r2, #32
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c20:	f043 0220 	orr.w	r2, r3, #32
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e007      	b.n	8009c44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
 8009c3a:	f003 0304 	and.w	r3, r3, #4
 8009c3e:	2b04      	cmp	r3, #4
 8009c40:	d1ca      	bne.n	8009bd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3710      	adds	r7, #16
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c58:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	08db      	lsrs	r3, r3, #3
 8009c5e:	4a13      	ldr	r2, [pc, #76]	; (8009cac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009c60:	fba2 2303 	umull	r2, r3, r2, r3
 8009c64:	0a1a      	lsrs	r2, r3, #8
 8009c66:	4613      	mov	r3, r2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	3b01      	subs	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d107      	bne.n	8009c8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	f043 0220 	orr.w	r2, r3, #32
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e008      	b.n	8009c9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c98:	d0e9      	beq.n	8009c6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	20000234 	.word	0x20000234
 8009cac:	14f8b589 	.word	0x14f8b589

08009cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cbc:	e042      	b.n	8009d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b10      	cmp	r3, #16
 8009cca:	d119      	bne.n	8009d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f06f 0210 	mvn.w	r2, #16
 8009cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e029      	b.n	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d00:	f7fc f8fc 	bl	8005efc <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d302      	bcc.n	8009d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d116      	bne.n	8009d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	f043 0220 	orr.w	r2, r3, #32
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e007      	b.n	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b40      	cmp	r3, #64	; 0x40
 8009d50:	d1b5      	bne.n	8009cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d72:	d11b      	bne.n	8009dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	f043 0204 	orr.w	r2, r3, #4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e000      	b.n	8009dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr

08009dba <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009dba:	b480      	push	{r7}
 8009dbc:	b083      	sub	sp, #12
 8009dbe:	af00      	add	r7, sp, #0
 8009dc0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009dca:	d103      	bne.n	8009dd4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009dd2:	e007      	b.n	8009de4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009ddc:	d102      	bne.n	8009de4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2208      	movs	r2, #8
 8009de2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b086      	sub	sp, #24
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d101      	bne.n	8009e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e267      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d075      	beq.n	8009efa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e0e:	4b88      	ldr	r3, [pc, #544]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	f003 030c 	and.w	r3, r3, #12
 8009e16:	2b04      	cmp	r3, #4
 8009e18:	d00c      	beq.n	8009e34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e1a:	4b85      	ldr	r3, [pc, #532]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e22:	2b08      	cmp	r3, #8
 8009e24:	d112      	bne.n	8009e4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e26:	4b82      	ldr	r3, [pc, #520]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e32:	d10b      	bne.n	8009e4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e34:	4b7e      	ldr	r3, [pc, #504]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d05b      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x108>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d157      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e242      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e54:	d106      	bne.n	8009e64 <HAL_RCC_OscConfig+0x74>
 8009e56:	4b76      	ldr	r3, [pc, #472]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a75      	ldr	r2, [pc, #468]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	e01d      	b.n	8009ea0 <HAL_RCC_OscConfig+0xb0>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e6c:	d10c      	bne.n	8009e88 <HAL_RCC_OscConfig+0x98>
 8009e6e:	4b70      	ldr	r3, [pc, #448]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a6f      	ldr	r2, [pc, #444]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	4b6d      	ldr	r3, [pc, #436]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a6c      	ldr	r2, [pc, #432]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e00b      	b.n	8009ea0 <HAL_RCC_OscConfig+0xb0>
 8009e88:	4b69      	ldr	r3, [pc, #420]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a68      	ldr	r2, [pc, #416]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	4b66      	ldr	r3, [pc, #408]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a65      	ldr	r2, [pc, #404]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d013      	beq.n	8009ed0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ea8:	f7fc f828 	bl	8005efc <HAL_GetTick>
 8009eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009eae:	e008      	b.n	8009ec2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009eb0:	f7fc f824 	bl	8005efc <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	2b64      	cmp	r3, #100	; 0x64
 8009ebc:	d901      	bls.n	8009ec2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e207      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ec2:	4b5b      	ldr	r3, [pc, #364]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d0f0      	beq.n	8009eb0 <HAL_RCC_OscConfig+0xc0>
 8009ece:	e014      	b.n	8009efa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ed0:	f7fc f814 	bl	8005efc <HAL_GetTick>
 8009ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ed8:	f7fc f810 	bl	8005efc <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b64      	cmp	r3, #100	; 0x64
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e1f3      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eea:	4b51      	ldr	r3, [pc, #324]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <HAL_RCC_OscConfig+0xe8>
 8009ef6:	e000      	b.n	8009efa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0302 	and.w	r3, r3, #2
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d063      	beq.n	8009fce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f06:	4b4a      	ldr	r3, [pc, #296]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f003 030c 	and.w	r3, r3, #12
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00b      	beq.n	8009f2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f12:	4b47      	ldr	r3, [pc, #284]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009f1a:	2b08      	cmp	r3, #8
 8009f1c:	d11c      	bne.n	8009f58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f1e:	4b44      	ldr	r3, [pc, #272]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d116      	bne.n	8009f58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f2a:	4b41      	ldr	r3, [pc, #260]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d005      	beq.n	8009f42 <HAL_RCC_OscConfig+0x152>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	2b01      	cmp	r3, #1
 8009f3c:	d001      	beq.n	8009f42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e1c7      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f42:	4b3b      	ldr	r3, [pc, #236]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	00db      	lsls	r3, r3, #3
 8009f50:	4937      	ldr	r1, [pc, #220]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f52:	4313      	orrs	r3, r2
 8009f54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f56:	e03a      	b.n	8009fce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d020      	beq.n	8009fa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f60:	4b34      	ldr	r3, [pc, #208]	; (800a034 <HAL_RCC_OscConfig+0x244>)
 8009f62:	2201      	movs	r2, #1
 8009f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f66:	f7fb ffc9 	bl	8005efc <HAL_GetTick>
 8009f6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f6c:	e008      	b.n	8009f80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f6e:	f7fb ffc5 	bl	8005efc <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d901      	bls.n	8009f80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e1a8      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f80:	4b2b      	ldr	r3, [pc, #172]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f003 0302 	and.w	r3, r3, #2
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0f0      	beq.n	8009f6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f8c:	4b28      	ldr	r3, [pc, #160]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	4925      	ldr	r1, [pc, #148]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	600b      	str	r3, [r1, #0]
 8009fa0:	e015      	b.n	8009fce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fa2:	4b24      	ldr	r3, [pc, #144]	; (800a034 <HAL_RCC_OscConfig+0x244>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fa8:	f7fb ffa8 	bl	8005efc <HAL_GetTick>
 8009fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009fb0:	f7fb ffa4 	bl	8005efc <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e187      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fc2:	4b1b      	ldr	r3, [pc, #108]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 0308 	and.w	r3, r3, #8
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d036      	beq.n	800a048 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d016      	beq.n	800a010 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fe2:	4b15      	ldr	r3, [pc, #84]	; (800a038 <HAL_RCC_OscConfig+0x248>)
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fe8:	f7fb ff88 	bl	8005efc <HAL_GetTick>
 8009fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ff0:	f7fb ff84 	bl	8005efc <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e167      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a002:	4b0b      	ldr	r3, [pc, #44]	; (800a030 <HAL_RCC_OscConfig+0x240>)
 800a004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x200>
 800a00e:	e01b      	b.n	800a048 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a010:	4b09      	ldr	r3, [pc, #36]	; (800a038 <HAL_RCC_OscConfig+0x248>)
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a016:	f7fb ff71 	bl	8005efc <HAL_GetTick>
 800a01a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a01c:	e00e      	b.n	800a03c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a01e:	f7fb ff6d 	bl	8005efc <HAL_GetTick>
 800a022:	4602      	mov	r2, r0
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d907      	bls.n	800a03c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e150      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
 800a030:	40023800 	.word	0x40023800
 800a034:	42470000 	.word	0x42470000
 800a038:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a03c:	4b88      	ldr	r3, [pc, #544]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a03e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a040:	f003 0302 	and.w	r3, r3, #2
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1ea      	bne.n	800a01e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0304 	and.w	r3, r3, #4
 800a050:	2b00      	cmp	r3, #0
 800a052:	f000 8097 	beq.w	800a184 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a056:	2300      	movs	r3, #0
 800a058:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a05a:	4b81      	ldr	r3, [pc, #516]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a062:	2b00      	cmp	r3, #0
 800a064:	d10f      	bne.n	800a086 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a066:	2300      	movs	r3, #0
 800a068:	60bb      	str	r3, [r7, #8]
 800a06a:	4b7d      	ldr	r3, [pc, #500]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06e:	4a7c      	ldr	r2, [pc, #496]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a074:	6413      	str	r3, [r2, #64]	; 0x40
 800a076:	4b7a      	ldr	r3, [pc, #488]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a07e:	60bb      	str	r3, [r7, #8]
 800a080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a082:	2301      	movs	r3, #1
 800a084:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a086:	4b77      	ldr	r3, [pc, #476]	; (800a264 <HAL_RCC_OscConfig+0x474>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d118      	bne.n	800a0c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a092:	4b74      	ldr	r3, [pc, #464]	; (800a264 <HAL_RCC_OscConfig+0x474>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a73      	ldr	r2, [pc, #460]	; (800a264 <HAL_RCC_OscConfig+0x474>)
 800a098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a09c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a09e:	f7fb ff2d 	bl	8005efc <HAL_GetTick>
 800a0a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0a4:	e008      	b.n	800a0b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0a6:	f7fb ff29 	bl	8005efc <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d901      	bls.n	800a0b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e10c      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a0b8:	4b6a      	ldr	r3, [pc, #424]	; (800a264 <HAL_RCC_OscConfig+0x474>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d0f0      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d106      	bne.n	800a0da <HAL_RCC_OscConfig+0x2ea>
 800a0cc:	4b64      	ldr	r3, [pc, #400]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d0:	4a63      	ldr	r2, [pc, #396]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a0d2:	f043 0301 	orr.w	r3, r3, #1
 800a0d6:	6713      	str	r3, [r2, #112]	; 0x70
 800a0d8:	e01c      	b.n	800a114 <HAL_RCC_OscConfig+0x324>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	2b05      	cmp	r3, #5
 800a0e0:	d10c      	bne.n	800a0fc <HAL_RCC_OscConfig+0x30c>
 800a0e2:	4b5f      	ldr	r3, [pc, #380]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e6:	4a5e      	ldr	r2, [pc, #376]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a0e8:	f043 0304 	orr.w	r3, r3, #4
 800a0ec:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ee:	4b5c      	ldr	r3, [pc, #368]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f2:	4a5b      	ldr	r2, [pc, #364]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a0f4:	f043 0301 	orr.w	r3, r3, #1
 800a0f8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0fa:	e00b      	b.n	800a114 <HAL_RCC_OscConfig+0x324>
 800a0fc:	4b58      	ldr	r3, [pc, #352]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a100:	4a57      	ldr	r2, [pc, #348]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a102:	f023 0301 	bic.w	r3, r3, #1
 800a106:	6713      	str	r3, [r2, #112]	; 0x70
 800a108:	4b55      	ldr	r3, [pc, #340]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10c:	4a54      	ldr	r2, [pc, #336]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a10e:	f023 0304 	bic.w	r3, r3, #4
 800a112:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d015      	beq.n	800a148 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a11c:	f7fb feee 	bl	8005efc <HAL_GetTick>
 800a120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a122:	e00a      	b.n	800a13a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a124:	f7fb feea 	bl	8005efc <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a132:	4293      	cmp	r3, r2
 800a134:	d901      	bls.n	800a13a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e0cb      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a13a:	4b49      	ldr	r3, [pc, #292]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a13c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0ee      	beq.n	800a124 <HAL_RCC_OscConfig+0x334>
 800a146:	e014      	b.n	800a172 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a148:	f7fb fed8 	bl	8005efc <HAL_GetTick>
 800a14c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a14e:	e00a      	b.n	800a166 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a150:	f7fb fed4 	bl	8005efc <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15e:	4293      	cmp	r3, r2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e0b5      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a166:	4b3e      	ldr	r3, [pc, #248]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1ee      	bne.n	800a150 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a172:	7dfb      	ldrb	r3, [r7, #23]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d105      	bne.n	800a184 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a178:	4b39      	ldr	r3, [pc, #228]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17c:	4a38      	ldr	r2, [pc, #224]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a17e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a182:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 80a1 	beq.w	800a2d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a18e:	4b34      	ldr	r3, [pc, #208]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f003 030c 	and.w	r3, r3, #12
 800a196:	2b08      	cmp	r3, #8
 800a198:	d05c      	beq.n	800a254 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d141      	bne.n	800a226 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1a2:	4b31      	ldr	r3, [pc, #196]	; (800a268 <HAL_RCC_OscConfig+0x478>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1a8:	f7fb fea8 	bl	8005efc <HAL_GetTick>
 800a1ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1ae:	e008      	b.n	800a1c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1b0:	f7fb fea4 	bl	8005efc <HAL_GetTick>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	1ad3      	subs	r3, r2, r3
 800a1ba:	2b02      	cmp	r3, #2
 800a1bc:	d901      	bls.n	800a1c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e087      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1c2:	4b27      	ldr	r3, [pc, #156]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d1f0      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	69da      	ldr	r2, [r3, #28]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1dc:	019b      	lsls	r3, r3, #6
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e4:	085b      	lsrs	r3, r3, #1
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	041b      	lsls	r3, r3, #16
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f0:	061b      	lsls	r3, r3, #24
 800a1f2:	491b      	ldr	r1, [pc, #108]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1f8:	4b1b      	ldr	r3, [pc, #108]	; (800a268 <HAL_RCC_OscConfig+0x478>)
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1fe:	f7fb fe7d 	bl	8005efc <HAL_GetTick>
 800a202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a204:	e008      	b.n	800a218 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a206:	f7fb fe79 	bl	8005efc <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d901      	bls.n	800a218 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e05c      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a218:	4b11      	ldr	r3, [pc, #68]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d0f0      	beq.n	800a206 <HAL_RCC_OscConfig+0x416>
 800a224:	e054      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a226:	4b10      	ldr	r3, [pc, #64]	; (800a268 <HAL_RCC_OscConfig+0x478>)
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a22c:	f7fb fe66 	bl	8005efc <HAL_GetTick>
 800a230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a232:	e008      	b.n	800a246 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a234:	f7fb fe62 	bl	8005efc <HAL_GetTick>
 800a238:	4602      	mov	r2, r0
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	2b02      	cmp	r3, #2
 800a240:	d901      	bls.n	800a246 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e045      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a246:	4b06      	ldr	r3, [pc, #24]	; (800a260 <HAL_RCC_OscConfig+0x470>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f0      	bne.n	800a234 <HAL_RCC_OscConfig+0x444>
 800a252:	e03d      	b.n	800a2d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d107      	bne.n	800a26c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e038      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
 800a260:	40023800 	.word	0x40023800
 800a264:	40007000 	.word	0x40007000
 800a268:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a26c:	4b1b      	ldr	r3, [pc, #108]	; (800a2dc <HAL_RCC_OscConfig+0x4ec>)
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d028      	beq.n	800a2cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a284:	429a      	cmp	r2, r3
 800a286:	d121      	bne.n	800a2cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a292:	429a      	cmp	r2, r3
 800a294:	d11a      	bne.n	800a2cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a296:	68fa      	ldr	r2, [r7, #12]
 800a298:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a29c:	4013      	ands	r3, r2
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d111      	bne.n	800a2cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b2:	085b      	lsrs	r3, r3, #1
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d107      	bne.n	800a2cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d001      	beq.n	800a2d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e000      	b.n	800a2d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3718      	adds	r7, #24
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	40023800 	.word	0x40023800

0800a2e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	e0cc      	b.n	800a48e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2f4:	4b68      	ldr	r3, [pc, #416]	; (800a498 <HAL_RCC_ClockConfig+0x1b8>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0307 	and.w	r3, r3, #7
 800a2fc:	683a      	ldr	r2, [r7, #0]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d90c      	bls.n	800a31c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a302:	4b65      	ldr	r3, [pc, #404]	; (800a498 <HAL_RCC_ClockConfig+0x1b8>)
 800a304:	683a      	ldr	r2, [r7, #0]
 800a306:	b2d2      	uxtb	r2, r2
 800a308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a30a:	4b63      	ldr	r3, [pc, #396]	; (800a498 <HAL_RCC_ClockConfig+0x1b8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0307 	and.w	r3, r3, #7
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	429a      	cmp	r2, r3
 800a316:	d001      	beq.n	800a31c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e0b8      	b.n	800a48e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b00      	cmp	r3, #0
 800a326:	d020      	beq.n	800a36a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b00      	cmp	r3, #0
 800a332:	d005      	beq.n	800a340 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a334:	4b59      	ldr	r3, [pc, #356]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	4a58      	ldr	r2, [pc, #352]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a33a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a33e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0308 	and.w	r3, r3, #8
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a34c:	4b53      	ldr	r3, [pc, #332]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	4a52      	ldr	r2, [pc, #328]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a356:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a358:	4b50      	ldr	r3, [pc, #320]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	689b      	ldr	r3, [r3, #8]
 800a364:	494d      	ldr	r1, [pc, #308]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a366:	4313      	orrs	r3, r2
 800a368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d044      	beq.n	800a400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d107      	bne.n	800a38e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a37e:	4b47      	ldr	r3, [pc, #284]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d119      	bne.n	800a3be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e07f      	b.n	800a48e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	2b02      	cmp	r3, #2
 800a394:	d003      	beq.n	800a39e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a39a:	2b03      	cmp	r3, #3
 800a39c:	d107      	bne.n	800a3ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a39e:	4b3f      	ldr	r3, [pc, #252]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d109      	bne.n	800a3be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e06f      	b.n	800a48e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3ae:	4b3b      	ldr	r3, [pc, #236]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f003 0302 	and.w	r3, r3, #2
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	e067      	b.n	800a48e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3be:	4b37      	ldr	r3, [pc, #220]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f023 0203 	bic.w	r2, r3, #3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	4934      	ldr	r1, [pc, #208]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3d0:	f7fb fd94 	bl	8005efc <HAL_GetTick>
 800a3d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3d6:	e00a      	b.n	800a3ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3d8:	f7fb fd90 	bl	8005efc <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e04f      	b.n	800a48e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ee:	4b2b      	ldr	r3, [pc, #172]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f003 020c 	and.w	r2, r3, #12
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d1eb      	bne.n	800a3d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a400:	4b25      	ldr	r3, [pc, #148]	; (800a498 <HAL_RCC_ClockConfig+0x1b8>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0307 	and.w	r3, r3, #7
 800a408:	683a      	ldr	r2, [r7, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d20c      	bcs.n	800a428 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a40e:	4b22      	ldr	r3, [pc, #136]	; (800a498 <HAL_RCC_ClockConfig+0x1b8>)
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a416:	4b20      	ldr	r3, [pc, #128]	; (800a498 <HAL_RCC_ClockConfig+0x1b8>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0307 	and.w	r3, r3, #7
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	429a      	cmp	r2, r3
 800a422:	d001      	beq.n	800a428 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e032      	b.n	800a48e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0304 	and.w	r3, r3, #4
 800a430:	2b00      	cmp	r3, #0
 800a432:	d008      	beq.n	800a446 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a434:	4b19      	ldr	r3, [pc, #100]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	4916      	ldr	r1, [pc, #88]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a442:	4313      	orrs	r3, r2
 800a444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0308 	and.w	r3, r3, #8
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d009      	beq.n	800a466 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a452:	4b12      	ldr	r3, [pc, #72]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	00db      	lsls	r3, r3, #3
 800a460:	490e      	ldr	r1, [pc, #56]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a462:	4313      	orrs	r3, r2
 800a464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a466:	f000 f821 	bl	800a4ac <HAL_RCC_GetSysClockFreq>
 800a46a:	4602      	mov	r2, r0
 800a46c:	4b0b      	ldr	r3, [pc, #44]	; (800a49c <HAL_RCC_ClockConfig+0x1bc>)
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	091b      	lsrs	r3, r3, #4
 800a472:	f003 030f 	and.w	r3, r3, #15
 800a476:	490a      	ldr	r1, [pc, #40]	; (800a4a0 <HAL_RCC_ClockConfig+0x1c0>)
 800a478:	5ccb      	ldrb	r3, [r1, r3]
 800a47a:	fa22 f303 	lsr.w	r3, r2, r3
 800a47e:	4a09      	ldr	r2, [pc, #36]	; (800a4a4 <HAL_RCC_ClockConfig+0x1c4>)
 800a480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a482:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <HAL_RCC_ClockConfig+0x1c8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4618      	mov	r0, r3
 800a488:	f7fb fcf4 	bl	8005e74 <HAL_InitTick>

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	40023c00 	.word	0x40023c00
 800a49c:	40023800 	.word	0x40023800
 800a4a0:	0800efdc 	.word	0x0800efdc
 800a4a4:	20000234 	.word	0x20000234
 800a4a8:	20000238 	.word	0x20000238

0800a4ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4b0:	b094      	sub	sp, #80	; 0x50
 800a4b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	647b      	str	r3, [r7, #68]	; 0x44
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4bc:	2300      	movs	r3, #0
 800a4be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4c4:	4b79      	ldr	r3, [pc, #484]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f003 030c 	and.w	r3, r3, #12
 800a4cc:	2b08      	cmp	r3, #8
 800a4ce:	d00d      	beq.n	800a4ec <HAL_RCC_GetSysClockFreq+0x40>
 800a4d0:	2b08      	cmp	r3, #8
 800a4d2:	f200 80e1 	bhi.w	800a698 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d002      	beq.n	800a4e0 <HAL_RCC_GetSysClockFreq+0x34>
 800a4da:	2b04      	cmp	r3, #4
 800a4dc:	d003      	beq.n	800a4e6 <HAL_RCC_GetSysClockFreq+0x3a>
 800a4de:	e0db      	b.n	800a698 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4e0:	4b73      	ldr	r3, [pc, #460]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a4e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a4e4:	e0db      	b.n	800a69e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4e6:	4b73      	ldr	r3, [pc, #460]	; (800a6b4 <HAL_RCC_GetSysClockFreq+0x208>)
 800a4e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a4ea:	e0d8      	b.n	800a69e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4ec:	4b6f      	ldr	r3, [pc, #444]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4f6:	4b6d      	ldr	r3, [pc, #436]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d063      	beq.n	800a5ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a502:	4b6a      	ldr	r3, [pc, #424]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	099b      	lsrs	r3, r3, #6
 800a508:	2200      	movs	r2, #0
 800a50a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a50c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a514:	633b      	str	r3, [r7, #48]	; 0x30
 800a516:	2300      	movs	r3, #0
 800a518:	637b      	str	r3, [r7, #52]	; 0x34
 800a51a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a51e:	4622      	mov	r2, r4
 800a520:	462b      	mov	r3, r5
 800a522:	f04f 0000 	mov.w	r0, #0
 800a526:	f04f 0100 	mov.w	r1, #0
 800a52a:	0159      	lsls	r1, r3, #5
 800a52c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a530:	0150      	lsls	r0, r2, #5
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4621      	mov	r1, r4
 800a538:	1a51      	subs	r1, r2, r1
 800a53a:	6139      	str	r1, [r7, #16]
 800a53c:	4629      	mov	r1, r5
 800a53e:	eb63 0301 	sbc.w	r3, r3, r1
 800a542:	617b      	str	r3, [r7, #20]
 800a544:	f04f 0200 	mov.w	r2, #0
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a550:	4659      	mov	r1, fp
 800a552:	018b      	lsls	r3, r1, #6
 800a554:	4651      	mov	r1, sl
 800a556:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a55a:	4651      	mov	r1, sl
 800a55c:	018a      	lsls	r2, r1, #6
 800a55e:	4651      	mov	r1, sl
 800a560:	ebb2 0801 	subs.w	r8, r2, r1
 800a564:	4659      	mov	r1, fp
 800a566:	eb63 0901 	sbc.w	r9, r3, r1
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	f04f 0300 	mov.w	r3, #0
 800a572:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a576:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a57a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a57e:	4690      	mov	r8, r2
 800a580:	4699      	mov	r9, r3
 800a582:	4623      	mov	r3, r4
 800a584:	eb18 0303 	adds.w	r3, r8, r3
 800a588:	60bb      	str	r3, [r7, #8]
 800a58a:	462b      	mov	r3, r5
 800a58c:	eb49 0303 	adc.w	r3, r9, r3
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	f04f 0200 	mov.w	r2, #0
 800a596:	f04f 0300 	mov.w	r3, #0
 800a59a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a59e:	4629      	mov	r1, r5
 800a5a0:	024b      	lsls	r3, r1, #9
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a5a8:	4621      	mov	r1, r4
 800a5aa:	024a      	lsls	r2, r1, #9
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5bc:	f7f6 fafa 	bl	8000bb4 <__aeabi_uldivmod>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5c8:	e058      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5ca:	4b38      	ldr	r3, [pc, #224]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	099b      	lsrs	r3, r3, #6
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a5da:	623b      	str	r3, [r7, #32]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
 800a5e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a5e4:	4642      	mov	r2, r8
 800a5e6:	464b      	mov	r3, r9
 800a5e8:	f04f 0000 	mov.w	r0, #0
 800a5ec:	f04f 0100 	mov.w	r1, #0
 800a5f0:	0159      	lsls	r1, r3, #5
 800a5f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5f6:	0150      	lsls	r0, r2, #5
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	ebb2 0a01 	subs.w	sl, r2, r1
 800a602:	4649      	mov	r1, r9
 800a604:	eb63 0b01 	sbc.w	fp, r3, r1
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a614:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a618:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a61c:	ebb2 040a 	subs.w	r4, r2, sl
 800a620:	eb63 050b 	sbc.w	r5, r3, fp
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	f04f 0300 	mov.w	r3, #0
 800a62c:	00eb      	lsls	r3, r5, #3
 800a62e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a632:	00e2      	lsls	r2, r4, #3
 800a634:	4614      	mov	r4, r2
 800a636:	461d      	mov	r5, r3
 800a638:	4643      	mov	r3, r8
 800a63a:	18e3      	adds	r3, r4, r3
 800a63c:	603b      	str	r3, [r7, #0]
 800a63e:	464b      	mov	r3, r9
 800a640:	eb45 0303 	adc.w	r3, r5, r3
 800a644:	607b      	str	r3, [r7, #4]
 800a646:	f04f 0200 	mov.w	r2, #0
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a652:	4629      	mov	r1, r5
 800a654:	028b      	lsls	r3, r1, #10
 800a656:	4621      	mov	r1, r4
 800a658:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a65c:	4621      	mov	r1, r4
 800a65e:	028a      	lsls	r2, r1, #10
 800a660:	4610      	mov	r0, r2
 800a662:	4619      	mov	r1, r3
 800a664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a666:	2200      	movs	r2, #0
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	61fa      	str	r2, [r7, #28]
 800a66c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a670:	f7f6 faa0 	bl	8000bb4 <__aeabi_uldivmod>
 800a674:	4602      	mov	r2, r0
 800a676:	460b      	mov	r3, r1
 800a678:	4613      	mov	r3, r2
 800a67a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a67c:	4b0b      	ldr	r3, [pc, #44]	; (800a6ac <HAL_RCC_GetSysClockFreq+0x200>)
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	0c1b      	lsrs	r3, r3, #16
 800a682:	f003 0303 	and.w	r3, r3, #3
 800a686:	3301      	adds	r3, #1
 800a688:	005b      	lsls	r3, r3, #1
 800a68a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a68c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a690:	fbb2 f3f3 	udiv	r3, r2, r3
 800a694:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a696:	e002      	b.n	800a69e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a698:	4b05      	ldr	r3, [pc, #20]	; (800a6b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800a69a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a69c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a69e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3750      	adds	r7, #80	; 0x50
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40023800 	.word	0x40023800
 800a6b0:	00f42400 	.word	0x00f42400
 800a6b4:	007a1200 	.word	0x007a1200

0800a6b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6bc:	4b03      	ldr	r3, [pc, #12]	; (800a6cc <HAL_RCC_GetHCLKFreq+0x14>)
 800a6be:	681b      	ldr	r3, [r3, #0]
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr
 800a6ca:	bf00      	nop
 800a6cc:	20000234 	.word	0x20000234

0800a6d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a6d4:	f7ff fff0 	bl	800a6b8 <HAL_RCC_GetHCLKFreq>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	4b05      	ldr	r3, [pc, #20]	; (800a6f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	0a9b      	lsrs	r3, r3, #10
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	4903      	ldr	r1, [pc, #12]	; (800a6f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6e6:	5ccb      	ldrb	r3, [r1, r3]
 800a6e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	40023800 	.word	0x40023800
 800a6f4:	0800efec 	.word	0x0800efec

0800a6f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a6fc:	f7ff ffdc 	bl	800a6b8 <HAL_RCC_GetHCLKFreq>
 800a700:	4602      	mov	r2, r0
 800a702:	4b05      	ldr	r3, [pc, #20]	; (800a718 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	0b5b      	lsrs	r3, r3, #13
 800a708:	f003 0307 	and.w	r3, r3, #7
 800a70c:	4903      	ldr	r1, [pc, #12]	; (800a71c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a70e:	5ccb      	ldrb	r3, [r1, r3]
 800a710:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a714:	4618      	mov	r0, r3
 800a716:	bd80      	pop	{r7, pc}
 800a718:	40023800 	.word	0x40023800
 800a71c:	0800efec 	.word	0x0800efec

0800a720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d101      	bne.n	800a732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a72e:	2301      	movs	r3, #1
 800a730:	e04c      	b.n	800a7cc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d111      	bne.n	800a762 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f001 fbb2 	bl	800beb0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a750:	2b00      	cmp	r3, #0
 800a752:	d102      	bne.n	800a75a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a1f      	ldr	r2, [pc, #124]	; (800a7d4 <HAL_TIM_Base_Init+0xb4>)
 800a758:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2202      	movs	r2, #2
 800a766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3304      	adds	r3, #4
 800a772:	4619      	mov	r1, r3
 800a774:	4610      	mov	r0, r2
 800a776:	f001 f8cf 	bl	800b918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2201      	movs	r2, #1
 800a77e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2201      	movs	r2, #1
 800a79e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}
 800a7d4:	08004ce1 	.word	0x08004ce1

0800a7d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d001      	beq.n	800a7f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e044      	b.n	800a87a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68da      	ldr	r2, [r3, #12]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0201 	orr.w	r2, r2, #1
 800a806:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a1e      	ldr	r2, [pc, #120]	; (800a888 <HAL_TIM_Base_Start_IT+0xb0>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d018      	beq.n	800a844 <HAL_TIM_Base_Start_IT+0x6c>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a81a:	d013      	beq.n	800a844 <HAL_TIM_Base_Start_IT+0x6c>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a1a      	ldr	r2, [pc, #104]	; (800a88c <HAL_TIM_Base_Start_IT+0xb4>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d00e      	beq.n	800a844 <HAL_TIM_Base_Start_IT+0x6c>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a19      	ldr	r2, [pc, #100]	; (800a890 <HAL_TIM_Base_Start_IT+0xb8>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d009      	beq.n	800a844 <HAL_TIM_Base_Start_IT+0x6c>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a17      	ldr	r2, [pc, #92]	; (800a894 <HAL_TIM_Base_Start_IT+0xbc>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d004      	beq.n	800a844 <HAL_TIM_Base_Start_IT+0x6c>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a16      	ldr	r2, [pc, #88]	; (800a898 <HAL_TIM_Base_Start_IT+0xc0>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d111      	bne.n	800a868 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f003 0307 	and.w	r3, r3, #7
 800a84e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b06      	cmp	r3, #6
 800a854:	d010      	beq.n	800a878 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f042 0201 	orr.w	r2, r2, #1
 800a864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a866:	e007      	b.n	800a878 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f042 0201 	orr.w	r2, r2, #1
 800a876:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop
 800a888:	40010000 	.word	0x40010000
 800a88c:	40000400 	.word	0x40000400
 800a890:	40000800 	.word	0x40000800
 800a894:	40000c00 	.word	0x40000c00
 800a898:	40014000 	.word	0x40014000

0800a89c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e04c      	b.n	800a948 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d111      	bne.n	800a8de <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f001 faf4 	bl	800beb0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a1f      	ldr	r2, [pc, #124]	; (800a950 <HAL_TIM_OC_Init+0xb4>)
 800a8d4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2202      	movs	r2, #2
 800a8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681a      	ldr	r2, [r3, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f001 f811 	bl	800b918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2201      	movs	r2, #1
 800a922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2201      	movs	r2, #1
 800a92a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2201      	movs	r2, #1
 800a932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3708      	adds	r7, #8
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}
 800a950:	0800a955 	.word	0x0800a955

0800a954 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d101      	bne.n	800a97a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	e04c      	b.n	800aa14 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a980:	b2db      	uxtb	r3, r3
 800a982:	2b00      	cmp	r3, #0
 800a984:	d111      	bne.n	800a9aa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f001 fa8e 	bl	800beb0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	4a1f      	ldr	r2, [pc, #124]	; (800aa1c <HAL_TIM_PWM_Init+0xb4>)
 800a9a0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	3304      	adds	r3, #4
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	4610      	mov	r0, r2
 800a9be:	f000 ffab 	bl	800b918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	0800aa21 	.word	0x0800aa21

0800aa20 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d109      	bne.n	800aa58 <HAL_TIM_PWM_Start+0x24>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	bf14      	ite	ne
 800aa50:	2301      	movne	r3, #1
 800aa52:	2300      	moveq	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	e022      	b.n	800aa9e <HAL_TIM_PWM_Start+0x6a>
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	2b04      	cmp	r3, #4
 800aa5c:	d109      	bne.n	800aa72 <HAL_TIM_PWM_Start+0x3e>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	bf14      	ite	ne
 800aa6a:	2301      	movne	r3, #1
 800aa6c:	2300      	moveq	r3, #0
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	e015      	b.n	800aa9e <HAL_TIM_PWM_Start+0x6a>
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	2b08      	cmp	r3, #8
 800aa76:	d109      	bne.n	800aa8c <HAL_TIM_PWM_Start+0x58>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	bf14      	ite	ne
 800aa84:	2301      	movne	r3, #1
 800aa86:	2300      	moveq	r3, #0
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	e008      	b.n	800aa9e <HAL_TIM_PWM_Start+0x6a>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	bf14      	ite	ne
 800aa98:	2301      	movne	r3, #1
 800aa9a:	2300      	moveq	r3, #0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e068      	b.n	800ab78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d104      	bne.n	800aab6 <HAL_TIM_PWM_Start+0x82>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2202      	movs	r2, #2
 800aab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aab4:	e013      	b.n	800aade <HAL_TIM_PWM_Start+0xaa>
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d104      	bne.n	800aac6 <HAL_TIM_PWM_Start+0x92>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2202      	movs	r2, #2
 800aac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aac4:	e00b      	b.n	800aade <HAL_TIM_PWM_Start+0xaa>
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	2b08      	cmp	r3, #8
 800aaca:	d104      	bne.n	800aad6 <HAL_TIM_PWM_Start+0xa2>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aad4:	e003      	b.n	800aade <HAL_TIM_PWM_Start+0xaa>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2202      	movs	r2, #2
 800aada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2201      	movs	r2, #1
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f001 f9bc 	bl	800be64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a23      	ldr	r2, [pc, #140]	; (800ab80 <HAL_TIM_PWM_Start+0x14c>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d107      	bne.n	800ab06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ab04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a1d      	ldr	r2, [pc, #116]	; (800ab80 <HAL_TIM_PWM_Start+0x14c>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d018      	beq.n	800ab42 <HAL_TIM_PWM_Start+0x10e>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab18:	d013      	beq.n	800ab42 <HAL_TIM_PWM_Start+0x10e>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a19      	ldr	r2, [pc, #100]	; (800ab84 <HAL_TIM_PWM_Start+0x150>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00e      	beq.n	800ab42 <HAL_TIM_PWM_Start+0x10e>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a17      	ldr	r2, [pc, #92]	; (800ab88 <HAL_TIM_PWM_Start+0x154>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d009      	beq.n	800ab42 <HAL_TIM_PWM_Start+0x10e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a16      	ldr	r2, [pc, #88]	; (800ab8c <HAL_TIM_PWM_Start+0x158>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d004      	beq.n	800ab42 <HAL_TIM_PWM_Start+0x10e>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a14      	ldr	r2, [pc, #80]	; (800ab90 <HAL_TIM_PWM_Start+0x15c>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d111      	bne.n	800ab66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b06      	cmp	r3, #6
 800ab52:	d010      	beq.n	800ab76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0201 	orr.w	r2, r2, #1
 800ab62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab64:	e007      	b.n	800ab76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	681a      	ldr	r2, [r3, #0]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f042 0201 	orr.w	r2, r2, #1
 800ab74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	40010000 	.word	0x40010000
 800ab84:	40000400 	.word	0x40000400
 800ab88:	40000800 	.word	0x40000800
 800ab8c:	40000c00 	.word	0x40000c00
 800ab90:	40014000 	.word	0x40014000

0800ab94 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d101      	bne.n	800aba8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800aba4:	2301      	movs	r3, #1
 800aba6:	e04c      	b.n	800ac42 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d111      	bne.n	800abd8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f001 f977 	bl	800beb0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d102      	bne.n	800abd0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a1f      	ldr	r2, [pc, #124]	; (800ac4c <HAL_TIM_OnePulse_Init+0xb8>)
 800abce:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	3304      	adds	r3, #4
 800abe8:	4619      	mov	r1, r3
 800abea:	4610      	mov	r0, r2
 800abec:	f000 fe94 	bl	800b918 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f022 0208 	bic.w	r2, r2, #8
 800abfe:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6819      	ldr	r1, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	430a      	orrs	r2, r1
 800ac0e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2201      	movs	r2, #1
 800ac14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800ac51 	.word	0x0800ac51

0800ac50 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ac74:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac7c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac84:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac8c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d108      	bne.n	800aca6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d105      	bne.n	800aca6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ac9a:	7b7b      	ldrb	r3, [r7, #13]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d102      	bne.n	800aca6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aca0:	7b3b      	ldrb	r3, [r7, #12]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d001      	beq.n	800acaa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e03b      	b.n	800ad22 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2202      	movs	r2, #2
 800acae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2202      	movs	r2, #2
 800acb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2202      	movs	r2, #2
 800acbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2202      	movs	r2, #2
 800acc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68da      	ldr	r2, [r3, #12]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f042 0202 	orr.w	r2, r2, #2
 800acd8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68da      	ldr	r2, [r3, #12]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f042 0204 	orr.w	r2, r2, #4
 800ace8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	2201      	movs	r2, #1
 800acf0:	2100      	movs	r1, #0
 800acf2:	4618      	mov	r0, r3
 800acf4:	f001 f8b6 	bl	800be64 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	2201      	movs	r2, #1
 800acfe:	2104      	movs	r1, #4
 800ad00:	4618      	mov	r0, r3
 800ad02:	f001 f8af 	bl	800be64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a08      	ldr	r2, [pc, #32]	; (800ad2c <HAL_TIM_OnePulse_Start_IT+0xc8>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d107      	bne.n	800ad20 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40010000 	.word	0x40010000

0800ad30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e0a2      	b.n	800ae8a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d111      	bne.n	800ad74 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f001 f8a9 	bl	800beb0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d102      	bne.n	800ad6c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a4a      	ldr	r2, [pc, #296]	; (800ae94 <HAL_TIM_Encoder_Init+0x164>)
 800ad6a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	6812      	ldr	r2, [r2, #0]
 800ad86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad8a:	f023 0307 	bic.w	r3, r3, #7
 800ad8e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	3304      	adds	r3, #4
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f000 fdbc 	bl	800b918 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	699b      	ldr	r3, [r3, #24]
 800adae:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	6a1b      	ldr	r3, [r3, #32]
 800adb6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	697a      	ldr	r2, [r7, #20]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adc8:	f023 0303 	bic.w	r3, r3, #3
 800adcc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	689a      	ldr	r2, [r3, #8]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	021b      	lsls	r3, r3, #8
 800add8:	4313      	orrs	r3, r2
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	4313      	orrs	r3, r2
 800adde:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ade6:	f023 030c 	bic.w	r3, r3, #12
 800adea:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800adf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	68da      	ldr	r2, [r3, #12]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	4313      	orrs	r3, r2
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	011a      	lsls	r2, r3, #4
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	6a1b      	ldr	r3, [r3, #32]
 800ae14:	031b      	lsls	r3, r3, #12
 800ae16:	4313      	orrs	r3, r2
 800ae18:	693a      	ldr	r2, [r7, #16]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ae24:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ae2c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	695b      	ldr	r3, [r3, #20]
 800ae36:	011b      	lsls	r3, r3, #4
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	68fa      	ldr	r2, [r7, #12]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	693a      	ldr	r2, [r7, #16]
 800ae4e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3718      	adds	r7, #24
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	08004c45 	.word	0x08004c45

0800ae98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aea8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aeb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aeb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800aec0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d110      	bne.n	800aeea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d102      	bne.n	800aed4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800aece:	7b7b      	ldrb	r3, [r7, #13]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d001      	beq.n	800aed8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	e069      	b.n	800afac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2202      	movs	r2, #2
 800aedc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2202      	movs	r2, #2
 800aee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aee8:	e031      	b.n	800af4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	2b04      	cmp	r3, #4
 800aeee:	d110      	bne.n	800af12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800aef0:	7bbb      	ldrb	r3, [r7, #14]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d102      	bne.n	800aefc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800aef6:	7b3b      	ldrb	r3, [r7, #12]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d001      	beq.n	800af00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800aefc:	2301      	movs	r3, #1
 800aefe:	e055      	b.n	800afac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2202      	movs	r2, #2
 800af0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800af10:	e01d      	b.n	800af4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d108      	bne.n	800af2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800af18:	7bbb      	ldrb	r3, [r7, #14]
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d105      	bne.n	800af2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800af1e:	7b7b      	ldrb	r3, [r7, #13]
 800af20:	2b01      	cmp	r3, #1
 800af22:	d102      	bne.n	800af2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800af24:	7b3b      	ldrb	r3, [r7, #12]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d001      	beq.n	800af2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e03e      	b.n	800afac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2202      	movs	r2, #2
 800af32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2202      	movs	r2, #2
 800af3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2202      	movs	r2, #2
 800af42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2202      	movs	r2, #2
 800af4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d003      	beq.n	800af5c <HAL_TIM_Encoder_Start+0xc4>
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b04      	cmp	r3, #4
 800af58:	d008      	beq.n	800af6c <HAL_TIM_Encoder_Start+0xd4>
 800af5a:	e00f      	b.n	800af7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2201      	movs	r2, #1
 800af62:	2100      	movs	r1, #0
 800af64:	4618      	mov	r0, r3
 800af66:	f000 ff7d 	bl	800be64 <TIM_CCxChannelCmd>
      break;
 800af6a:	e016      	b.n	800af9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2201      	movs	r2, #1
 800af72:	2104      	movs	r1, #4
 800af74:	4618      	mov	r0, r3
 800af76:	f000 ff75 	bl	800be64 <TIM_CCxChannelCmd>
      break;
 800af7a:	e00e      	b.n	800af9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2201      	movs	r2, #1
 800af82:	2100      	movs	r1, #0
 800af84:	4618      	mov	r0, r3
 800af86:	f000 ff6d 	bl	800be64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2201      	movs	r2, #1
 800af90:	2104      	movs	r1, #4
 800af92:	4618      	mov	r0, r3
 800af94:	f000 ff66 	bl	800be64 <TIM_CCxChannelCmd>
      break;
 800af98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f042 0201 	orr.w	r2, r2, #1
 800afa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d128      	bne.n	800b01c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	f003 0302 	and.w	r3, r3, #2
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d121      	bne.n	800b01c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f06f 0202 	mvn.w	r2, #2
 800afe0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	f003 0303 	and.w	r3, r3, #3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d005      	beq.n	800b002 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	4798      	blx	r3
 800b000:	e009      	b.n	800b016 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	f003 0304 	and.w	r3, r3, #4
 800b026:	2b04      	cmp	r3, #4
 800b028:	d128      	bne.n	800b07c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b04      	cmp	r3, #4
 800b036:	d121      	bne.n	800b07c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f06f 0204 	mvn.w	r2, #4
 800b040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2202      	movs	r2, #2
 800b046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b052:	2b00      	cmp	r3, #0
 800b054:	d005      	beq.n	800b062 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	4798      	blx	r3
 800b060:	e009      	b.n	800b076 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	691b      	ldr	r3, [r3, #16]
 800b082:	f003 0308 	and.w	r3, r3, #8
 800b086:	2b08      	cmp	r3, #8
 800b088:	d128      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	f003 0308 	and.w	r3, r3, #8
 800b094:	2b08      	cmp	r3, #8
 800b096:	d121      	bne.n	800b0dc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f06f 0208 	mvn.w	r2, #8
 800b0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2204      	movs	r2, #4
 800b0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	69db      	ldr	r3, [r3, #28]
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d005      	beq.n	800b0c2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	4798      	blx	r3
 800b0c0:	e009      	b.n	800b0d6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	f003 0310 	and.w	r3, r3, #16
 800b0e6:	2b10      	cmp	r3, #16
 800b0e8:	d128      	bne.n	800b13c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f003 0310 	and.w	r3, r3, #16
 800b0f4:	2b10      	cmp	r3, #16
 800b0f6:	d121      	bne.n	800b13c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f06f 0210 	mvn.w	r2, #16
 800b100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2208      	movs	r2, #8
 800b106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b112:	2b00      	cmp	r3, #0
 800b114:	d005      	beq.n	800b122 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	4798      	blx	r3
 800b120:	e009      	b.n	800b136 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	2b01      	cmp	r3, #1
 800b148:	d110      	bne.n	800b16c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	f003 0301 	and.w	r3, r3, #1
 800b154:	2b01      	cmp	r3, #1
 800b156:	d109      	bne.n	800b16c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f06f 0201 	mvn.w	r2, #1
 800b160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b176:	2b80      	cmp	r3, #128	; 0x80
 800b178:	d110      	bne.n	800b19c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b184:	2b80      	cmp	r3, #128	; 0x80
 800b186:	d109      	bne.n	800b19c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a6:	2b40      	cmp	r3, #64	; 0x40
 800b1a8:	d110      	bne.n	800b1cc <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1b4:	2b40      	cmp	r3, #64	; 0x40
 800b1b6:	d109      	bne.n	800b1cc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b1c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	f003 0320 	and.w	r3, r3, #32
 800b1d6:	2b20      	cmp	r3, #32
 800b1d8:	d110      	bne.n	800b1fc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	f003 0320 	and.w	r3, r3, #32
 800b1e4:	2b20      	cmp	r3, #32
 800b1e6:	d109      	bne.n	800b1fc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f06f 0220 	mvn.w	r2, #32
 800b1f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d101      	bne.n	800b222 <HAL_TIM_OC_ConfigChannel+0x1e>
 800b21e:	2302      	movs	r3, #2
 800b220:	e048      	b.n	800b2b4 <HAL_TIM_OC_ConfigChannel+0xb0>
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2201      	movs	r2, #1
 800b226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b0c      	cmp	r3, #12
 800b22e:	d839      	bhi.n	800b2a4 <HAL_TIM_OC_ConfigChannel+0xa0>
 800b230:	a201      	add	r2, pc, #4	; (adr r2, 800b238 <HAL_TIM_OC_ConfigChannel+0x34>)
 800b232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b236:	bf00      	nop
 800b238:	0800b26d 	.word	0x0800b26d
 800b23c:	0800b2a5 	.word	0x0800b2a5
 800b240:	0800b2a5 	.word	0x0800b2a5
 800b244:	0800b2a5 	.word	0x0800b2a5
 800b248:	0800b27b 	.word	0x0800b27b
 800b24c:	0800b2a5 	.word	0x0800b2a5
 800b250:	0800b2a5 	.word	0x0800b2a5
 800b254:	0800b2a5 	.word	0x0800b2a5
 800b258:	0800b289 	.word	0x0800b289
 800b25c:	0800b2a5 	.word	0x0800b2a5
 800b260:	0800b2a5 	.word	0x0800b2a5
 800b264:	0800b2a5 	.word	0x0800b2a5
 800b268:	0800b297 	.word	0x0800b297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	4618      	mov	r0, r3
 800b274:	f000 fbd0 	bl	800ba18 <TIM_OC1_SetConfig>
      break;
 800b278:	e017      	b.n	800b2aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68b9      	ldr	r1, [r7, #8]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 fc2f 	bl	800bae4 <TIM_OC2_SetConfig>
      break;
 800b286:	e010      	b.n	800b2aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68b9      	ldr	r1, [r7, #8]
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 fc94 	bl	800bbbc <TIM_OC3_SetConfig>
      break;
 800b294:	e009      	b.n	800b2aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68b9      	ldr	r1, [r7, #8]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 fcf7 	bl	800bc90 <TIM_OC4_SetConfig>
      break;
 800b2a2:	e002      	b.n	800b2aa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	75fb      	strb	r3, [r7, #23]
      break;
 800b2a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b2b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3718      	adds	r7, #24
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d101      	bne.n	800b2da <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e0ae      	b.n	800b438 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b0c      	cmp	r3, #12
 800b2e6:	f200 809f 	bhi.w	800b428 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b2ea:	a201      	add	r2, pc, #4	; (adr r2, 800b2f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f0:	0800b325 	.word	0x0800b325
 800b2f4:	0800b429 	.word	0x0800b429
 800b2f8:	0800b429 	.word	0x0800b429
 800b2fc:	0800b429 	.word	0x0800b429
 800b300:	0800b365 	.word	0x0800b365
 800b304:	0800b429 	.word	0x0800b429
 800b308:	0800b429 	.word	0x0800b429
 800b30c:	0800b429 	.word	0x0800b429
 800b310:	0800b3a7 	.word	0x0800b3a7
 800b314:	0800b429 	.word	0x0800b429
 800b318:	0800b429 	.word	0x0800b429
 800b31c:	0800b429 	.word	0x0800b429
 800b320:	0800b3e7 	.word	0x0800b3e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68b9      	ldr	r1, [r7, #8]
 800b32a:	4618      	mov	r0, r3
 800b32c:	f000 fb74 	bl	800ba18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	699a      	ldr	r2, [r3, #24]
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f042 0208 	orr.w	r2, r2, #8
 800b33e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	699a      	ldr	r2, [r3, #24]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f022 0204 	bic.w	r2, r2, #4
 800b34e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	6999      	ldr	r1, [r3, #24]
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	691a      	ldr	r2, [r3, #16]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	430a      	orrs	r2, r1
 800b360:	619a      	str	r2, [r3, #24]
      break;
 800b362:	e064      	b.n	800b42e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68b9      	ldr	r1, [r7, #8]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f000 fbba 	bl	800bae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	699a      	ldr	r2, [r3, #24]
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b37e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	699a      	ldr	r2, [r3, #24]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b38e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	6999      	ldr	r1, [r3, #24]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	021a      	lsls	r2, r3, #8
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	619a      	str	r2, [r3, #24]
      break;
 800b3a4:	e043      	b.n	800b42e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68b9      	ldr	r1, [r7, #8]
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 fc05 	bl	800bbbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	69da      	ldr	r2, [r3, #28]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f042 0208 	orr.w	r2, r2, #8
 800b3c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	69da      	ldr	r2, [r3, #28]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0204 	bic.w	r2, r2, #4
 800b3d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	69d9      	ldr	r1, [r3, #28]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	691a      	ldr	r2, [r3, #16]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	430a      	orrs	r2, r1
 800b3e2:	61da      	str	r2, [r3, #28]
      break;
 800b3e4:	e023      	b.n	800b42e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	68b9      	ldr	r1, [r7, #8]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 fc4f 	bl	800bc90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69da      	ldr	r2, [r3, #28]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	69da      	ldr	r2, [r3, #28]
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	69d9      	ldr	r1, [r3, #28]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	021a      	lsls	r2, r3, #8
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	430a      	orrs	r2, r1
 800b424:	61da      	str	r2, [r3, #28]
      break;
 800b426:	e002      	b.n	800b42e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	75fb      	strb	r3, [r7, #23]
      break;
 800b42c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b436:	7dfb      	ldrb	r3, [r7, #23]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3718      	adds	r7, #24
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b44a:	2300      	movs	r3, #0
 800b44c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b454:	2b01      	cmp	r3, #1
 800b456:	d101      	bne.n	800b45c <HAL_TIM_ConfigClockSource+0x1c>
 800b458:	2302      	movs	r3, #2
 800b45a:	e0b4      	b.n	800b5c6 <HAL_TIM_ConfigClockSource+0x186>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2202      	movs	r2, #2
 800b468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b47a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b494:	d03e      	beq.n	800b514 <HAL_TIM_ConfigClockSource+0xd4>
 800b496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b49a:	f200 8087 	bhi.w	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b49e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a2:	f000 8086 	beq.w	800b5b2 <HAL_TIM_ConfigClockSource+0x172>
 800b4a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4aa:	d87f      	bhi.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b4ac:	2b70      	cmp	r3, #112	; 0x70
 800b4ae:	d01a      	beq.n	800b4e6 <HAL_TIM_ConfigClockSource+0xa6>
 800b4b0:	2b70      	cmp	r3, #112	; 0x70
 800b4b2:	d87b      	bhi.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b4b4:	2b60      	cmp	r3, #96	; 0x60
 800b4b6:	d050      	beq.n	800b55a <HAL_TIM_ConfigClockSource+0x11a>
 800b4b8:	2b60      	cmp	r3, #96	; 0x60
 800b4ba:	d877      	bhi.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b4bc:	2b50      	cmp	r3, #80	; 0x50
 800b4be:	d03c      	beq.n	800b53a <HAL_TIM_ConfigClockSource+0xfa>
 800b4c0:	2b50      	cmp	r3, #80	; 0x50
 800b4c2:	d873      	bhi.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b4c4:	2b40      	cmp	r3, #64	; 0x40
 800b4c6:	d058      	beq.n	800b57a <HAL_TIM_ConfigClockSource+0x13a>
 800b4c8:	2b40      	cmp	r3, #64	; 0x40
 800b4ca:	d86f      	bhi.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b4cc:	2b30      	cmp	r3, #48	; 0x30
 800b4ce:	d064      	beq.n	800b59a <HAL_TIM_ConfigClockSource+0x15a>
 800b4d0:	2b30      	cmp	r3, #48	; 0x30
 800b4d2:	d86b      	bhi.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d060      	beq.n	800b59a <HAL_TIM_ConfigClockSource+0x15a>
 800b4d8:	2b20      	cmp	r3, #32
 800b4da:	d867      	bhi.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d05c      	beq.n	800b59a <HAL_TIM_ConfigClockSource+0x15a>
 800b4e0:	2b10      	cmp	r3, #16
 800b4e2:	d05a      	beq.n	800b59a <HAL_TIM_ConfigClockSource+0x15a>
 800b4e4:	e062      	b.n	800b5ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	6899      	ldr	r1, [r3, #8]
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	685a      	ldr	r2, [r3, #4]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	f000 fc95 	bl	800be24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68ba      	ldr	r2, [r7, #8]
 800b510:	609a      	str	r2, [r3, #8]
      break;
 800b512:	e04f      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6818      	ldr	r0, [r3, #0]
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	6899      	ldr	r1, [r3, #8]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f000 fc7e 	bl	800be24 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	689a      	ldr	r2, [r3, #8]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b536:	609a      	str	r2, [r3, #8]
      break;
 800b538:	e03c      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6818      	ldr	r0, [r3, #0]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	6859      	ldr	r1, [r3, #4]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	461a      	mov	r2, r3
 800b548:	f000 fbf2 	bl	800bd30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2150      	movs	r1, #80	; 0x50
 800b552:	4618      	mov	r0, r3
 800b554:	f000 fc4b 	bl	800bdee <TIM_ITRx_SetConfig>
      break;
 800b558:	e02c      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	6859      	ldr	r1, [r3, #4]
 800b562:	683b      	ldr	r3, [r7, #0]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	461a      	mov	r2, r3
 800b568:	f000 fc11 	bl	800bd8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2160      	movs	r1, #96	; 0x60
 800b572:	4618      	mov	r0, r3
 800b574:	f000 fc3b 	bl	800bdee <TIM_ITRx_SetConfig>
      break;
 800b578:	e01c      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	6859      	ldr	r1, [r3, #4]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	461a      	mov	r2, r3
 800b588:	f000 fbd2 	bl	800bd30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	2140      	movs	r1, #64	; 0x40
 800b592:	4618      	mov	r0, r3
 800b594:	f000 fc2b 	bl	800bdee <TIM_ITRx_SetConfig>
      break;
 800b598:	e00c      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	f000 fc22 	bl	800bdee <TIM_ITRx_SetConfig>
      break;
 800b5aa:	e003      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b0:	e000      	b.n	800b5b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b5b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}

0800b5ce <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b5ce:	b480      	push	{r7}
 800b5d0:	b083      	sub	sp, #12
 800b5d2:	af00      	add	r7, sp, #0
 800b5d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b083      	sub	sp, #12
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b5ea:	bf00      	nop
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b5fe:	bf00      	nop
 800b600:	370c      	adds	r7, #12
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b612:	bf00      	nop
 800b614:	370c      	adds	r7, #12
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr

0800b61e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b61e:	b480      	push	{r7}
 800b620:	b083      	sub	sp, #12
 800b622:	af00      	add	r7, sp, #0
 800b624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b632:	b480      	push	{r7}
 800b634:	b083      	sub	sp, #12
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b64e:	bf00      	nop
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b65a:	b480      	push	{r7}
 800b65c:	b083      	sub	sp, #12
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b662:	bf00      	nop
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b66e:	b480      	push	{r7}
 800b670:	b083      	sub	sp, #12
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
	...

0800b684 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	460b      	mov	r3, r1
 800b68e:	607a      	str	r2, [r7, #4]
 800b690:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d101      	bne.n	800b6a0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e135      	b.n	800b90c <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d101      	bne.n	800b6ae <HAL_TIM_RegisterCallback+0x2a>
 800b6aa:	2302      	movs	r3, #2
 800b6ac:	e12e      	b.n	800b90c <HAL_TIM_RegisterCallback+0x288>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	f040 80ba 	bne.w	800b838 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800b6c4:	7afb      	ldrb	r3, [r7, #11]
 800b6c6:	2b1a      	cmp	r3, #26
 800b6c8:	f200 80b3 	bhi.w	800b832 <HAL_TIM_RegisterCallback+0x1ae>
 800b6cc:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <HAL_TIM_RegisterCallback+0x50>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b741 	.word	0x0800b741
 800b6d8:	0800b749 	.word	0x0800b749
 800b6dc:	0800b751 	.word	0x0800b751
 800b6e0:	0800b759 	.word	0x0800b759
 800b6e4:	0800b761 	.word	0x0800b761
 800b6e8:	0800b769 	.word	0x0800b769
 800b6ec:	0800b771 	.word	0x0800b771
 800b6f0:	0800b779 	.word	0x0800b779
 800b6f4:	0800b781 	.word	0x0800b781
 800b6f8:	0800b789 	.word	0x0800b789
 800b6fc:	0800b791 	.word	0x0800b791
 800b700:	0800b799 	.word	0x0800b799
 800b704:	0800b7a1 	.word	0x0800b7a1
 800b708:	0800b7a9 	.word	0x0800b7a9
 800b70c:	0800b7b1 	.word	0x0800b7b1
 800b710:	0800b7bb 	.word	0x0800b7bb
 800b714:	0800b7c5 	.word	0x0800b7c5
 800b718:	0800b7cf 	.word	0x0800b7cf
 800b71c:	0800b7d9 	.word	0x0800b7d9
 800b720:	0800b7e3 	.word	0x0800b7e3
 800b724:	0800b7ed 	.word	0x0800b7ed
 800b728:	0800b7f7 	.word	0x0800b7f7
 800b72c:	0800b801 	.word	0x0800b801
 800b730:	0800b80b 	.word	0x0800b80b
 800b734:	0800b815 	.word	0x0800b815
 800b738:	0800b81f 	.word	0x0800b81f
 800b73c:	0800b829 	.word	0x0800b829
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b746:	e0dc      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b74e:	e0d8      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b756:	e0d4      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b75e:	e0d0      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b766:	e0cc      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b76e:	e0c8      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b776:	e0c4      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800b77e:	e0c0      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800b786:	e0bc      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b78e:	e0b8      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	687a      	ldr	r2, [r7, #4]
 800b794:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b796:	e0b4      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800b79e:	e0b0      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800b7a6:	e0ac      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800b7ae:	e0a8      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800b7b8:	e0a3      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	687a      	ldr	r2, [r7, #4]
 800b7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800b7c2:	e09e      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800b7cc:	e099      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800b7d6:	e094      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	687a      	ldr	r2, [r7, #4]
 800b7dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800b7e0:	e08f      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800b7ea:	e08a      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800b7f4:	e085      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800b7fe:	e080      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	687a      	ldr	r2, [r7, #4]
 800b804:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800b808:	e07b      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800b812:	e076      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800b81c:	e071      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800b826:	e06c      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800b830:	e067      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	75fb      	strb	r3, [r7, #23]
        break;
 800b836:	e064      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	d15c      	bne.n	800b8fe <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800b844:	7afb      	ldrb	r3, [r7, #11]
 800b846:	2b0d      	cmp	r3, #13
 800b848:	d856      	bhi.n	800b8f8 <HAL_TIM_RegisterCallback+0x274>
 800b84a:	a201      	add	r2, pc, #4	; (adr r2, 800b850 <HAL_TIM_RegisterCallback+0x1cc>)
 800b84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b850:	0800b889 	.word	0x0800b889
 800b854:	0800b891 	.word	0x0800b891
 800b858:	0800b899 	.word	0x0800b899
 800b85c:	0800b8a1 	.word	0x0800b8a1
 800b860:	0800b8a9 	.word	0x0800b8a9
 800b864:	0800b8b1 	.word	0x0800b8b1
 800b868:	0800b8b9 	.word	0x0800b8b9
 800b86c:	0800b8c1 	.word	0x0800b8c1
 800b870:	0800b8c9 	.word	0x0800b8c9
 800b874:	0800b8d1 	.word	0x0800b8d1
 800b878:	0800b8d9 	.word	0x0800b8d9
 800b87c:	0800b8e1 	.word	0x0800b8e1
 800b880:	0800b8e9 	.word	0x0800b8e9
 800b884:	0800b8f1 	.word	0x0800b8f1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b88e:	e038      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	687a      	ldr	r2, [r7, #4]
 800b894:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b896:	e034      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b89e:	e030      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b8a6:	e02c      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b8ae:	e028      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b8b6:	e024      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b8be:	e020      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800b8c6:	e01c      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800b8ce:	e018      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b8d6:	e014      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b8de:	e010      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800b8e6:	e00c      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800b8ee:	e008      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800b8f6:	e004      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	75fb      	strb	r3, [r7, #23]
        break;
 800b8fc:	e001      	b.n	800b902 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b90c:	4618      	mov	r0, r3
 800b90e:	371c      	adds	r7, #28
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr

0800b918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b918:	b480      	push	{r7}
 800b91a:	b085      	sub	sp, #20
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a34      	ldr	r2, [pc, #208]	; (800b9fc <TIM_Base_SetConfig+0xe4>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00f      	beq.n	800b950 <TIM_Base_SetConfig+0x38>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b936:	d00b      	beq.n	800b950 <TIM_Base_SetConfig+0x38>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a31      	ldr	r2, [pc, #196]	; (800ba00 <TIM_Base_SetConfig+0xe8>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d007      	beq.n	800b950 <TIM_Base_SetConfig+0x38>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a30      	ldr	r2, [pc, #192]	; (800ba04 <TIM_Base_SetConfig+0xec>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d003      	beq.n	800b950 <TIM_Base_SetConfig+0x38>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a2f      	ldr	r2, [pc, #188]	; (800ba08 <TIM_Base_SetConfig+0xf0>)
 800b94c:	4293      	cmp	r3, r2
 800b94e:	d108      	bne.n	800b962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	4313      	orrs	r3, r2
 800b960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a25      	ldr	r2, [pc, #148]	; (800b9fc <TIM_Base_SetConfig+0xe4>)
 800b966:	4293      	cmp	r3, r2
 800b968:	d01b      	beq.n	800b9a2 <TIM_Base_SetConfig+0x8a>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b970:	d017      	beq.n	800b9a2 <TIM_Base_SetConfig+0x8a>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a22      	ldr	r2, [pc, #136]	; (800ba00 <TIM_Base_SetConfig+0xe8>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d013      	beq.n	800b9a2 <TIM_Base_SetConfig+0x8a>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a21      	ldr	r2, [pc, #132]	; (800ba04 <TIM_Base_SetConfig+0xec>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d00f      	beq.n	800b9a2 <TIM_Base_SetConfig+0x8a>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a20      	ldr	r2, [pc, #128]	; (800ba08 <TIM_Base_SetConfig+0xf0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d00b      	beq.n	800b9a2 <TIM_Base_SetConfig+0x8a>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a1f      	ldr	r2, [pc, #124]	; (800ba0c <TIM_Base_SetConfig+0xf4>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d007      	beq.n	800b9a2 <TIM_Base_SetConfig+0x8a>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a1e      	ldr	r2, [pc, #120]	; (800ba10 <TIM_Base_SetConfig+0xf8>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d003      	beq.n	800b9a2 <TIM_Base_SetConfig+0x8a>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a1d      	ldr	r2, [pc, #116]	; (800ba14 <TIM_Base_SetConfig+0xfc>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d108      	bne.n	800b9b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	689a      	ldr	r2, [r3, #8]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681a      	ldr	r2, [r3, #0]
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	4a08      	ldr	r2, [pc, #32]	; (800b9fc <TIM_Base_SetConfig+0xe4>)
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	d103      	bne.n	800b9e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	691a      	ldr	r2, [r3, #16]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	615a      	str	r2, [r3, #20]
}
 800b9ee:	bf00      	nop
 800b9f0:	3714      	adds	r7, #20
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	40010000 	.word	0x40010000
 800ba00:	40000400 	.word	0x40000400
 800ba04:	40000800 	.word	0x40000800
 800ba08:	40000c00 	.word	0x40000c00
 800ba0c:	40014000 	.word	0x40014000
 800ba10:	40014400 	.word	0x40014400
 800ba14:	40014800 	.word	0x40014800

0800ba18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b087      	sub	sp, #28
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6a1b      	ldr	r3, [r3, #32]
 800ba26:	f023 0201 	bic.w	r2, r3, #1
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6a1b      	ldr	r3, [r3, #32]
 800ba32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f023 0302 	bic.w	r3, r3, #2
 800ba60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	697a      	ldr	r2, [r7, #20]
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a1c      	ldr	r2, [pc, #112]	; (800bae0 <TIM_OC1_SetConfig+0xc8>)
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d10c      	bne.n	800ba8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	f023 0308 	bic.w	r3, r3, #8
 800ba7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	697a      	ldr	r2, [r7, #20]
 800ba82:	4313      	orrs	r3, r2
 800ba84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	f023 0304 	bic.w	r3, r3, #4
 800ba8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a13      	ldr	r2, [pc, #76]	; (800bae0 <TIM_OC1_SetConfig+0xc8>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d111      	bne.n	800baba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba9e:	693b      	ldr	r3, [r7, #16]
 800baa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800baa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	695b      	ldr	r3, [r3, #20]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	4313      	orrs	r3, r2
 800baae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	4313      	orrs	r3, r2
 800bab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	693a      	ldr	r2, [r7, #16]
 800babe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	685a      	ldr	r2, [r3, #4]
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	697a      	ldr	r2, [r7, #20]
 800bad2:	621a      	str	r2, [r3, #32]
}
 800bad4:	bf00      	nop
 800bad6:	371c      	adds	r7, #28
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr
 800bae0:	40010000 	.word	0x40010000

0800bae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	f023 0210 	bic.w	r2, r3, #16
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	021b      	lsls	r3, r3, #8
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	4313      	orrs	r3, r2
 800bb26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	f023 0320 	bic.w	r3, r3, #32
 800bb2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	011b      	lsls	r3, r3, #4
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	4a1e      	ldr	r2, [pc, #120]	; (800bbb8 <TIM_OC2_SetConfig+0xd4>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d10d      	bne.n	800bb60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	011b      	lsls	r3, r3, #4
 800bb52:	697a      	ldr	r2, [r7, #20]
 800bb54:	4313      	orrs	r3, r2
 800bb56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a15      	ldr	r2, [pc, #84]	; (800bbb8 <TIM_OC2_SetConfig+0xd4>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d113      	bne.n	800bb90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	695b      	ldr	r3, [r3, #20]
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	693a      	ldr	r2, [r7, #16]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	699b      	ldr	r3, [r3, #24]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	697a      	ldr	r2, [r7, #20]
 800bba8:	621a      	str	r2, [r3, #32]
}
 800bbaa:	bf00      	nop
 800bbac:	371c      	adds	r7, #28
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	40010000 	.word	0x40010000

0800bbbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f023 0303 	bic.w	r3, r3, #3
 800bbf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	021b      	lsls	r3, r3, #8
 800bc0c:	697a      	ldr	r2, [r7, #20]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	4a1d      	ldr	r2, [pc, #116]	; (800bc8c <TIM_OC3_SetConfig+0xd0>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d10d      	bne.n	800bc36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	68db      	ldr	r3, [r3, #12]
 800bc26:	021b      	lsls	r3, r3, #8
 800bc28:	697a      	ldr	r2, [r7, #20]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a14      	ldr	r2, [pc, #80]	; (800bc8c <TIM_OC3_SetConfig+0xd0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d113      	bne.n	800bc66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	011b      	lsls	r3, r3, #4
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	4313      	orrs	r3, r2
 800bc58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	699b      	ldr	r3, [r3, #24]
 800bc5e:	011b      	lsls	r3, r3, #4
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	685a      	ldr	r2, [r3, #4]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	621a      	str	r2, [r3, #32]
}
 800bc80:	bf00      	nop
 800bc82:	371c      	adds	r7, #28
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	40010000 	.word	0x40010000

0800bc90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b087      	sub	sp, #28
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	69db      	ldr	r3, [r3, #28]
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	031b      	lsls	r3, r3, #12
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a10      	ldr	r2, [pc, #64]	; (800bd2c <TIM_OC4_SetConfig+0x9c>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d109      	bne.n	800bd04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	695b      	ldr	r3, [r3, #20]
 800bcfc:	019b      	lsls	r3, r3, #6
 800bcfe:	697a      	ldr	r2, [r7, #20]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685a      	ldr	r2, [r3, #4]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	621a      	str	r2, [r3, #32]
}
 800bd1e:	bf00      	nop
 800bd20:	371c      	adds	r7, #28
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	40010000 	.word	0x40010000

0800bd30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b087      	sub	sp, #28
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6a1b      	ldr	r3, [r3, #32]
 800bd40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a1b      	ldr	r3, [r3, #32]
 800bd46:	f023 0201 	bic.w	r2, r3, #1
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	699b      	ldr	r3, [r3, #24]
 800bd52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	011b      	lsls	r3, r3, #4
 800bd60:	693a      	ldr	r2, [r7, #16]
 800bd62:	4313      	orrs	r3, r2
 800bd64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f023 030a 	bic.w	r3, r3, #10
 800bd6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	697a      	ldr	r2, [r7, #20]
 800bd80:	621a      	str	r2, [r3, #32]
}
 800bd82:	bf00      	nop
 800bd84:	371c      	adds	r7, #28
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b087      	sub	sp, #28
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	60f8      	str	r0, [r7, #12]
 800bd96:	60b9      	str	r1, [r7, #8]
 800bd98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	f023 0210 	bic.w	r2, r3, #16
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6a1b      	ldr	r3, [r3, #32]
 800bdb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bdb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	031b      	lsls	r3, r3, #12
 800bdbe:	697a      	ldr	r2, [r7, #20]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bdca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	011b      	lsls	r3, r3, #4
 800bdd0:	693a      	ldr	r2, [r7, #16]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	621a      	str	r2, [r3, #32]
}
 800bde2:	bf00      	nop
 800bde4:	371c      	adds	r7, #28
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b085      	sub	sp, #20
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	f043 0307 	orr.w	r3, r3, #7
 800be10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	609a      	str	r2, [r3, #8]
}
 800be18:	bf00      	nop
 800be1a:	3714      	adds	r7, #20
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr

0800be24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be24:	b480      	push	{r7}
 800be26:	b087      	sub	sp, #28
 800be28:	af00      	add	r7, sp, #0
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	021a      	lsls	r2, r3, #8
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	431a      	orrs	r2, r3
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	697a      	ldr	r2, [r7, #20]
 800be4e:	4313      	orrs	r3, r2
 800be50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	609a      	str	r2, [r3, #8]
}
 800be58:	bf00      	nop
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800be64:	b480      	push	{r7}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	f003 031f 	and.w	r3, r3, #31
 800be76:	2201      	movs	r2, #1
 800be78:	fa02 f303 	lsl.w	r3, r2, r3
 800be7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	6a1a      	ldr	r2, [r3, #32]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	43db      	mvns	r3, r3
 800be86:	401a      	ands	r2, r3
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6a1a      	ldr	r2, [r3, #32]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	f003 031f 	and.w	r3, r3, #31
 800be96:	6879      	ldr	r1, [r7, #4]
 800be98:	fa01 f303 	lsl.w	r3, r1, r3
 800be9c:	431a      	orrs	r2, r3
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	621a      	str	r2, [r3, #32]
}
 800bea2:	bf00      	nop
 800bea4:	371c      	adds	r7, #28
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
	...

0800beb0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a1c      	ldr	r2, [pc, #112]	; (800bf2c <TIM_ResetCallback+0x7c>)
 800bebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a1b      	ldr	r2, [pc, #108]	; (800bf30 <TIM_ResetCallback+0x80>)
 800bec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a1a      	ldr	r2, [pc, #104]	; (800bf34 <TIM_ResetCallback+0x84>)
 800becc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a19      	ldr	r2, [pc, #100]	; (800bf38 <TIM_ResetCallback+0x88>)
 800bed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a18      	ldr	r2, [pc, #96]	; (800bf3c <TIM_ResetCallback+0x8c>)
 800bedc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a17      	ldr	r2, [pc, #92]	; (800bf40 <TIM_ResetCallback+0x90>)
 800bee4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a16      	ldr	r2, [pc, #88]	; (800bf44 <TIM_ResetCallback+0x94>)
 800beec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a15      	ldr	r2, [pc, #84]	; (800bf48 <TIM_ResetCallback+0x98>)
 800bef4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a14      	ldr	r2, [pc, #80]	; (800bf4c <TIM_ResetCallback+0x9c>)
 800befc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a13      	ldr	r2, [pc, #76]	; (800bf50 <TIM_ResetCallback+0xa0>)
 800bf04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a12      	ldr	r2, [pc, #72]	; (800bf54 <TIM_ResetCallback+0xa4>)
 800bf0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a11      	ldr	r2, [pc, #68]	; (800bf58 <TIM_ResetCallback+0xa8>)
 800bf14:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a10      	ldr	r2, [pc, #64]	; (800bf5c <TIM_ResetCallback+0xac>)
 800bf1c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800bf20:	bf00      	nop
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr
 800bf2c:	08003fe9 	.word	0x08003fe9
 800bf30:	0800b5cf 	.word	0x0800b5cf
 800bf34:	0800b647 	.word	0x0800b647
 800bf38:	0800b65b 	.word	0x0800b65b
 800bf3c:	0800b5f7 	.word	0x0800b5f7
 800bf40:	0800b60b 	.word	0x0800b60b
 800bf44:	0800b5e3 	.word	0x0800b5e3
 800bf48:	0800b61f 	.word	0x0800b61f
 800bf4c:	0800b633 	.word	0x0800b633
 800bf50:	0800b66f 	.word	0x0800b66f
 800bf54:	0800c03d 	.word	0x0800c03d
 800bf58:	0800c051 	.word	0x0800c051
 800bf5c:	0800c065 	.word	0x0800c065

0800bf60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b085      	sub	sp, #20
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d101      	bne.n	800bf78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf74:	2302      	movs	r3, #2
 800bf76:	e050      	b.n	800c01a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2202      	movs	r2, #2
 800bf84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	689b      	ldr	r3, [r3, #8]
 800bf96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68fa      	ldr	r2, [r7, #12]
 800bfb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a1c      	ldr	r2, [pc, #112]	; (800c028 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d018      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfc4:	d013      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a18      	ldr	r2, [pc, #96]	; (800c02c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d00e      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a16      	ldr	r2, [pc, #88]	; (800c030 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d009      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a15      	ldr	r2, [pc, #84]	; (800c034 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d004      	beq.n	800bfee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	4a13      	ldr	r2, [pc, #76]	; (800c038 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	d10c      	bne.n	800c008 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3714      	adds	r7, #20
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	40010000 	.word	0x40010000
 800c02c:	40000400 	.word	0x40000400
 800c030:	40000800 	.word	0x40000800
 800c034:	40000c00 	.word	0x40000c00
 800c038:	40014000 	.word	0x40014000

0800c03c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d101      	bne.n	800c08a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c086:	2301      	movs	r3, #1
 800c088:	e04a      	b.n	800c120 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b00      	cmp	r3, #0
 800c094:	d111      	bne.n	800c0ba <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fd2c 	bl	800cafc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d102      	bne.n	800c0b2 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4a1e      	ldr	r2, [pc, #120]	; (800c128 <HAL_UART_Init+0xb0>)
 800c0b0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2224      	movs	r2, #36	; 0x24
 800c0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	68da      	ldr	r2, [r3, #12]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 fff6 	bl	800d0c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	691a      	ldr	r2, [r3, #16]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	695a      	ldr	r2, [r3, #20]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68da      	ldr	r2, [r3, #12]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c106:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2220      	movs	r2, #32
 800c11a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c11e:	2300      	movs	r3, #0
}
 800c120:	4618      	mov	r0, r3
 800c122:	3708      	adds	r7, #8
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	08004ea1 	.word	0x08004ea1

0800c12c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	460b      	mov	r3, r1
 800c136:	607a      	str	r2, [r7, #4]
 800c138:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d107      	bne.n	800c154 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c148:	f043 0220 	orr.w	r2, r3, #32
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e08c      	b.n	800c26e <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d101      	bne.n	800c162 <HAL_UART_RegisterCallback+0x36>
 800c15e:	2302      	movs	r3, #2
 800c160:	e085      	b.n	800c26e <HAL_UART_RegisterCallback+0x142>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c170:	b2db      	uxtb	r3, r3
 800c172:	2b20      	cmp	r3, #32
 800c174:	d151      	bne.n	800c21a <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800c176:	7afb      	ldrb	r3, [r7, #11]
 800c178:	2b0c      	cmp	r3, #12
 800c17a:	d845      	bhi.n	800c208 <HAL_UART_RegisterCallback+0xdc>
 800c17c:	a201      	add	r2, pc, #4	; (adr r2, 800c184 <HAL_UART_RegisterCallback+0x58>)
 800c17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c182:	bf00      	nop
 800c184:	0800c1b9 	.word	0x0800c1b9
 800c188:	0800c1c1 	.word	0x0800c1c1
 800c18c:	0800c1c9 	.word	0x0800c1c9
 800c190:	0800c1d1 	.word	0x0800c1d1
 800c194:	0800c1d9 	.word	0x0800c1d9
 800c198:	0800c1e1 	.word	0x0800c1e1
 800c19c:	0800c1e9 	.word	0x0800c1e9
 800c1a0:	0800c1f1 	.word	0x0800c1f1
 800c1a4:	0800c209 	.word	0x0800c209
 800c1a8:	0800c209 	.word	0x0800c209
 800c1ac:	0800c209 	.word	0x0800c209
 800c1b0:	0800c1f9 	.word	0x0800c1f9
 800c1b4:	0800c201 	.word	0x0800c201
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800c1be:	e051      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800c1c6:	e04d      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800c1ce:	e049      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800c1d6:	e045      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800c1de:	e041      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800c1e6:	e03d      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800c1ee:	e039      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	687a      	ldr	r2, [r7, #4]
 800c1f4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800c1f6:	e035      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800c1fe:	e031      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800c206:	e02d      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20c:	f043 0220 	orr.w	r2, r3, #32
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	75fb      	strb	r3, [r7, #23]
        break;
 800c218:	e024      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c220:	b2db      	uxtb	r3, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	d116      	bne.n	800c254 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800c226:	7afb      	ldrb	r3, [r7, #11]
 800c228:	2b0b      	cmp	r3, #11
 800c22a:	d002      	beq.n	800c232 <HAL_UART_RegisterCallback+0x106>
 800c22c:	2b0c      	cmp	r3, #12
 800c22e:	d004      	beq.n	800c23a <HAL_UART_RegisterCallback+0x10e>
 800c230:	e007      	b.n	800c242 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800c238:	e014      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800c240:	e010      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c246:	f043 0220 	orr.w	r2, r3, #32
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	75fb      	strb	r3, [r7, #23]
        break;
 800c252:	e007      	b.n	800c264 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c258:	f043 0220 	orr.w	r2, r3, #32
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	371c      	adds	r7, #28
 800c272:	46bd      	mov	sp, r7
 800c274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop

0800c27c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	4613      	mov	r3, r2
 800c288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c290:	b2db      	uxtb	r3, r3
 800c292:	2b20      	cmp	r3, #32
 800c294:	d11d      	bne.n	800c2d2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d002      	beq.n	800c2a2 <HAL_UART_Receive_IT+0x26>
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e016      	b.n	800c2d4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d101      	bne.n	800c2b4 <HAL_UART_Receive_IT+0x38>
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e00f      	b.n	800c2d4 <HAL_UART_Receive_IT+0x58>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2200      	movs	r2, #0
 800c2c0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c2c2:	88fb      	ldrh	r3, [r7, #6]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	68b9      	ldr	r1, [r7, #8]
 800c2c8:	68f8      	ldr	r0, [r7, #12]
 800c2ca:	f000 fcf7 	bl	800ccbc <UART_Start_Receive_IT>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	e000      	b.n	800c2d4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c2d2:	2302      	movs	r3, #2
  }
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b08c      	sub	sp, #48	; 0x30
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2f0:	b2db      	uxtb	r3, r3
 800c2f2:	2b20      	cmp	r3, #32
 800c2f4:	d165      	bne.n	800c3c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d002      	beq.n	800c302 <HAL_UART_Transmit_DMA+0x26>
 800c2fc:	88fb      	ldrh	r3, [r7, #6]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d101      	bne.n	800c306 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800c302:	2301      	movs	r3, #1
 800c304:	e05e      	b.n	800c3c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d101      	bne.n	800c314 <HAL_UART_Transmit_DMA+0x38>
 800c310:	2302      	movs	r3, #2
 800c312:	e057      	b.n	800c3c4 <HAL_UART_Transmit_DMA+0xe8>
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	88fa      	ldrh	r2, [r7, #6]
 800c326:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	88fa      	ldrh	r2, [r7, #6]
 800c32c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2221      	movs	r2, #33	; 0x21
 800c338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c340:	4a22      	ldr	r2, [pc, #136]	; (800c3cc <HAL_UART_Transmit_DMA+0xf0>)
 800c342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c348:	4a21      	ldr	r2, [pc, #132]	; (800c3d0 <HAL_UART_Transmit_DMA+0xf4>)
 800c34a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c350:	4a20      	ldr	r2, [pc, #128]	; (800c3d4 <HAL_UART_Transmit_DMA+0xf8>)
 800c352:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c358:	2200      	movs	r2, #0
 800c35a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800c35c:	f107 0308 	add.w	r3, r7, #8
 800c360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	6819      	ldr	r1, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	3304      	adds	r3, #4
 800c370:	461a      	mov	r2, r3
 800c372:	88fb      	ldrh	r3, [r7, #6]
 800c374:	f7fa fb90 	bl	8006a98 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c380:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	3314      	adds	r3, #20
 800c390:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	e853 3f00 	ldrex	r3, [r3]
 800c398:	617b      	str	r3, [r7, #20]
   return(result);
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3314      	adds	r3, #20
 800c3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3aa:	627a      	str	r2, [r7, #36]	; 0x24
 800c3ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ae:	6a39      	ldr	r1, [r7, #32]
 800c3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3b2:	e841 2300 	strex	r3, r2, [r1]
 800c3b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e5      	bne.n	800c38a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	e000      	b.n	800c3c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800c3c2:	2302      	movs	r3, #2
  }
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3730      	adds	r7, #48	; 0x30
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}
 800c3cc:	0800cb6d 	.word	0x0800cb6d
 800c3d0:	0800cc09 	.word	0x0800cc09
 800c3d4:	0800cc27 	.word	0x0800cc27

0800c3d8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b09a      	sub	sp, #104	; 0x68
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	330c      	adds	r3, #12
 800c3e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3ea:	e853 3f00 	ldrex	r3, [r3]
 800c3ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3f6:	667b      	str	r3, [r7, #100]	; 0x64
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	330c      	adds	r3, #12
 800c3fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c400:	657a      	str	r2, [r7, #84]	; 0x54
 800c402:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c404:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c408:	e841 2300 	strex	r3, r2, [r1]
 800c40c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1e5      	bne.n	800c3e0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3314      	adds	r3, #20
 800c41a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41e:	e853 3f00 	ldrex	r3, [r3]
 800c422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	f023 0301 	bic.w	r3, r3, #1
 800c42a:	663b      	str	r3, [r7, #96]	; 0x60
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3314      	adds	r3, #20
 800c432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c434:	643a      	str	r2, [r7, #64]	; 0x40
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c43a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c43c:	e841 2300 	strex	r3, r2, [r1]
 800c440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c444:	2b00      	cmp	r3, #0
 800c446:	d1e5      	bne.n	800c414 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d119      	bne.n	800c484 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	330c      	adds	r3, #12
 800c456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c458:	6a3b      	ldr	r3, [r7, #32]
 800c45a:	e853 3f00 	ldrex	r3, [r3]
 800c45e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	f023 0310 	bic.w	r3, r3, #16
 800c466:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	330c      	adds	r3, #12
 800c46e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c470:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e5      	bne.n	800c450 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c48e:	2b40      	cmp	r3, #64	; 0x40
 800c490:	d136      	bne.n	800c500 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	3314      	adds	r3, #20
 800c498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	e853 3f00 	ldrex	r3, [r3]
 800c4a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3314      	adds	r3, #20
 800c4b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4b2:	61ba      	str	r2, [r7, #24]
 800c4b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b6:	6979      	ldr	r1, [r7, #20]
 800c4b8:	69ba      	ldr	r2, [r7, #24]
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	613b      	str	r3, [r7, #16]
   return(result);
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1e5      	bne.n	800c492 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d018      	beq.n	800c500 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fa fb34 	bl	8006b48 <HAL_DMA_Abort>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00c      	beq.n	800c500 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fa fd56 	bl	8006f9c <HAL_DMA_GetError>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b20      	cmp	r3, #32
 800c4f4:	d104      	bne.n	800c500 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2210      	movs	r2, #16
 800c4fa:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800c4fc:	2303      	movs	r3, #3
 800c4fe:	e00a      	b.n	800c516 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2220      	movs	r2, #32
 800c50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3768      	adds	r7, #104	; 0x68
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b0ba      	sub	sp, #232	; 0xe8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68db      	ldr	r3, [r3, #12]
 800c538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c546:	2300      	movs	r3, #0
 800c548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c54c:	2300      	movs	r3, #0
 800c54e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c556:	f003 030f 	and.w	r3, r3, #15
 800c55a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c55e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10f      	bne.n	800c586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d009      	beq.n	800c586 <HAL_UART_IRQHandler+0x66>
 800c572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d003      	beq.n	800c586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fce3 	bl	800cf4a <UART_Receive_IT>
      return;
 800c584:	e25b      	b.n	800ca3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	f000 80e1 	beq.w	800c752 <HAL_UART_IRQHandler+0x232>
 800c590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c594:	f003 0301 	and.w	r3, r3, #1
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f000 80d4 	beq.w	800c752 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5ae:	f003 0301 	and.w	r3, r3, #1
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00b      	beq.n	800c5ce <HAL_UART_IRQHandler+0xae>
 800c5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d005      	beq.n	800c5ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	f043 0201 	orr.w	r2, r3, #1
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d2:	f003 0304 	and.w	r3, r3, #4
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00b      	beq.n	800c5f2 <HAL_UART_IRQHandler+0xd2>
 800c5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5de:	f003 0301 	and.w	r3, r3, #1
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d005      	beq.n	800c5f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ea:	f043 0202 	orr.w	r2, r3, #2
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5f6:	f003 0302 	and.w	r3, r3, #2
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <HAL_UART_IRQHandler+0xf6>
 800c5fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d005      	beq.n	800c616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60e:	f043 0204 	orr.w	r2, r3, #4
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c61a:	f003 0308 	and.w	r3, r3, #8
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d011      	beq.n	800c646 <HAL_UART_IRQHandler+0x126>
 800c622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c626:	f003 0320 	and.w	r3, r3, #32
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d105      	bne.n	800c63a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	2b00      	cmp	r3, #0
 800c638:	d005      	beq.n	800c646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c63e:	f043 0208 	orr.w	r2, r3, #8
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 81f2 	beq.w	800ca34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c654:	f003 0320 	and.w	r3, r3, #32
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d008      	beq.n	800c66e <HAL_UART_IRQHandler+0x14e>
 800c65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c660:	f003 0320 	and.w	r3, r3, #32
 800c664:	2b00      	cmp	r3, #0
 800c666:	d002      	beq.n	800c66e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fc6e 	bl	800cf4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	695b      	ldr	r3, [r3, #20]
 800c674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c678:	2b40      	cmp	r3, #64	; 0x40
 800c67a:	bf0c      	ite	eq
 800c67c:	2301      	moveq	r3, #1
 800c67e:	2300      	movne	r3, #0
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c68a:	f003 0308 	and.w	r3, r3, #8
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d103      	bne.n	800c69a <HAL_UART_IRQHandler+0x17a>
 800c692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c696:	2b00      	cmp	r3, #0
 800c698:	d051      	beq.n	800c73e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fb74 	bl	800cd88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6aa:	2b40      	cmp	r3, #64	; 0x40
 800c6ac:	d142      	bne.n	800c734 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3314      	adds	r3, #20
 800c6b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c6bc:	e853 3f00 	ldrex	r3, [r3]
 800c6c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c6c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c6c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3314      	adds	r3, #20
 800c6d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c6da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c6de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c6e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c6ea:	e841 2300 	strex	r3, r2, [r1]
 800c6ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c6f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1d9      	bne.n	800c6ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d013      	beq.n	800c72a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c706:	4a7f      	ldr	r2, [pc, #508]	; (800c904 <HAL_UART_IRQHandler+0x3e4>)
 800c708:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fa fa8a 	bl	8006c28 <HAL_DMA_Abort_IT>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d019      	beq.n	800c74e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c724:	4610      	mov	r0, r2
 800c726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c728:	e011      	b.n	800c74e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c732:	e00c      	b.n	800c74e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c73c:	e007      	b.n	800c74e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c74c:	e172      	b.n	800ca34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c74e:	bf00      	nop
    return;
 800c750:	e170      	b.n	800ca34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	2b01      	cmp	r3, #1
 800c758:	f040 814c 	bne.w	800c9f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c760:	f003 0310 	and.w	r3, r3, #16
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 8145 	beq.w	800c9f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c76e:	f003 0310 	and.w	r3, r3, #16
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 813e 	beq.w	800c9f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c778:	2300      	movs	r3, #0
 800c77a:	60bb      	str	r3, [r7, #8]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	60bb      	str	r3, [r7, #8]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	60bb      	str	r3, [r7, #8]
 800c78c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c798:	2b40      	cmp	r3, #64	; 0x40
 800c79a:	f040 80b5 	bne.w	800c908 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	685b      	ldr	r3, [r3, #4]
 800c7a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c7aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 8142 	beq.w	800ca38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c7b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	f080 813b 	bcs.w	800ca38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c7c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ce:	69db      	ldr	r3, [r3, #28]
 800c7d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d4:	f000 8088 	beq.w	800c8e8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	330c      	adds	r3, #12
 800c7de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c7e6:	e853 3f00 	ldrex	r3, [r3]
 800c7ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c7ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c7f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	330c      	adds	r3, #12
 800c800:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c804:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c810:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c814:	e841 2300 	strex	r3, r2, [r1]
 800c818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c81c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c820:	2b00      	cmp	r3, #0
 800c822:	d1d9      	bne.n	800c7d8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	3314      	adds	r3, #20
 800c82a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c82e:	e853 3f00 	ldrex	r3, [r3]
 800c832:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c836:	f023 0301 	bic.w	r3, r3, #1
 800c83a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	3314      	adds	r3, #20
 800c844:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c848:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c84c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c84e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c850:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c854:	e841 2300 	strex	r3, r2, [r1]
 800c858:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c85a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e1      	bne.n	800c824 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	3314      	adds	r3, #20
 800c866:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c86a:	e853 3f00 	ldrex	r3, [r3]
 800c86e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	3314      	adds	r3, #20
 800c880:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c884:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c886:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c888:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c88a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c88c:	e841 2300 	strex	r3, r2, [r1]
 800c890:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1e3      	bne.n	800c860 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2220      	movs	r2, #32
 800c89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	330c      	adds	r3, #12
 800c8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8b0:	e853 3f00 	ldrex	r3, [r3]
 800c8b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8b8:	f023 0310 	bic.w	r3, r3, #16
 800c8bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	330c      	adds	r3, #12
 800c8c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c8ca:	65ba      	str	r2, [r7, #88]	; 0x58
 800c8cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c8d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c8d2:	e841 2300 	strex	r3, r2, [r1]
 800c8d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1e3      	bne.n	800c8a6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fa f930 	bl	8006b48 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800c8f4:	b292      	uxth	r2, r2
 800c8f6:	1a8a      	subs	r2, r1, r2
 800c8f8:	b292      	uxth	r2, r2
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c900:	e09a      	b.n	800ca38 <HAL_UART_IRQHandler+0x518>
 800c902:	bf00      	nop
 800c904:	0800ce4f 	.word	0x0800ce4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c910:	b29b      	uxth	r3, r3
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 808c 	beq.w	800ca3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 8087 	beq.w	800ca3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	330c      	adds	r3, #12
 800c934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c938:	e853 3f00 	ldrex	r3, [r3]
 800c93c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	330c      	adds	r3, #12
 800c94e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c952:	647a      	str	r2, [r7, #68]	; 0x44
 800c954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c95a:	e841 2300 	strex	r3, r2, [r1]
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c962:	2b00      	cmp	r3, #0
 800c964:	d1e3      	bne.n	800c92e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3314      	adds	r3, #20
 800c96c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c970:	e853 3f00 	ldrex	r3, [r3]
 800c974:	623b      	str	r3, [r7, #32]
   return(result);
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	f023 0301 	bic.w	r3, r3, #1
 800c97c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3314      	adds	r3, #20
 800c986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c98a:	633a      	str	r2, [r7, #48]	; 0x30
 800c98c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c98e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c992:	e841 2300 	strex	r3, r2, [r1]
 800c996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1e3      	bne.n	800c966 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2220      	movs	r2, #32
 800c9a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	330c      	adds	r3, #12
 800c9b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	e853 3f00 	ldrex	r3, [r3]
 800c9ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f023 0310 	bic.w	r3, r3, #16
 800c9c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	330c      	adds	r3, #12
 800c9cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c9d0:	61fa      	str	r2, [r7, #28]
 800c9d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d4:	69b9      	ldr	r1, [r7, #24]
 800c9d6:	69fa      	ldr	r2, [r7, #28]
 800c9d8:	e841 2300 	strex	r3, r2, [r1]
 800c9dc:	617b      	str	r3, [r7, #20]
   return(result);
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1e3      	bne.n	800c9ac <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9e8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c9f2:	e023      	b.n	800ca3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d009      	beq.n	800ca14 <HAL_UART_IRQHandler+0x4f4>
 800ca00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d003      	beq.n	800ca14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fa33 	bl	800ce78 <UART_Transmit_IT>
    return;
 800ca12:	e014      	b.n	800ca3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ca14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00e      	beq.n	800ca3e <HAL_UART_IRQHandler+0x51e>
 800ca20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d008      	beq.n	800ca3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fa73 	bl	800cf18 <UART_EndTransmit_IT>
    return;
 800ca32:	e004      	b.n	800ca3e <HAL_UART_IRQHandler+0x51e>
    return;
 800ca34:	bf00      	nop
 800ca36:	e002      	b.n	800ca3e <HAL_UART_IRQHandler+0x51e>
      return;
 800ca38:	bf00      	nop
 800ca3a:	e000      	b.n	800ca3e <HAL_UART_IRQHandler+0x51e>
      return;
 800ca3c:	bf00      	nop
  }
}
 800ca3e:	37e8      	adds	r7, #232	; 0xe8
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800cac4:	bf00      	nop
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	460b      	mov	r3, r1
 800caee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a10      	ldr	r2, [pc, #64]	; (800cb48 <UART_InitCallbacksToDefault+0x4c>)
 800cb08:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a0f      	ldr	r2, [pc, #60]	; (800cb4c <UART_InitCallbacksToDefault+0x50>)
 800cb0e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	4a0f      	ldr	r2, [pc, #60]	; (800cb50 <UART_InitCallbacksToDefault+0x54>)
 800cb14:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	4a0e      	ldr	r2, [pc, #56]	; (800cb54 <UART_InitCallbacksToDefault+0x58>)
 800cb1a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a0e      	ldr	r2, [pc, #56]	; (800cb58 <UART_InitCallbacksToDefault+0x5c>)
 800cb20:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a0d      	ldr	r2, [pc, #52]	; (800cb5c <UART_InitCallbacksToDefault+0x60>)
 800cb26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a0d      	ldr	r2, [pc, #52]	; (800cb60 <UART_InitCallbacksToDefault+0x64>)
 800cb2c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	4a0c      	ldr	r2, [pc, #48]	; (800cb64 <UART_InitCallbacksToDefault+0x68>)
 800cb32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a0c      	ldr	r2, [pc, #48]	; (800cb68 <UART_InitCallbacksToDefault+0x6c>)
 800cb38:	669a      	str	r2, [r3, #104]	; 0x68

}
 800cb3a:	bf00      	nop
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	0800ca59 	.word	0x0800ca59
 800cb4c:	0800ca45 	.word	0x0800ca45
 800cb50:	0800ca81 	.word	0x0800ca81
 800cb54:	0800ca6d 	.word	0x0800ca6d
 800cb58:	0800ca95 	.word	0x0800ca95
 800cb5c:	0800caa9 	.word	0x0800caa9
 800cb60:	0800cabd 	.word	0x0800cabd
 800cb64:	0800cad1 	.word	0x0800cad1
 800cb68:	0800cae5 	.word	0x0800cae5

0800cb6c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b090      	sub	sp, #64	; 0x40
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb78:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d137      	bne.n	800cbf8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800cb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	3314      	adds	r3, #20
 800cb94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb98:	e853 3f00 	ldrex	r3, [r3]
 800cb9c:	623b      	str	r3, [r7, #32]
   return(result);
 800cb9e:	6a3b      	ldr	r3, [r7, #32]
 800cba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cba4:	63bb      	str	r3, [r7, #56]	; 0x38
 800cba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	3314      	adds	r3, #20
 800cbac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbae:	633a      	str	r2, [r7, #48]	; 0x30
 800cbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbb6:	e841 2300 	strex	r3, r2, [r1]
 800cbba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d1e5      	bne.n	800cb8e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	330c      	adds	r3, #12
 800cbc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	e853 3f00 	ldrex	r3, [r3]
 800cbd0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd8:	637b      	str	r3, [r7, #52]	; 0x34
 800cbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	330c      	adds	r3, #12
 800cbe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbe2:	61fa      	str	r2, [r7, #28]
 800cbe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe6:	69b9      	ldr	r1, [r7, #24]
 800cbe8:	69fa      	ldr	r2, [r7, #28]
 800cbea:	e841 2300 	strex	r3, r2, [r1]
 800cbee:	617b      	str	r3, [r7, #20]
   return(result);
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d1e5      	bne.n	800cbc2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cbf6:	e003      	b.n	800cc00 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800cbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800cbfe:	4798      	blx	r3
}
 800cc00:	bf00      	nop
 800cc02:	3740      	adds	r7, #64	; 0x40
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}

0800cc08 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc14:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc1e:	bf00      	nop
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc42:	2b80      	cmp	r3, #128	; 0x80
 800cc44:	bf0c      	ite	eq
 800cc46:	2301      	moveq	r3, #1
 800cc48:	2300      	movne	r3, #0
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	2b21      	cmp	r3, #33	; 0x21
 800cc58:	d108      	bne.n	800cc6c <UART_DMAError+0x46>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d005      	beq.n	800cc6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2200      	movs	r2, #0
 800cc64:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800cc66:	68b8      	ldr	r0, [r7, #8]
 800cc68:	f000 f866 	bl	800cd38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cc6c:	68bb      	ldr	r3, [r7, #8]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc76:	2b40      	cmp	r3, #64	; 0x40
 800cc78:	bf0c      	ite	eq
 800cc7a:	2301      	moveq	r3, #1
 800cc7c:	2300      	movne	r3, #0
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b22      	cmp	r3, #34	; 0x22
 800cc8c:	d108      	bne.n	800cca0 <UART_DMAError+0x7a>
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d005      	beq.n	800cca0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2200      	movs	r2, #0
 800cc98:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800cc9a:	68b8      	ldr	r0, [r7, #8]
 800cc9c:	f000 f874 	bl	800cd88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca4:	f043 0210 	orr.w	r2, r3, #16
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccb0:	68b8      	ldr	r0, [r7, #8]
 800ccb2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccb4:	bf00      	nop
 800ccb6:	3710      	adds	r7, #16
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}

0800ccbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	60f8      	str	r0, [r7, #12]
 800ccc4:	60b9      	str	r1, [r7, #8]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	68ba      	ldr	r2, [r7, #8]
 800ccce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	88fa      	ldrh	r2, [r7, #6]
 800ccd4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	88fa      	ldrh	r2, [r7, #6]
 800ccda:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2222      	movs	r2, #34	; 0x22
 800cce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	691b      	ldr	r3, [r3, #16]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d007      	beq.n	800cd0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	68da      	ldr	r2, [r3, #12]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	695a      	ldr	r2, [r3, #20]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f042 0201 	orr.w	r2, r2, #1
 800cd18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68da      	ldr	r2, [r3, #12]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	f042 0220 	orr.w	r2, r2, #32
 800cd28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	3714      	adds	r7, #20
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b089      	sub	sp, #36	; 0x24
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	330c      	adds	r3, #12
 800cd46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	e853 3f00 	ldrex	r3, [r3]
 800cd4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cd56:	61fb      	str	r3, [r7, #28]
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	330c      	adds	r3, #12
 800cd5e:	69fa      	ldr	r2, [r7, #28]
 800cd60:	61ba      	str	r2, [r7, #24]
 800cd62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd64:	6979      	ldr	r1, [r7, #20]
 800cd66:	69ba      	ldr	r2, [r7, #24]
 800cd68:	e841 2300 	strex	r3, r2, [r1]
 800cd6c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1e5      	bne.n	800cd40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2220      	movs	r2, #32
 800cd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800cd7c:	bf00      	nop
 800cd7e:	3724      	adds	r7, #36	; 0x24
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b095      	sub	sp, #84	; 0x54
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	330c      	adds	r3, #12
 800cd96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9a:	e853 3f00 	ldrex	r3, [r3]
 800cd9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cda6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	330c      	adds	r3, #12
 800cdae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cdb0:	643a      	str	r2, [r7, #64]	; 0x40
 800cdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdb8:	e841 2300 	strex	r3, r2, [r1]
 800cdbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d1e5      	bne.n	800cd90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	3314      	adds	r3, #20
 800cdca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdcc:	6a3b      	ldr	r3, [r7, #32]
 800cdce:	e853 3f00 	ldrex	r3, [r3]
 800cdd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	f023 0301 	bic.w	r3, r3, #1
 800cdda:	64bb      	str	r3, [r7, #72]	; 0x48
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	3314      	adds	r3, #20
 800cde2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cde4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cde8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cdea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdec:	e841 2300 	strex	r3, r2, [r1]
 800cdf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1e5      	bne.n	800cdc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d119      	bne.n	800ce34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	330c      	adds	r3, #12
 800ce06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	e853 3f00 	ldrex	r3, [r3]
 800ce0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	f023 0310 	bic.w	r3, r3, #16
 800ce16:	647b      	str	r3, [r7, #68]	; 0x44
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	330c      	adds	r3, #12
 800ce1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce20:	61ba      	str	r2, [r7, #24]
 800ce22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce24:	6979      	ldr	r1, [r7, #20]
 800ce26:	69ba      	ldr	r2, [r7, #24]
 800ce28:	e841 2300 	strex	r3, r2, [r1]
 800ce2c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1e5      	bne.n	800ce00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2220      	movs	r2, #32
 800ce38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ce42:	bf00      	nop
 800ce44:	3754      	adds	r7, #84	; 0x54
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2200      	movs	r2, #0
 800ce60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce70:	bf00      	nop
 800ce72:	3710      	adds	r7, #16
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b21      	cmp	r3, #33	; 0x21
 800ce8a:	d13e      	bne.n	800cf0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce94:	d114      	bne.n	800cec0 <UART_Transmit_IT+0x48>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d110      	bne.n	800cec0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	881b      	ldrh	r3, [r3, #0]
 800cea8:	461a      	mov	r2, r3
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ceb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6a1b      	ldr	r3, [r3, #32]
 800ceb8:	1c9a      	adds	r2, r3, #2
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	621a      	str	r2, [r3, #32]
 800cebe:	e008      	b.n	800ced2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6a1b      	ldr	r3, [r3, #32]
 800cec4:	1c59      	adds	r1, r3, #1
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	6211      	str	r1, [r2, #32]
 800ceca:	781a      	ldrb	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	3b01      	subs	r3, #1
 800ceda:	b29b      	uxth	r3, r3
 800cedc:	687a      	ldr	r2, [r7, #4]
 800cede:	4619      	mov	r1, r3
 800cee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10f      	bne.n	800cf06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	68da      	ldr	r2, [r3, #12]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	e000      	b.n	800cf0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cf0a:	2302      	movs	r3, #2
  }
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3714      	adds	r7, #20
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2220      	movs	r2, #32
 800cf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cf40:	2300      	movs	r3, #0
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b08c      	sub	sp, #48	; 0x30
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf58:	b2db      	uxtb	r3, r3
 800cf5a:	2b22      	cmp	r3, #34	; 0x22
 800cf5c:	f040 80ad 	bne.w	800d0ba <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	689b      	ldr	r3, [r3, #8]
 800cf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf68:	d117      	bne.n	800cf9a <UART_Receive_IT+0x50>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d113      	bne.n	800cf9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf88:	b29a      	uxth	r2, r3
 800cf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf92:	1c9a      	adds	r2, r3, #2
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	629a      	str	r2, [r3, #40]	; 0x28
 800cf98:	e026      	b.n	800cfe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cfac:	d007      	beq.n	800cfbe <UART_Receive_IT+0x74>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10a      	bne.n	800cfcc <UART_Receive_IT+0x82>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d106      	bne.n	800cfcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	701a      	strb	r2, [r3, #0]
 800cfca:	e008      	b.n	800cfde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	b2db      	uxtb	r3, r3
 800cfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe2:	1c5a      	adds	r2, r3, #1
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	3b01      	subs	r3, #1
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	4619      	mov	r1, r3
 800cff6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d15c      	bne.n	800d0b6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68da      	ldr	r2, [r3, #12]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f022 0220 	bic.w	r2, r2, #32
 800d00a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	68da      	ldr	r2, [r3, #12]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d01a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	695a      	ldr	r2, [r3, #20]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f022 0201 	bic.w	r2, r2, #1
 800d02a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d038:	2b01      	cmp	r3, #1
 800d03a:	d136      	bne.n	800d0aa <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	330c      	adds	r3, #12
 800d048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	e853 3f00 	ldrex	r3, [r3]
 800d050:	613b      	str	r3, [r7, #16]
   return(result);
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	f023 0310 	bic.w	r3, r3, #16
 800d058:	627b      	str	r3, [r7, #36]	; 0x24
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	330c      	adds	r3, #12
 800d060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d062:	623a      	str	r2, [r7, #32]
 800d064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d066:	69f9      	ldr	r1, [r7, #28]
 800d068:	6a3a      	ldr	r2, [r7, #32]
 800d06a:	e841 2300 	strex	r3, r2, [r1]
 800d06e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d070:	69bb      	ldr	r3, [r7, #24]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1e5      	bne.n	800d042 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 0310 	and.w	r3, r3, #16
 800d080:	2b10      	cmp	r3, #16
 800d082:	d10a      	bne.n	800d09a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d084:	2300      	movs	r3, #0
 800d086:	60fb      	str	r3, [r7, #12]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	685b      	ldr	r3, [r3, #4]
 800d096:	60fb      	str	r3, [r7, #12]
 800d098:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800d0a2:	4611      	mov	r1, r2
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	4798      	blx	r3
 800d0a8:	e003      	b.n	800d0b2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e002      	b.n	800d0bc <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e000      	b.n	800d0bc <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800d0ba:	2302      	movs	r3, #2
  }
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3730      	adds	r7, #48	; 0x30
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0c8:	b0c0      	sub	sp, #256	; 0x100
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	691b      	ldr	r3, [r3, #16]
 800d0d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0e0:	68d9      	ldr	r1, [r3, #12]
 800d0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	ea40 0301 	orr.w	r3, r0, r1
 800d0ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d0ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f2:	689a      	ldr	r2, [r3, #8]
 800d0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0f8:	691b      	ldr	r3, [r3, #16]
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d100:	695b      	ldr	r3, [r3, #20]
 800d102:	431a      	orrs	r2, r3
 800d104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d108:	69db      	ldr	r3, [r3, #28]
 800d10a:	4313      	orrs	r3, r2
 800d10c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d11c:	f021 010c 	bic.w	r1, r1, #12
 800d120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d12a:	430b      	orrs	r3, r1
 800d12c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d13e:	6999      	ldr	r1, [r3, #24]
 800d140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d144:	681a      	ldr	r2, [r3, #0]
 800d146:	ea40 0301 	orr.w	r3, r0, r1
 800d14a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	4b8f      	ldr	r3, [pc, #572]	; (800d390 <UART_SetConfig+0x2cc>)
 800d154:	429a      	cmp	r2, r3
 800d156:	d005      	beq.n	800d164 <UART_SetConfig+0xa0>
 800d158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	4b8d      	ldr	r3, [pc, #564]	; (800d394 <UART_SetConfig+0x2d0>)
 800d160:	429a      	cmp	r2, r3
 800d162:	d104      	bne.n	800d16e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d164:	f7fd fac8 	bl	800a6f8 <HAL_RCC_GetPCLK2Freq>
 800d168:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d16c:	e003      	b.n	800d176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d16e:	f7fd faaf 	bl	800a6d0 <HAL_RCC_GetPCLK1Freq>
 800d172:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d180:	f040 810c 	bne.w	800d39c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d188:	2200      	movs	r2, #0
 800d18a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d18e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d196:	4622      	mov	r2, r4
 800d198:	462b      	mov	r3, r5
 800d19a:	1891      	adds	r1, r2, r2
 800d19c:	65b9      	str	r1, [r7, #88]	; 0x58
 800d19e:	415b      	adcs	r3, r3
 800d1a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d1a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d1a6:	4621      	mov	r1, r4
 800d1a8:	eb12 0801 	adds.w	r8, r2, r1
 800d1ac:	4629      	mov	r1, r5
 800d1ae:	eb43 0901 	adc.w	r9, r3, r1
 800d1b2:	f04f 0200 	mov.w	r2, #0
 800d1b6:	f04f 0300 	mov.w	r3, #0
 800d1ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d1be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d1c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d1c6:	4690      	mov	r8, r2
 800d1c8:	4699      	mov	r9, r3
 800d1ca:	4623      	mov	r3, r4
 800d1cc:	eb18 0303 	adds.w	r3, r8, r3
 800d1d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d1d4:	462b      	mov	r3, r5
 800d1d6:	eb49 0303 	adc.w	r3, r9, r3
 800d1da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d1ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800d1ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d1f2:	460b      	mov	r3, r1
 800d1f4:	18db      	adds	r3, r3, r3
 800d1f6:	653b      	str	r3, [r7, #80]	; 0x50
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	eb42 0303 	adc.w	r3, r2, r3
 800d1fe:	657b      	str	r3, [r7, #84]	; 0x54
 800d200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800d208:	f7f3 fcd4 	bl	8000bb4 <__aeabi_uldivmod>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4b61      	ldr	r3, [pc, #388]	; (800d398 <UART_SetConfig+0x2d4>)
 800d212:	fba3 2302 	umull	r2, r3, r3, r2
 800d216:	095b      	lsrs	r3, r3, #5
 800d218:	011c      	lsls	r4, r3, #4
 800d21a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d21e:	2200      	movs	r2, #0
 800d220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d224:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800d228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800d22c:	4642      	mov	r2, r8
 800d22e:	464b      	mov	r3, r9
 800d230:	1891      	adds	r1, r2, r2
 800d232:	64b9      	str	r1, [r7, #72]	; 0x48
 800d234:	415b      	adcs	r3, r3
 800d236:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d23c:	4641      	mov	r1, r8
 800d23e:	eb12 0a01 	adds.w	sl, r2, r1
 800d242:	4649      	mov	r1, r9
 800d244:	eb43 0b01 	adc.w	fp, r3, r1
 800d248:	f04f 0200 	mov.w	r2, #0
 800d24c:	f04f 0300 	mov.w	r3, #0
 800d250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d25c:	4692      	mov	sl, r2
 800d25e:	469b      	mov	fp, r3
 800d260:	4643      	mov	r3, r8
 800d262:	eb1a 0303 	adds.w	r3, sl, r3
 800d266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d26a:	464b      	mov	r3, r9
 800d26c:	eb4b 0303 	adc.w	r3, fp, r3
 800d270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d280:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800d284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d288:	460b      	mov	r3, r1
 800d28a:	18db      	adds	r3, r3, r3
 800d28c:	643b      	str	r3, [r7, #64]	; 0x40
 800d28e:	4613      	mov	r3, r2
 800d290:	eb42 0303 	adc.w	r3, r2, r3
 800d294:	647b      	str	r3, [r7, #68]	; 0x44
 800d296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d29a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800d29e:	f7f3 fc89 	bl	8000bb4 <__aeabi_uldivmod>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4611      	mov	r1, r2
 800d2a8:	4b3b      	ldr	r3, [pc, #236]	; (800d398 <UART_SetConfig+0x2d4>)
 800d2aa:	fba3 2301 	umull	r2, r3, r3, r1
 800d2ae:	095b      	lsrs	r3, r3, #5
 800d2b0:	2264      	movs	r2, #100	; 0x64
 800d2b2:	fb02 f303 	mul.w	r3, r2, r3
 800d2b6:	1acb      	subs	r3, r1, r3
 800d2b8:	00db      	lsls	r3, r3, #3
 800d2ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800d2be:	4b36      	ldr	r3, [pc, #216]	; (800d398 <UART_SetConfig+0x2d4>)
 800d2c0:	fba3 2302 	umull	r2, r3, r3, r2
 800d2c4:	095b      	lsrs	r3, r3, #5
 800d2c6:	005b      	lsls	r3, r3, #1
 800d2c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d2cc:	441c      	add	r4, r3
 800d2ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800d2dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d2e0:	4642      	mov	r2, r8
 800d2e2:	464b      	mov	r3, r9
 800d2e4:	1891      	adds	r1, r2, r2
 800d2e6:	63b9      	str	r1, [r7, #56]	; 0x38
 800d2e8:	415b      	adcs	r3, r3
 800d2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d2ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d2f0:	4641      	mov	r1, r8
 800d2f2:	1851      	adds	r1, r2, r1
 800d2f4:	6339      	str	r1, [r7, #48]	; 0x30
 800d2f6:	4649      	mov	r1, r9
 800d2f8:	414b      	adcs	r3, r1
 800d2fa:	637b      	str	r3, [r7, #52]	; 0x34
 800d2fc:	f04f 0200 	mov.w	r2, #0
 800d300:	f04f 0300 	mov.w	r3, #0
 800d304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800d308:	4659      	mov	r1, fp
 800d30a:	00cb      	lsls	r3, r1, #3
 800d30c:	4651      	mov	r1, sl
 800d30e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d312:	4651      	mov	r1, sl
 800d314:	00ca      	lsls	r2, r1, #3
 800d316:	4610      	mov	r0, r2
 800d318:	4619      	mov	r1, r3
 800d31a:	4603      	mov	r3, r0
 800d31c:	4642      	mov	r2, r8
 800d31e:	189b      	adds	r3, r3, r2
 800d320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d324:	464b      	mov	r3, r9
 800d326:	460a      	mov	r2, r1
 800d328:	eb42 0303 	adc.w	r3, r2, r3
 800d32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d33c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800d344:	460b      	mov	r3, r1
 800d346:	18db      	adds	r3, r3, r3
 800d348:	62bb      	str	r3, [r7, #40]	; 0x28
 800d34a:	4613      	mov	r3, r2
 800d34c:	eb42 0303 	adc.w	r3, r2, r3
 800d350:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800d35a:	f7f3 fc2b 	bl	8000bb4 <__aeabi_uldivmod>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	4b0d      	ldr	r3, [pc, #52]	; (800d398 <UART_SetConfig+0x2d4>)
 800d364:	fba3 1302 	umull	r1, r3, r3, r2
 800d368:	095b      	lsrs	r3, r3, #5
 800d36a:	2164      	movs	r1, #100	; 0x64
 800d36c:	fb01 f303 	mul.w	r3, r1, r3
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	00db      	lsls	r3, r3, #3
 800d374:	3332      	adds	r3, #50	; 0x32
 800d376:	4a08      	ldr	r2, [pc, #32]	; (800d398 <UART_SetConfig+0x2d4>)
 800d378:	fba2 2303 	umull	r2, r3, r2, r3
 800d37c:	095b      	lsrs	r3, r3, #5
 800d37e:	f003 0207 	and.w	r2, r3, #7
 800d382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4422      	add	r2, r4
 800d38a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d38c:	e105      	b.n	800d59a <UART_SetConfig+0x4d6>
 800d38e:	bf00      	nop
 800d390:	40011000 	.word	0x40011000
 800d394:	40011400 	.word	0x40011400
 800d398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d39c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d3a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800d3ae:	4642      	mov	r2, r8
 800d3b0:	464b      	mov	r3, r9
 800d3b2:	1891      	adds	r1, r2, r2
 800d3b4:	6239      	str	r1, [r7, #32]
 800d3b6:	415b      	adcs	r3, r3
 800d3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800d3ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d3be:	4641      	mov	r1, r8
 800d3c0:	1854      	adds	r4, r2, r1
 800d3c2:	4649      	mov	r1, r9
 800d3c4:	eb43 0501 	adc.w	r5, r3, r1
 800d3c8:	f04f 0200 	mov.w	r2, #0
 800d3cc:	f04f 0300 	mov.w	r3, #0
 800d3d0:	00eb      	lsls	r3, r5, #3
 800d3d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d3d6:	00e2      	lsls	r2, r4, #3
 800d3d8:	4614      	mov	r4, r2
 800d3da:	461d      	mov	r5, r3
 800d3dc:	4643      	mov	r3, r8
 800d3de:	18e3      	adds	r3, r4, r3
 800d3e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d3e4:	464b      	mov	r3, r9
 800d3e6:	eb45 0303 	adc.w	r3, r5, r3
 800d3ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d3fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d3fe:	f04f 0200 	mov.w	r2, #0
 800d402:	f04f 0300 	mov.w	r3, #0
 800d406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d40a:	4629      	mov	r1, r5
 800d40c:	008b      	lsls	r3, r1, #2
 800d40e:	4621      	mov	r1, r4
 800d410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d414:	4621      	mov	r1, r4
 800d416:	008a      	lsls	r2, r1, #2
 800d418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800d41c:	f7f3 fbca 	bl	8000bb4 <__aeabi_uldivmod>
 800d420:	4602      	mov	r2, r0
 800d422:	460b      	mov	r3, r1
 800d424:	4b60      	ldr	r3, [pc, #384]	; (800d5a8 <UART_SetConfig+0x4e4>)
 800d426:	fba3 2302 	umull	r2, r3, r3, r2
 800d42a:	095b      	lsrs	r3, r3, #5
 800d42c:	011c      	lsls	r4, r3, #4
 800d42e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d432:	2200      	movs	r2, #0
 800d434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d438:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d43c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d440:	4642      	mov	r2, r8
 800d442:	464b      	mov	r3, r9
 800d444:	1891      	adds	r1, r2, r2
 800d446:	61b9      	str	r1, [r7, #24]
 800d448:	415b      	adcs	r3, r3
 800d44a:	61fb      	str	r3, [r7, #28]
 800d44c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d450:	4641      	mov	r1, r8
 800d452:	1851      	adds	r1, r2, r1
 800d454:	6139      	str	r1, [r7, #16]
 800d456:	4649      	mov	r1, r9
 800d458:	414b      	adcs	r3, r1
 800d45a:	617b      	str	r3, [r7, #20]
 800d45c:	f04f 0200 	mov.w	r2, #0
 800d460:	f04f 0300 	mov.w	r3, #0
 800d464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d468:	4659      	mov	r1, fp
 800d46a:	00cb      	lsls	r3, r1, #3
 800d46c:	4651      	mov	r1, sl
 800d46e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d472:	4651      	mov	r1, sl
 800d474:	00ca      	lsls	r2, r1, #3
 800d476:	4610      	mov	r0, r2
 800d478:	4619      	mov	r1, r3
 800d47a:	4603      	mov	r3, r0
 800d47c:	4642      	mov	r2, r8
 800d47e:	189b      	adds	r3, r3, r2
 800d480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d484:	464b      	mov	r3, r9
 800d486:	460a      	mov	r2, r1
 800d488:	eb42 0303 	adc.w	r3, r2, r3
 800d48c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	67bb      	str	r3, [r7, #120]	; 0x78
 800d49a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d49c:	f04f 0200 	mov.w	r2, #0
 800d4a0:	f04f 0300 	mov.w	r3, #0
 800d4a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800d4a8:	4649      	mov	r1, r9
 800d4aa:	008b      	lsls	r3, r1, #2
 800d4ac:	4641      	mov	r1, r8
 800d4ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d4b2:	4641      	mov	r1, r8
 800d4b4:	008a      	lsls	r2, r1, #2
 800d4b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800d4ba:	f7f3 fb7b 	bl	8000bb4 <__aeabi_uldivmod>
 800d4be:	4602      	mov	r2, r0
 800d4c0:	460b      	mov	r3, r1
 800d4c2:	4b39      	ldr	r3, [pc, #228]	; (800d5a8 <UART_SetConfig+0x4e4>)
 800d4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800d4c8:	095b      	lsrs	r3, r3, #5
 800d4ca:	2164      	movs	r1, #100	; 0x64
 800d4cc:	fb01 f303 	mul.w	r3, r1, r3
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	011b      	lsls	r3, r3, #4
 800d4d4:	3332      	adds	r3, #50	; 0x32
 800d4d6:	4a34      	ldr	r2, [pc, #208]	; (800d5a8 <UART_SetConfig+0x4e4>)
 800d4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d4dc:	095b      	lsrs	r3, r3, #5
 800d4de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4e2:	441c      	add	r4, r3
 800d4e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	673b      	str	r3, [r7, #112]	; 0x70
 800d4ec:	677a      	str	r2, [r7, #116]	; 0x74
 800d4ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800d4f2:	4642      	mov	r2, r8
 800d4f4:	464b      	mov	r3, r9
 800d4f6:	1891      	adds	r1, r2, r2
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	415b      	adcs	r3, r3
 800d4fc:	60fb      	str	r3, [r7, #12]
 800d4fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d502:	4641      	mov	r1, r8
 800d504:	1851      	adds	r1, r2, r1
 800d506:	6039      	str	r1, [r7, #0]
 800d508:	4649      	mov	r1, r9
 800d50a:	414b      	adcs	r3, r1
 800d50c:	607b      	str	r3, [r7, #4]
 800d50e:	f04f 0200 	mov.w	r2, #0
 800d512:	f04f 0300 	mov.w	r3, #0
 800d516:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d51a:	4659      	mov	r1, fp
 800d51c:	00cb      	lsls	r3, r1, #3
 800d51e:	4651      	mov	r1, sl
 800d520:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d524:	4651      	mov	r1, sl
 800d526:	00ca      	lsls	r2, r1, #3
 800d528:	4610      	mov	r0, r2
 800d52a:	4619      	mov	r1, r3
 800d52c:	4603      	mov	r3, r0
 800d52e:	4642      	mov	r2, r8
 800d530:	189b      	adds	r3, r3, r2
 800d532:	66bb      	str	r3, [r7, #104]	; 0x68
 800d534:	464b      	mov	r3, r9
 800d536:	460a      	mov	r2, r1
 800d538:	eb42 0303 	adc.w	r3, r2, r3
 800d53c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	663b      	str	r3, [r7, #96]	; 0x60
 800d548:	667a      	str	r2, [r7, #100]	; 0x64
 800d54a:	f04f 0200 	mov.w	r2, #0
 800d54e:	f04f 0300 	mov.w	r3, #0
 800d552:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d556:	4649      	mov	r1, r9
 800d558:	008b      	lsls	r3, r1, #2
 800d55a:	4641      	mov	r1, r8
 800d55c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d560:	4641      	mov	r1, r8
 800d562:	008a      	lsls	r2, r1, #2
 800d564:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d568:	f7f3 fb24 	bl	8000bb4 <__aeabi_uldivmod>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <UART_SetConfig+0x4e4>)
 800d572:	fba3 1302 	umull	r1, r3, r3, r2
 800d576:	095b      	lsrs	r3, r3, #5
 800d578:	2164      	movs	r1, #100	; 0x64
 800d57a:	fb01 f303 	mul.w	r3, r1, r3
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	011b      	lsls	r3, r3, #4
 800d582:	3332      	adds	r3, #50	; 0x32
 800d584:	4a08      	ldr	r2, [pc, #32]	; (800d5a8 <UART_SetConfig+0x4e4>)
 800d586:	fba2 2303 	umull	r2, r3, r2, r3
 800d58a:	095b      	lsrs	r3, r3, #5
 800d58c:	f003 020f 	and.w	r2, r3, #15
 800d590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4422      	add	r2, r4
 800d598:	609a      	str	r2, [r3, #8]
}
 800d59a:	bf00      	nop
 800d59c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5a6:	bf00      	nop
 800d5a8:	51eb851f 	.word	0x51eb851f

0800d5ac <__errno>:
 800d5ac:	4b01      	ldr	r3, [pc, #4]	; (800d5b4 <__errno+0x8>)
 800d5ae:	6818      	ldr	r0, [r3, #0]
 800d5b0:	4770      	bx	lr
 800d5b2:	bf00      	nop
 800d5b4:	20000240 	.word	0x20000240

0800d5b8 <__libc_init_array>:
 800d5b8:	b570      	push	{r4, r5, r6, lr}
 800d5ba:	4d0d      	ldr	r5, [pc, #52]	; (800d5f0 <__libc_init_array+0x38>)
 800d5bc:	4c0d      	ldr	r4, [pc, #52]	; (800d5f4 <__libc_init_array+0x3c>)
 800d5be:	1b64      	subs	r4, r4, r5
 800d5c0:	10a4      	asrs	r4, r4, #2
 800d5c2:	2600      	movs	r6, #0
 800d5c4:	42a6      	cmp	r6, r4
 800d5c6:	d109      	bne.n	800d5dc <__libc_init_array+0x24>
 800d5c8:	4d0b      	ldr	r5, [pc, #44]	; (800d5f8 <__libc_init_array+0x40>)
 800d5ca:	4c0c      	ldr	r4, [pc, #48]	; (800d5fc <__libc_init_array+0x44>)
 800d5cc:	f001 fcc4 	bl	800ef58 <_init>
 800d5d0:	1b64      	subs	r4, r4, r5
 800d5d2:	10a4      	asrs	r4, r4, #2
 800d5d4:	2600      	movs	r6, #0
 800d5d6:	42a6      	cmp	r6, r4
 800d5d8:	d105      	bne.n	800d5e6 <__libc_init_array+0x2e>
 800d5da:	bd70      	pop	{r4, r5, r6, pc}
 800d5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5e0:	4798      	blx	r3
 800d5e2:	3601      	adds	r6, #1
 800d5e4:	e7ee      	b.n	800d5c4 <__libc_init_array+0xc>
 800d5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5ea:	4798      	blx	r3
 800d5ec:	3601      	adds	r6, #1
 800d5ee:	e7f2      	b.n	800d5d6 <__libc_init_array+0x1e>
 800d5f0:	0800f220 	.word	0x0800f220
 800d5f4:	0800f220 	.word	0x0800f220
 800d5f8:	0800f220 	.word	0x0800f220
 800d5fc:	0800f224 	.word	0x0800f224

0800d600 <memcpy>:
 800d600:	440a      	add	r2, r1
 800d602:	4291      	cmp	r1, r2
 800d604:	f100 33ff 	add.w	r3, r0, #4294967295
 800d608:	d100      	bne.n	800d60c <memcpy+0xc>
 800d60a:	4770      	bx	lr
 800d60c:	b510      	push	{r4, lr}
 800d60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d616:	4291      	cmp	r1, r2
 800d618:	d1f9      	bne.n	800d60e <memcpy+0xe>
 800d61a:	bd10      	pop	{r4, pc}

0800d61c <memset>:
 800d61c:	4402      	add	r2, r0
 800d61e:	4603      	mov	r3, r0
 800d620:	4293      	cmp	r3, r2
 800d622:	d100      	bne.n	800d626 <memset+0xa>
 800d624:	4770      	bx	lr
 800d626:	f803 1b01 	strb.w	r1, [r3], #1
 800d62a:	e7f9      	b.n	800d620 <memset+0x4>
 800d62c:	0000      	movs	r0, r0
	...

0800d630 <cos>:
 800d630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d632:	ec53 2b10 	vmov	r2, r3, d0
 800d636:	4826      	ldr	r0, [pc, #152]	; (800d6d0 <cos+0xa0>)
 800d638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d63c:	4281      	cmp	r1, r0
 800d63e:	dc06      	bgt.n	800d64e <cos+0x1e>
 800d640:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d6c8 <cos+0x98>
 800d644:	b005      	add	sp, #20
 800d646:	f85d eb04 	ldr.w	lr, [sp], #4
 800d64a:	f000 bdf5 	b.w	800e238 <__kernel_cos>
 800d64e:	4821      	ldr	r0, [pc, #132]	; (800d6d4 <cos+0xa4>)
 800d650:	4281      	cmp	r1, r0
 800d652:	dd09      	ble.n	800d668 <cos+0x38>
 800d654:	ee10 0a10 	vmov	r0, s0
 800d658:	4619      	mov	r1, r3
 800d65a:	f7f2 fdc1 	bl	80001e0 <__aeabi_dsub>
 800d65e:	ec41 0b10 	vmov	d0, r0, r1
 800d662:	b005      	add	sp, #20
 800d664:	f85d fb04 	ldr.w	pc, [sp], #4
 800d668:	4668      	mov	r0, sp
 800d66a:	f000 f905 	bl	800d878 <__ieee754_rem_pio2>
 800d66e:	f000 0003 	and.w	r0, r0, #3
 800d672:	2801      	cmp	r0, #1
 800d674:	d00b      	beq.n	800d68e <cos+0x5e>
 800d676:	2802      	cmp	r0, #2
 800d678:	d016      	beq.n	800d6a8 <cos+0x78>
 800d67a:	b9e0      	cbnz	r0, 800d6b6 <cos+0x86>
 800d67c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d680:	ed9d 0b00 	vldr	d0, [sp]
 800d684:	f000 fdd8 	bl	800e238 <__kernel_cos>
 800d688:	ec51 0b10 	vmov	r0, r1, d0
 800d68c:	e7e7      	b.n	800d65e <cos+0x2e>
 800d68e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d692:	ed9d 0b00 	vldr	d0, [sp]
 800d696:	f001 f9e7 	bl	800ea68 <__kernel_sin>
 800d69a:	ec53 2b10 	vmov	r2, r3, d0
 800d69e:	ee10 0a10 	vmov	r0, s0
 800d6a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d6a6:	e7da      	b.n	800d65e <cos+0x2e>
 800d6a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6ac:	ed9d 0b00 	vldr	d0, [sp]
 800d6b0:	f000 fdc2 	bl	800e238 <__kernel_cos>
 800d6b4:	e7f1      	b.n	800d69a <cos+0x6a>
 800d6b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6ba:	ed9d 0b00 	vldr	d0, [sp]
 800d6be:	2001      	movs	r0, #1
 800d6c0:	f001 f9d2 	bl	800ea68 <__kernel_sin>
 800d6c4:	e7e0      	b.n	800d688 <cos+0x58>
 800d6c6:	bf00      	nop
	...
 800d6d0:	3fe921fb 	.word	0x3fe921fb
 800d6d4:	7fefffff 	.word	0x7fefffff

0800d6d8 <sin>:
 800d6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6da:	ec53 2b10 	vmov	r2, r3, d0
 800d6de:	4828      	ldr	r0, [pc, #160]	; (800d780 <sin+0xa8>)
 800d6e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d6e4:	4281      	cmp	r1, r0
 800d6e6:	dc07      	bgt.n	800d6f8 <sin+0x20>
 800d6e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d778 <sin+0xa0>
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	b005      	add	sp, #20
 800d6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6f4:	f001 b9b8 	b.w	800ea68 <__kernel_sin>
 800d6f8:	4822      	ldr	r0, [pc, #136]	; (800d784 <sin+0xac>)
 800d6fa:	4281      	cmp	r1, r0
 800d6fc:	dd09      	ble.n	800d712 <sin+0x3a>
 800d6fe:	ee10 0a10 	vmov	r0, s0
 800d702:	4619      	mov	r1, r3
 800d704:	f7f2 fd6c 	bl	80001e0 <__aeabi_dsub>
 800d708:	ec41 0b10 	vmov	d0, r0, r1
 800d70c:	b005      	add	sp, #20
 800d70e:	f85d fb04 	ldr.w	pc, [sp], #4
 800d712:	4668      	mov	r0, sp
 800d714:	f000 f8b0 	bl	800d878 <__ieee754_rem_pio2>
 800d718:	f000 0003 	and.w	r0, r0, #3
 800d71c:	2801      	cmp	r0, #1
 800d71e:	d00c      	beq.n	800d73a <sin+0x62>
 800d720:	2802      	cmp	r0, #2
 800d722:	d011      	beq.n	800d748 <sin+0x70>
 800d724:	b9f0      	cbnz	r0, 800d764 <sin+0x8c>
 800d726:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d72a:	ed9d 0b00 	vldr	d0, [sp]
 800d72e:	2001      	movs	r0, #1
 800d730:	f001 f99a 	bl	800ea68 <__kernel_sin>
 800d734:	ec51 0b10 	vmov	r0, r1, d0
 800d738:	e7e6      	b.n	800d708 <sin+0x30>
 800d73a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d73e:	ed9d 0b00 	vldr	d0, [sp]
 800d742:	f000 fd79 	bl	800e238 <__kernel_cos>
 800d746:	e7f5      	b.n	800d734 <sin+0x5c>
 800d748:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d74c:	ed9d 0b00 	vldr	d0, [sp]
 800d750:	2001      	movs	r0, #1
 800d752:	f001 f989 	bl	800ea68 <__kernel_sin>
 800d756:	ec53 2b10 	vmov	r2, r3, d0
 800d75a:	ee10 0a10 	vmov	r0, s0
 800d75e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d762:	e7d1      	b.n	800d708 <sin+0x30>
 800d764:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d768:	ed9d 0b00 	vldr	d0, [sp]
 800d76c:	f000 fd64 	bl	800e238 <__kernel_cos>
 800d770:	e7f1      	b.n	800d756 <sin+0x7e>
 800d772:	bf00      	nop
 800d774:	f3af 8000 	nop.w
	...
 800d780:	3fe921fb 	.word	0x3fe921fb
 800d784:	7fefffff 	.word	0x7fefffff

0800d788 <powf>:
 800d788:	b508      	push	{r3, lr}
 800d78a:	ed2d 8b04 	vpush	{d8-d9}
 800d78e:	eeb0 8a60 	vmov.f32	s16, s1
 800d792:	eeb0 9a40 	vmov.f32	s18, s0
 800d796:	f000 fa7b 	bl	800dc90 <__ieee754_powf>
 800d79a:	eeb4 8a48 	vcmp.f32	s16, s16
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	eef0 8a40 	vmov.f32	s17, s0
 800d7a6:	d63e      	bvs.n	800d826 <powf+0x9e>
 800d7a8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b0:	d112      	bne.n	800d7d8 <powf+0x50>
 800d7b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ba:	d039      	beq.n	800d830 <powf+0xa8>
 800d7bc:	eeb0 0a48 	vmov.f32	s0, s16
 800d7c0:	f001 fb4b 	bl	800ee5a <finitef>
 800d7c4:	b378      	cbz	r0, 800d826 <powf+0x9e>
 800d7c6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ce:	d52a      	bpl.n	800d826 <powf+0x9e>
 800d7d0:	f7ff feec 	bl	800d5ac <__errno>
 800d7d4:	2322      	movs	r3, #34	; 0x22
 800d7d6:	e014      	b.n	800d802 <powf+0x7a>
 800d7d8:	f001 fb3f 	bl	800ee5a <finitef>
 800d7dc:	b998      	cbnz	r0, 800d806 <powf+0x7e>
 800d7de:	eeb0 0a49 	vmov.f32	s0, s18
 800d7e2:	f001 fb3a 	bl	800ee5a <finitef>
 800d7e6:	b170      	cbz	r0, 800d806 <powf+0x7e>
 800d7e8:	eeb0 0a48 	vmov.f32	s0, s16
 800d7ec:	f001 fb35 	bl	800ee5a <finitef>
 800d7f0:	b148      	cbz	r0, 800d806 <powf+0x7e>
 800d7f2:	eef4 8a68 	vcmp.f32	s17, s17
 800d7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7fa:	d7e9      	bvc.n	800d7d0 <powf+0x48>
 800d7fc:	f7ff fed6 	bl	800d5ac <__errno>
 800d800:	2321      	movs	r3, #33	; 0x21
 800d802:	6003      	str	r3, [r0, #0]
 800d804:	e00f      	b.n	800d826 <powf+0x9e>
 800d806:	eef5 8a40 	vcmp.f32	s17, #0.0
 800d80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d80e:	d10a      	bne.n	800d826 <powf+0x9e>
 800d810:	eeb0 0a49 	vmov.f32	s0, s18
 800d814:	f001 fb21 	bl	800ee5a <finitef>
 800d818:	b128      	cbz	r0, 800d826 <powf+0x9e>
 800d81a:	eeb0 0a48 	vmov.f32	s0, s16
 800d81e:	f001 fb1c 	bl	800ee5a <finitef>
 800d822:	2800      	cmp	r0, #0
 800d824:	d1d4      	bne.n	800d7d0 <powf+0x48>
 800d826:	eeb0 0a68 	vmov.f32	s0, s17
 800d82a:	ecbd 8b04 	vpop	{d8-d9}
 800d82e:	bd08      	pop	{r3, pc}
 800d830:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d834:	e7f7      	b.n	800d826 <powf+0x9e>
	...

0800d838 <sqrtf>:
 800d838:	b508      	push	{r3, lr}
 800d83a:	ed2d 8b02 	vpush	{d8}
 800d83e:	eeb0 8a40 	vmov.f32	s16, s0
 800d842:	f000 fcf3 	bl	800e22c <__ieee754_sqrtf>
 800d846:	eeb4 8a48 	vcmp.f32	s16, s16
 800d84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d84e:	d60c      	bvs.n	800d86a <sqrtf+0x32>
 800d850:	eddf 8a07 	vldr	s17, [pc, #28]	; 800d870 <sqrtf+0x38>
 800d854:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85c:	d505      	bpl.n	800d86a <sqrtf+0x32>
 800d85e:	f7ff fea5 	bl	800d5ac <__errno>
 800d862:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d866:	2321      	movs	r3, #33	; 0x21
 800d868:	6003      	str	r3, [r0, #0]
 800d86a:	ecbd 8b02 	vpop	{d8}
 800d86e:	bd08      	pop	{r3, pc}
	...

0800d878 <__ieee754_rem_pio2>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	ed2d 8b02 	vpush	{d8}
 800d880:	ec55 4b10 	vmov	r4, r5, d0
 800d884:	4bca      	ldr	r3, [pc, #808]	; (800dbb0 <__ieee754_rem_pio2+0x338>)
 800d886:	b08b      	sub	sp, #44	; 0x2c
 800d888:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d88c:	4598      	cmp	r8, r3
 800d88e:	4682      	mov	sl, r0
 800d890:	9502      	str	r5, [sp, #8]
 800d892:	dc08      	bgt.n	800d8a6 <__ieee754_rem_pio2+0x2e>
 800d894:	2200      	movs	r2, #0
 800d896:	2300      	movs	r3, #0
 800d898:	ed80 0b00 	vstr	d0, [r0]
 800d89c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d8a0:	f04f 0b00 	mov.w	fp, #0
 800d8a4:	e028      	b.n	800d8f8 <__ieee754_rem_pio2+0x80>
 800d8a6:	4bc3      	ldr	r3, [pc, #780]	; (800dbb4 <__ieee754_rem_pio2+0x33c>)
 800d8a8:	4598      	cmp	r8, r3
 800d8aa:	dc78      	bgt.n	800d99e <__ieee754_rem_pio2+0x126>
 800d8ac:	9b02      	ldr	r3, [sp, #8]
 800d8ae:	4ec2      	ldr	r6, [pc, #776]	; (800dbb8 <__ieee754_rem_pio2+0x340>)
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	ee10 0a10 	vmov	r0, s0
 800d8b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800db78 <__ieee754_rem_pio2+0x300>)
 800d8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8bc:	4629      	mov	r1, r5
 800d8be:	dd39      	ble.n	800d934 <__ieee754_rem_pio2+0xbc>
 800d8c0:	f7f2 fc8e 	bl	80001e0 <__aeabi_dsub>
 800d8c4:	45b0      	cmp	r8, r6
 800d8c6:	4604      	mov	r4, r0
 800d8c8:	460d      	mov	r5, r1
 800d8ca:	d01b      	beq.n	800d904 <__ieee754_rem_pio2+0x8c>
 800d8cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800db80 <__ieee754_rem_pio2+0x308>)
 800d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d2:	f7f2 fc85 	bl	80001e0 <__aeabi_dsub>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	e9ca 2300 	strd	r2, r3, [sl]
 800d8de:	4620      	mov	r0, r4
 800d8e0:	4629      	mov	r1, r5
 800d8e2:	f7f2 fc7d 	bl	80001e0 <__aeabi_dsub>
 800d8e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800db80 <__ieee754_rem_pio2+0x308>)
 800d8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ec:	f7f2 fc78 	bl	80001e0 <__aeabi_dsub>
 800d8f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d8f4:	f04f 0b01 	mov.w	fp, #1
 800d8f8:	4658      	mov	r0, fp
 800d8fa:	b00b      	add	sp, #44	; 0x2c
 800d8fc:	ecbd 8b02 	vpop	{d8}
 800d900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d904:	a3a0      	add	r3, pc, #640	; (adr r3, 800db88 <__ieee754_rem_pio2+0x310>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fc69 	bl	80001e0 <__aeabi_dsub>
 800d90e:	a3a0      	add	r3, pc, #640	; (adr r3, 800db90 <__ieee754_rem_pio2+0x318>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	4604      	mov	r4, r0
 800d916:	460d      	mov	r5, r1
 800d918:	f7f2 fc62 	bl	80001e0 <__aeabi_dsub>
 800d91c:	4602      	mov	r2, r0
 800d91e:	460b      	mov	r3, r1
 800d920:	e9ca 2300 	strd	r2, r3, [sl]
 800d924:	4620      	mov	r0, r4
 800d926:	4629      	mov	r1, r5
 800d928:	f7f2 fc5a 	bl	80001e0 <__aeabi_dsub>
 800d92c:	a398      	add	r3, pc, #608	; (adr r3, 800db90 <__ieee754_rem_pio2+0x318>)
 800d92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d932:	e7db      	b.n	800d8ec <__ieee754_rem_pio2+0x74>
 800d934:	f7f2 fc56 	bl	80001e4 <__adddf3>
 800d938:	45b0      	cmp	r8, r6
 800d93a:	4604      	mov	r4, r0
 800d93c:	460d      	mov	r5, r1
 800d93e:	d016      	beq.n	800d96e <__ieee754_rem_pio2+0xf6>
 800d940:	a38f      	add	r3, pc, #572	; (adr r3, 800db80 <__ieee754_rem_pio2+0x308>)
 800d942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d946:	f7f2 fc4d 	bl	80001e4 <__adddf3>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	e9ca 2300 	strd	r2, r3, [sl]
 800d952:	4620      	mov	r0, r4
 800d954:	4629      	mov	r1, r5
 800d956:	f7f2 fc43 	bl	80001e0 <__aeabi_dsub>
 800d95a:	a389      	add	r3, pc, #548	; (adr r3, 800db80 <__ieee754_rem_pio2+0x308>)
 800d95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d960:	f7f2 fc40 	bl	80001e4 <__adddf3>
 800d964:	f04f 3bff 	mov.w	fp, #4294967295
 800d968:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d96c:	e7c4      	b.n	800d8f8 <__ieee754_rem_pio2+0x80>
 800d96e:	a386      	add	r3, pc, #536	; (adr r3, 800db88 <__ieee754_rem_pio2+0x310>)
 800d970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d974:	f7f2 fc36 	bl	80001e4 <__adddf3>
 800d978:	a385      	add	r3, pc, #532	; (adr r3, 800db90 <__ieee754_rem_pio2+0x318>)
 800d97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97e:	4604      	mov	r4, r0
 800d980:	460d      	mov	r5, r1
 800d982:	f7f2 fc2f 	bl	80001e4 <__adddf3>
 800d986:	4602      	mov	r2, r0
 800d988:	460b      	mov	r3, r1
 800d98a:	e9ca 2300 	strd	r2, r3, [sl]
 800d98e:	4620      	mov	r0, r4
 800d990:	4629      	mov	r1, r5
 800d992:	f7f2 fc25 	bl	80001e0 <__aeabi_dsub>
 800d996:	a37e      	add	r3, pc, #504	; (adr r3, 800db90 <__ieee754_rem_pio2+0x318>)
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	e7e0      	b.n	800d960 <__ieee754_rem_pio2+0xe8>
 800d99e:	4b87      	ldr	r3, [pc, #540]	; (800dbbc <__ieee754_rem_pio2+0x344>)
 800d9a0:	4598      	cmp	r8, r3
 800d9a2:	f300 80d9 	bgt.w	800db58 <__ieee754_rem_pio2+0x2e0>
 800d9a6:	f001 f93f 	bl	800ec28 <fabs>
 800d9aa:	ec55 4b10 	vmov	r4, r5, d0
 800d9ae:	ee10 0a10 	vmov	r0, s0
 800d9b2:	a379      	add	r3, pc, #484	; (adr r3, 800db98 <__ieee754_rem_pio2+0x320>)
 800d9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b8:	4629      	mov	r1, r5
 800d9ba:	f7f2 fdc9 	bl	8000550 <__aeabi_dmul>
 800d9be:	4b80      	ldr	r3, [pc, #512]	; (800dbc0 <__ieee754_rem_pio2+0x348>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f7f2 fc0f 	bl	80001e4 <__adddf3>
 800d9c6:	f7f3 f85d 	bl	8000a84 <__aeabi_d2iz>
 800d9ca:	4683      	mov	fp, r0
 800d9cc:	f7f2 fd56 	bl	800047c <__aeabi_i2d>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	ec43 2b18 	vmov	d8, r2, r3
 800d9d8:	a367      	add	r3, pc, #412	; (adr r3, 800db78 <__ieee754_rem_pio2+0x300>)
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	f7f2 fdb7 	bl	8000550 <__aeabi_dmul>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	f7f2 fbf9 	bl	80001e0 <__aeabi_dsub>
 800d9ee:	a364      	add	r3, pc, #400	; (adr r3, 800db80 <__ieee754_rem_pio2+0x308>)
 800d9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	460f      	mov	r7, r1
 800d9f8:	ec51 0b18 	vmov	r0, r1, d8
 800d9fc:	f7f2 fda8 	bl	8000550 <__aeabi_dmul>
 800da00:	f1bb 0f1f 	cmp.w	fp, #31
 800da04:	4604      	mov	r4, r0
 800da06:	460d      	mov	r5, r1
 800da08:	dc0d      	bgt.n	800da26 <__ieee754_rem_pio2+0x1ae>
 800da0a:	4b6e      	ldr	r3, [pc, #440]	; (800dbc4 <__ieee754_rem_pio2+0x34c>)
 800da0c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800da10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da14:	4543      	cmp	r3, r8
 800da16:	d006      	beq.n	800da26 <__ieee754_rem_pio2+0x1ae>
 800da18:	4622      	mov	r2, r4
 800da1a:	462b      	mov	r3, r5
 800da1c:	4630      	mov	r0, r6
 800da1e:	4639      	mov	r1, r7
 800da20:	f7f2 fbde 	bl	80001e0 <__aeabi_dsub>
 800da24:	e00f      	b.n	800da46 <__ieee754_rem_pio2+0x1ce>
 800da26:	462b      	mov	r3, r5
 800da28:	4622      	mov	r2, r4
 800da2a:	4630      	mov	r0, r6
 800da2c:	4639      	mov	r1, r7
 800da2e:	f7f2 fbd7 	bl	80001e0 <__aeabi_dsub>
 800da32:	ea4f 5328 	mov.w	r3, r8, asr #20
 800da36:	9303      	str	r3, [sp, #12]
 800da38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800da3c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800da40:	f1b8 0f10 	cmp.w	r8, #16
 800da44:	dc02      	bgt.n	800da4c <__ieee754_rem_pio2+0x1d4>
 800da46:	e9ca 0100 	strd	r0, r1, [sl]
 800da4a:	e039      	b.n	800dac0 <__ieee754_rem_pio2+0x248>
 800da4c:	a34e      	add	r3, pc, #312	; (adr r3, 800db88 <__ieee754_rem_pio2+0x310>)
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	ec51 0b18 	vmov	r0, r1, d8
 800da56:	f7f2 fd7b 	bl	8000550 <__aeabi_dmul>
 800da5a:	4604      	mov	r4, r0
 800da5c:	460d      	mov	r5, r1
 800da5e:	4602      	mov	r2, r0
 800da60:	460b      	mov	r3, r1
 800da62:	4630      	mov	r0, r6
 800da64:	4639      	mov	r1, r7
 800da66:	f7f2 fbbb 	bl	80001e0 <__aeabi_dsub>
 800da6a:	4602      	mov	r2, r0
 800da6c:	460b      	mov	r3, r1
 800da6e:	4680      	mov	r8, r0
 800da70:	4689      	mov	r9, r1
 800da72:	4630      	mov	r0, r6
 800da74:	4639      	mov	r1, r7
 800da76:	f7f2 fbb3 	bl	80001e0 <__aeabi_dsub>
 800da7a:	4622      	mov	r2, r4
 800da7c:	462b      	mov	r3, r5
 800da7e:	f7f2 fbaf 	bl	80001e0 <__aeabi_dsub>
 800da82:	a343      	add	r3, pc, #268	; (adr r3, 800db90 <__ieee754_rem_pio2+0x318>)
 800da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da88:	4604      	mov	r4, r0
 800da8a:	460d      	mov	r5, r1
 800da8c:	ec51 0b18 	vmov	r0, r1, d8
 800da90:	f7f2 fd5e 	bl	8000550 <__aeabi_dmul>
 800da94:	4622      	mov	r2, r4
 800da96:	462b      	mov	r3, r5
 800da98:	f7f2 fba2 	bl	80001e0 <__aeabi_dsub>
 800da9c:	4602      	mov	r2, r0
 800da9e:	460b      	mov	r3, r1
 800daa0:	4604      	mov	r4, r0
 800daa2:	460d      	mov	r5, r1
 800daa4:	4640      	mov	r0, r8
 800daa6:	4649      	mov	r1, r9
 800daa8:	f7f2 fb9a 	bl	80001e0 <__aeabi_dsub>
 800daac:	9a03      	ldr	r2, [sp, #12]
 800daae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	2b31      	cmp	r3, #49	; 0x31
 800dab6:	dc24      	bgt.n	800db02 <__ieee754_rem_pio2+0x28a>
 800dab8:	e9ca 0100 	strd	r0, r1, [sl]
 800dabc:	4646      	mov	r6, r8
 800dabe:	464f      	mov	r7, r9
 800dac0:	e9da 8900 	ldrd	r8, r9, [sl]
 800dac4:	4630      	mov	r0, r6
 800dac6:	4642      	mov	r2, r8
 800dac8:	464b      	mov	r3, r9
 800daca:	4639      	mov	r1, r7
 800dacc:	f7f2 fb88 	bl	80001e0 <__aeabi_dsub>
 800dad0:	462b      	mov	r3, r5
 800dad2:	4622      	mov	r2, r4
 800dad4:	f7f2 fb84 	bl	80001e0 <__aeabi_dsub>
 800dad8:	9b02      	ldr	r3, [sp, #8]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dae0:	f6bf af0a 	bge.w	800d8f8 <__ieee754_rem_pio2+0x80>
 800dae4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dae8:	f8ca 3004 	str.w	r3, [sl, #4]
 800daec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800daf0:	f8ca 8000 	str.w	r8, [sl]
 800daf4:	f8ca 0008 	str.w	r0, [sl, #8]
 800daf8:	f8ca 300c 	str.w	r3, [sl, #12]
 800dafc:	f1cb 0b00 	rsb	fp, fp, #0
 800db00:	e6fa      	b.n	800d8f8 <__ieee754_rem_pio2+0x80>
 800db02:	a327      	add	r3, pc, #156	; (adr r3, 800dba0 <__ieee754_rem_pio2+0x328>)
 800db04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db08:	ec51 0b18 	vmov	r0, r1, d8
 800db0c:	f7f2 fd20 	bl	8000550 <__aeabi_dmul>
 800db10:	4604      	mov	r4, r0
 800db12:	460d      	mov	r5, r1
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	4640      	mov	r0, r8
 800db1a:	4649      	mov	r1, r9
 800db1c:	f7f2 fb60 	bl	80001e0 <__aeabi_dsub>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	4606      	mov	r6, r0
 800db26:	460f      	mov	r7, r1
 800db28:	4640      	mov	r0, r8
 800db2a:	4649      	mov	r1, r9
 800db2c:	f7f2 fb58 	bl	80001e0 <__aeabi_dsub>
 800db30:	4622      	mov	r2, r4
 800db32:	462b      	mov	r3, r5
 800db34:	f7f2 fb54 	bl	80001e0 <__aeabi_dsub>
 800db38:	a31b      	add	r3, pc, #108	; (adr r3, 800dba8 <__ieee754_rem_pio2+0x330>)
 800db3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3e:	4604      	mov	r4, r0
 800db40:	460d      	mov	r5, r1
 800db42:	ec51 0b18 	vmov	r0, r1, d8
 800db46:	f7f2 fd03 	bl	8000550 <__aeabi_dmul>
 800db4a:	4622      	mov	r2, r4
 800db4c:	462b      	mov	r3, r5
 800db4e:	f7f2 fb47 	bl	80001e0 <__aeabi_dsub>
 800db52:	4604      	mov	r4, r0
 800db54:	460d      	mov	r5, r1
 800db56:	e75f      	b.n	800da18 <__ieee754_rem_pio2+0x1a0>
 800db58:	4b1b      	ldr	r3, [pc, #108]	; (800dbc8 <__ieee754_rem_pio2+0x350>)
 800db5a:	4598      	cmp	r8, r3
 800db5c:	dd36      	ble.n	800dbcc <__ieee754_rem_pio2+0x354>
 800db5e:	ee10 2a10 	vmov	r2, s0
 800db62:	462b      	mov	r3, r5
 800db64:	4620      	mov	r0, r4
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fb3a 	bl	80001e0 <__aeabi_dsub>
 800db6c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db70:	e9ca 0100 	strd	r0, r1, [sl]
 800db74:	e694      	b.n	800d8a0 <__ieee754_rem_pio2+0x28>
 800db76:	bf00      	nop
 800db78:	54400000 	.word	0x54400000
 800db7c:	3ff921fb 	.word	0x3ff921fb
 800db80:	1a626331 	.word	0x1a626331
 800db84:	3dd0b461 	.word	0x3dd0b461
 800db88:	1a600000 	.word	0x1a600000
 800db8c:	3dd0b461 	.word	0x3dd0b461
 800db90:	2e037073 	.word	0x2e037073
 800db94:	3ba3198a 	.word	0x3ba3198a
 800db98:	6dc9c883 	.word	0x6dc9c883
 800db9c:	3fe45f30 	.word	0x3fe45f30
 800dba0:	2e000000 	.word	0x2e000000
 800dba4:	3ba3198a 	.word	0x3ba3198a
 800dba8:	252049c1 	.word	0x252049c1
 800dbac:	397b839a 	.word	0x397b839a
 800dbb0:	3fe921fb 	.word	0x3fe921fb
 800dbb4:	4002d97b 	.word	0x4002d97b
 800dbb8:	3ff921fb 	.word	0x3ff921fb
 800dbbc:	413921fb 	.word	0x413921fb
 800dbc0:	3fe00000 	.word	0x3fe00000
 800dbc4:	0800f024 	.word	0x0800f024
 800dbc8:	7fefffff 	.word	0x7fefffff
 800dbcc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dbd0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dbd4:	ee10 0a10 	vmov	r0, s0
 800dbd8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dbdc:	ee10 6a10 	vmov	r6, s0
 800dbe0:	460f      	mov	r7, r1
 800dbe2:	f7f2 ff4f 	bl	8000a84 <__aeabi_d2iz>
 800dbe6:	f7f2 fc49 	bl	800047c <__aeabi_i2d>
 800dbea:	4602      	mov	r2, r0
 800dbec:	460b      	mov	r3, r1
 800dbee:	4630      	mov	r0, r6
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dbf6:	f7f2 faf3 	bl	80001e0 <__aeabi_dsub>
 800dbfa:	4b23      	ldr	r3, [pc, #140]	; (800dc88 <__ieee754_rem_pio2+0x410>)
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	f7f2 fca7 	bl	8000550 <__aeabi_dmul>
 800dc02:	460f      	mov	r7, r1
 800dc04:	4606      	mov	r6, r0
 800dc06:	f7f2 ff3d 	bl	8000a84 <__aeabi_d2iz>
 800dc0a:	f7f2 fc37 	bl	800047c <__aeabi_i2d>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	4630      	mov	r0, r6
 800dc14:	4639      	mov	r1, r7
 800dc16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dc1a:	f7f2 fae1 	bl	80001e0 <__aeabi_dsub>
 800dc1e:	4b1a      	ldr	r3, [pc, #104]	; (800dc88 <__ieee754_rem_pio2+0x410>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	f7f2 fc95 	bl	8000550 <__aeabi_dmul>
 800dc26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dc2a:	ad04      	add	r5, sp, #16
 800dc2c:	f04f 0803 	mov.w	r8, #3
 800dc30:	46a9      	mov	r9, r5
 800dc32:	2600      	movs	r6, #0
 800dc34:	2700      	movs	r7, #0
 800dc36:	4632      	mov	r2, r6
 800dc38:	463b      	mov	r3, r7
 800dc3a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800dc3e:	46c3      	mov	fp, r8
 800dc40:	3d08      	subs	r5, #8
 800dc42:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc46:	f7f2 feeb 	bl	8000a20 <__aeabi_dcmpeq>
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	d1f3      	bne.n	800dc36 <__ieee754_rem_pio2+0x3be>
 800dc4e:	4b0f      	ldr	r3, [pc, #60]	; (800dc8c <__ieee754_rem_pio2+0x414>)
 800dc50:	9301      	str	r3, [sp, #4]
 800dc52:	2302      	movs	r3, #2
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	4622      	mov	r2, r4
 800dc58:	465b      	mov	r3, fp
 800dc5a:	4651      	mov	r1, sl
 800dc5c:	4648      	mov	r0, r9
 800dc5e:	f000 fbb3 	bl	800e3c8 <__kernel_rem_pio2>
 800dc62:	9b02      	ldr	r3, [sp, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	4683      	mov	fp, r0
 800dc68:	f6bf ae46 	bge.w	800d8f8 <__ieee754_rem_pio2+0x80>
 800dc6c:	e9da 2100 	ldrd	r2, r1, [sl]
 800dc70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc74:	e9ca 2300 	strd	r2, r3, [sl]
 800dc78:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800dc7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc80:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800dc84:	e73a      	b.n	800dafc <__ieee754_rem_pio2+0x284>
 800dc86:	bf00      	nop
 800dc88:	41700000 	.word	0x41700000
 800dc8c:	0800f0a4 	.word	0x0800f0a4

0800dc90 <__ieee754_powf>:
 800dc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc94:	ee10 4a90 	vmov	r4, s1
 800dc98:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800dc9c:	ed2d 8b02 	vpush	{d8}
 800dca0:	ee10 6a10 	vmov	r6, s0
 800dca4:	eeb0 8a40 	vmov.f32	s16, s0
 800dca8:	eef0 8a60 	vmov.f32	s17, s1
 800dcac:	d10c      	bne.n	800dcc8 <__ieee754_powf+0x38>
 800dcae:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800dcb2:	0076      	lsls	r6, r6, #1
 800dcb4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800dcb8:	f240 8296 	bls.w	800e1e8 <__ieee754_powf+0x558>
 800dcbc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800dcc0:	ecbd 8b02 	vpop	{d8}
 800dcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800dccc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800dcd0:	dcf4      	bgt.n	800dcbc <__ieee754_powf+0x2c>
 800dcd2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800dcd6:	dd08      	ble.n	800dcea <__ieee754_powf+0x5a>
 800dcd8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800dcdc:	d1ee      	bne.n	800dcbc <__ieee754_powf+0x2c>
 800dcde:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800dce2:	0064      	lsls	r4, r4, #1
 800dce4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800dce8:	e7e6      	b.n	800dcb8 <__ieee754_powf+0x28>
 800dcea:	2e00      	cmp	r6, #0
 800dcec:	da20      	bge.n	800dd30 <__ieee754_powf+0xa0>
 800dcee:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800dcf2:	da2d      	bge.n	800dd50 <__ieee754_powf+0xc0>
 800dcf4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800dcf8:	f2c0 827f 	blt.w	800e1fa <__ieee754_powf+0x56a>
 800dcfc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800dd00:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800dd04:	fa48 f703 	asr.w	r7, r8, r3
 800dd08:	fa07 f303 	lsl.w	r3, r7, r3
 800dd0c:	4543      	cmp	r3, r8
 800dd0e:	f040 8274 	bne.w	800e1fa <__ieee754_powf+0x56a>
 800dd12:	f007 0701 	and.w	r7, r7, #1
 800dd16:	f1c7 0702 	rsb	r7, r7, #2
 800dd1a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800dd1e:	d11f      	bne.n	800dd60 <__ieee754_powf+0xd0>
 800dd20:	2c00      	cmp	r4, #0
 800dd22:	f280 8267 	bge.w	800e1f4 <__ieee754_powf+0x564>
 800dd26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dd2a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800dd2e:	e7c7      	b.n	800dcc0 <__ieee754_powf+0x30>
 800dd30:	2700      	movs	r7, #0
 800dd32:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800dd36:	d1f0      	bne.n	800dd1a <__ieee754_powf+0x8a>
 800dd38:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800dd3c:	f000 8254 	beq.w	800e1e8 <__ieee754_powf+0x558>
 800dd40:	dd08      	ble.n	800dd54 <__ieee754_powf+0xc4>
 800dd42:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800e04c <__ieee754_powf+0x3bc>
 800dd46:	2c00      	cmp	r4, #0
 800dd48:	bfa8      	it	ge
 800dd4a:	eeb0 0a68 	vmovge.f32	s0, s17
 800dd4e:	e7b7      	b.n	800dcc0 <__ieee754_powf+0x30>
 800dd50:	2702      	movs	r7, #2
 800dd52:	e7ee      	b.n	800dd32 <__ieee754_powf+0xa2>
 800dd54:	2c00      	cmp	r4, #0
 800dd56:	f280 824a 	bge.w	800e1ee <__ieee754_powf+0x55e>
 800dd5a:	eeb1 0a68 	vneg.f32	s0, s17
 800dd5e:	e7af      	b.n	800dcc0 <__ieee754_powf+0x30>
 800dd60:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800dd64:	d102      	bne.n	800dd6c <__ieee754_powf+0xdc>
 800dd66:	ee28 0a08 	vmul.f32	s0, s16, s16
 800dd6a:	e7a9      	b.n	800dcc0 <__ieee754_powf+0x30>
 800dd6c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800dd70:	eeb0 0a48 	vmov.f32	s0, s16
 800dd74:	d107      	bne.n	800dd86 <__ieee754_powf+0xf6>
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	db05      	blt.n	800dd86 <__ieee754_powf+0xf6>
 800dd7a:	ecbd 8b02 	vpop	{d8}
 800dd7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd82:	f000 ba53 	b.w	800e22c <__ieee754_sqrtf>
 800dd86:	f001 f861 	bl	800ee4c <fabsf>
 800dd8a:	b125      	cbz	r5, 800dd96 <__ieee754_powf+0x106>
 800dd8c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800dd90:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800dd94:	d116      	bne.n	800ddc4 <__ieee754_powf+0x134>
 800dd96:	2c00      	cmp	r4, #0
 800dd98:	bfbc      	itt	lt
 800dd9a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800dd9e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800dda2:	2e00      	cmp	r6, #0
 800dda4:	da8c      	bge.n	800dcc0 <__ieee754_powf+0x30>
 800dda6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800ddaa:	ea55 0307 	orrs.w	r3, r5, r7
 800ddae:	d104      	bne.n	800ddba <__ieee754_powf+0x12a>
 800ddb0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ddb4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800ddb8:	e782      	b.n	800dcc0 <__ieee754_powf+0x30>
 800ddba:	2f01      	cmp	r7, #1
 800ddbc:	d180      	bne.n	800dcc0 <__ieee754_powf+0x30>
 800ddbe:	eeb1 0a40 	vneg.f32	s0, s0
 800ddc2:	e77d      	b.n	800dcc0 <__ieee754_powf+0x30>
 800ddc4:	0ff0      	lsrs	r0, r6, #31
 800ddc6:	3801      	subs	r0, #1
 800ddc8:	ea57 0300 	orrs.w	r3, r7, r0
 800ddcc:	d104      	bne.n	800ddd8 <__ieee754_powf+0x148>
 800ddce:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ddd2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ddd6:	e773      	b.n	800dcc0 <__ieee754_powf+0x30>
 800ddd8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800dddc:	dd74      	ble.n	800dec8 <__ieee754_powf+0x238>
 800ddde:	4b9c      	ldr	r3, [pc, #624]	; (800e050 <__ieee754_powf+0x3c0>)
 800dde0:	429d      	cmp	r5, r3
 800dde2:	dc08      	bgt.n	800ddf6 <__ieee754_powf+0x166>
 800dde4:	2c00      	cmp	r4, #0
 800dde6:	da0b      	bge.n	800de00 <__ieee754_powf+0x170>
 800dde8:	2000      	movs	r0, #0
 800ddea:	ecbd 8b02 	vpop	{d8}
 800ddee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf2:	f000 bf13 	b.w	800ec1c <__math_oflowf>
 800ddf6:	4b97      	ldr	r3, [pc, #604]	; (800e054 <__ieee754_powf+0x3c4>)
 800ddf8:	429d      	cmp	r5, r3
 800ddfa:	dd08      	ble.n	800de0e <__ieee754_powf+0x17e>
 800ddfc:	2c00      	cmp	r4, #0
 800ddfe:	dcf3      	bgt.n	800dde8 <__ieee754_powf+0x158>
 800de00:	2000      	movs	r0, #0
 800de02:	ecbd 8b02 	vpop	{d8}
 800de06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de0a:	f000 bf01 	b.w	800ec10 <__math_uflowf>
 800de0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800de12:	ee30 0a67 	vsub.f32	s0, s0, s15
 800de16:	eddf 6a90 	vldr	s13, [pc, #576]	; 800e058 <__ieee754_powf+0x3c8>
 800de1a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800de1e:	eee0 6a67 	vfms.f32	s13, s0, s15
 800de22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800de26:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800de2a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800de2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de32:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e05c <__ieee754_powf+0x3cc>
 800de36:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800de3a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800e060 <__ieee754_powf+0x3d0>
 800de3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800de42:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800e064 <__ieee754_powf+0x3d4>
 800de46:	eef0 6a67 	vmov.f32	s13, s15
 800de4a:	eee0 6a07 	vfma.f32	s13, s0, s14
 800de4e:	ee16 3a90 	vmov	r3, s13
 800de52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800de56:	f023 030f 	bic.w	r3, r3, #15
 800de5a:	ee00 3a90 	vmov	s1, r3
 800de5e:	eee0 0a47 	vfms.f32	s1, s0, s14
 800de62:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800de66:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800de6a:	f024 040f 	bic.w	r4, r4, #15
 800de6e:	ee07 4a10 	vmov	s14, r4
 800de72:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800de76:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800de7a:	ee07 3a90 	vmov	s15, r3
 800de7e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800de82:	3f01      	subs	r7, #1
 800de84:	ea57 0200 	orrs.w	r2, r7, r0
 800de88:	ee07 4a10 	vmov	s14, r4
 800de8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800de90:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800de94:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800de98:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800de9c:	ee17 4a10 	vmov	r4, s14
 800dea0:	bf08      	it	eq
 800dea2:	eeb0 8a40 	vmoveq.f32	s16, s0
 800dea6:	2c00      	cmp	r4, #0
 800dea8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800deac:	f340 817e 	ble.w	800e1ac <__ieee754_powf+0x51c>
 800deb0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800deb4:	f340 80f8 	ble.w	800e0a8 <__ieee754_powf+0x418>
 800deb8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800debc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dec0:	bf4c      	ite	mi
 800dec2:	2001      	movmi	r0, #1
 800dec4:	2000      	movpl	r0, #0
 800dec6:	e790      	b.n	800ddea <__ieee754_powf+0x15a>
 800dec8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800decc:	bf01      	itttt	eq
 800dece:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800e068 <__ieee754_powf+0x3d8>
 800ded2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ded6:	f06f 0217 	mvneq.w	r2, #23
 800deda:	ee17 5a90 	vmoveq	r5, s15
 800dede:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800dee2:	bf18      	it	ne
 800dee4:	2200      	movne	r2, #0
 800dee6:	3b7f      	subs	r3, #127	; 0x7f
 800dee8:	4413      	add	r3, r2
 800deea:	4a60      	ldr	r2, [pc, #384]	; (800e06c <__ieee754_powf+0x3dc>)
 800deec:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800def0:	4295      	cmp	r5, r2
 800def2:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800def6:	dd06      	ble.n	800df06 <__ieee754_powf+0x276>
 800def8:	4a5d      	ldr	r2, [pc, #372]	; (800e070 <__ieee754_powf+0x3e0>)
 800defa:	4295      	cmp	r5, r2
 800defc:	f340 80a4 	ble.w	800e048 <__ieee754_powf+0x3b8>
 800df00:	3301      	adds	r3, #1
 800df02:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800df06:	2500      	movs	r5, #0
 800df08:	4a5a      	ldr	r2, [pc, #360]	; (800e074 <__ieee754_powf+0x3e4>)
 800df0a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800df0e:	ee07 1a90 	vmov	s15, r1
 800df12:	ed92 7a00 	vldr	s14, [r2]
 800df16:	4a58      	ldr	r2, [pc, #352]	; (800e078 <__ieee754_powf+0x3e8>)
 800df18:	ee37 6a27 	vadd.f32	s12, s14, s15
 800df1c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800df20:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800df24:	1049      	asrs	r1, r1, #1
 800df26:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800df2a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800df2e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800df32:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800df36:	ee06 1a10 	vmov	s12, r1
 800df3a:	ee65 4a26 	vmul.f32	s9, s10, s13
 800df3e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800df42:	ee14 6a90 	vmov	r6, s9
 800df46:	4016      	ands	r6, r2
 800df48:	ee05 6a90 	vmov	s11, r6
 800df4c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800df50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df54:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e07c <__ieee754_powf+0x3ec>
 800df58:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800df5c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800df60:	ee25 6a26 	vmul.f32	s12, s10, s13
 800df64:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e080 <__ieee754_powf+0x3f0>
 800df68:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800df6c:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e084 <__ieee754_powf+0x3f4>
 800df70:	eee7 6a27 	vfma.f32	s13, s14, s15
 800df74:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800e058 <__ieee754_powf+0x3c8>
 800df78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800df7c:	eddf 6a42 	vldr	s13, [pc, #264]	; 800e088 <__ieee754_powf+0x3f8>
 800df80:	eee7 6a27 	vfma.f32	s13, s14, s15
 800df84:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800e08c <__ieee754_powf+0x3fc>
 800df88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800df8c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800df90:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800df94:	ee66 6a86 	vmul.f32	s13, s13, s12
 800df98:	eee5 6a07 	vfma.f32	s13, s10, s14
 800df9c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800dfa0:	eef0 7a45 	vmov.f32	s15, s10
 800dfa4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800dfa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfac:	ee17 1a90 	vmov	r1, s15
 800dfb0:	4011      	ands	r1, r2
 800dfb2:	ee07 1a90 	vmov	s15, r1
 800dfb6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800dfba:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800dfbe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800dfc2:	ee27 7a24 	vmul.f32	s14, s14, s9
 800dfc6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800dfca:	eeb0 6a47 	vmov.f32	s12, s14
 800dfce:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800dfd2:	ee16 1a10 	vmov	r1, s12
 800dfd6:	4011      	ands	r1, r2
 800dfd8:	ee06 1a90 	vmov	s13, r1
 800dfdc:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800dfe0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e090 <__ieee754_powf+0x400>
 800dfe4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800e094 <__ieee754_powf+0x404>
 800dfe8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800dfec:	ee06 1a10 	vmov	s12, r1
 800dff0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dff4:	eddf 7a28 	vldr	s15, [pc, #160]	; 800e098 <__ieee754_powf+0x408>
 800dff8:	4928      	ldr	r1, [pc, #160]	; (800e09c <__ieee754_powf+0x40c>)
 800dffa:	eea6 7a27 	vfma.f32	s14, s12, s15
 800dffe:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800e002:	edd1 7a00 	vldr	s15, [r1]
 800e006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e00a:	ee07 3a90 	vmov	s15, r3
 800e00e:	4b24      	ldr	r3, [pc, #144]	; (800e0a0 <__ieee754_powf+0x410>)
 800e010:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e014:	eef0 7a47 	vmov.f32	s15, s14
 800e018:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e01c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800e020:	edd5 0a00 	vldr	s1, [r5]
 800e024:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e028:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e02c:	ee17 3a90 	vmov	r3, s15
 800e030:	4013      	ands	r3, r2
 800e032:	ee07 3a90 	vmov	s15, r3
 800e036:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e03a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e03e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e042:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e046:	e70e      	b.n	800de66 <__ieee754_powf+0x1d6>
 800e048:	2501      	movs	r5, #1
 800e04a:	e75d      	b.n	800df08 <__ieee754_powf+0x278>
 800e04c:	00000000 	.word	0x00000000
 800e050:	3f7ffff3 	.word	0x3f7ffff3
 800e054:	3f800007 	.word	0x3f800007
 800e058:	3eaaaaab 	.word	0x3eaaaaab
 800e05c:	3fb8aa3b 	.word	0x3fb8aa3b
 800e060:	36eca570 	.word	0x36eca570
 800e064:	3fb8aa00 	.word	0x3fb8aa00
 800e068:	4b800000 	.word	0x4b800000
 800e06c:	001cc471 	.word	0x001cc471
 800e070:	005db3d6 	.word	0x005db3d6
 800e074:	0800f1ac 	.word	0x0800f1ac
 800e078:	fffff000 	.word	0xfffff000
 800e07c:	3e6c3255 	.word	0x3e6c3255
 800e080:	3e53f142 	.word	0x3e53f142
 800e084:	3e8ba305 	.word	0x3e8ba305
 800e088:	3edb6db7 	.word	0x3edb6db7
 800e08c:	3f19999a 	.word	0x3f19999a
 800e090:	3f76384f 	.word	0x3f76384f
 800e094:	3f763800 	.word	0x3f763800
 800e098:	369dc3a0 	.word	0x369dc3a0
 800e09c:	0800f1bc 	.word	0x0800f1bc
 800e0a0:	0800f1b4 	.word	0x0800f1b4
 800e0a4:	3338aa3c 	.word	0x3338aa3c
 800e0a8:	f040 8095 	bne.w	800e1d6 <__ieee754_powf+0x546>
 800e0ac:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e0a4 <__ieee754_powf+0x414>
 800e0b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0b4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e0b8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c0:	f73f aefa 	bgt.w	800deb8 <__ieee754_powf+0x228>
 800e0c4:	15db      	asrs	r3, r3, #23
 800e0c6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e0ca:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e0ce:	4103      	asrs	r3, r0
 800e0d0:	4423      	add	r3, r4
 800e0d2:	494b      	ldr	r1, [pc, #300]	; (800e200 <__ieee754_powf+0x570>)
 800e0d4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e0d8:	3a7f      	subs	r2, #127	; 0x7f
 800e0da:	4111      	asrs	r1, r2
 800e0dc:	ea23 0101 	bic.w	r1, r3, r1
 800e0e0:	ee07 1a10 	vmov	s14, r1
 800e0e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e0e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e0ec:	f1c2 0217 	rsb	r2, r2, #23
 800e0f0:	4110      	asrs	r0, r2
 800e0f2:	2c00      	cmp	r4, #0
 800e0f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0f8:	bfb8      	it	lt
 800e0fa:	4240      	neglt	r0, r0
 800e0fc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e100:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e204 <__ieee754_powf+0x574>
 800e104:	eddf 6a40 	vldr	s13, [pc, #256]	; 800e208 <__ieee754_powf+0x578>
 800e108:	ee17 3a10 	vmov	r3, s14
 800e10c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e110:	f023 030f 	bic.w	r3, r3, #15
 800e114:	ee07 3a10 	vmov	s14, r3
 800e118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e11c:	ee27 0a00 	vmul.f32	s0, s14, s0
 800e120:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e124:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e20c <__ieee754_powf+0x57c>
 800e128:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800e12c:	eef0 7a40 	vmov.f32	s15, s0
 800e130:	eee7 7a26 	vfma.f32	s15, s14, s13
 800e134:	eeb0 6a67 	vmov.f32	s12, s15
 800e138:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e13c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e140:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e144:	eddf 6a32 	vldr	s13, [pc, #200]	; 800e210 <__ieee754_powf+0x580>
 800e148:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800e214 <__ieee754_powf+0x584>
 800e14c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e150:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800e218 <__ieee754_powf+0x588>
 800e154:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e158:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e21c <__ieee754_powf+0x58c>
 800e15c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e160:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800e220 <__ieee754_powf+0x590>
 800e164:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e168:	eef0 6a67 	vmov.f32	s13, s15
 800e16c:	eee6 6a47 	vfms.f32	s13, s12, s14
 800e170:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e174:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800e178:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800e17c:	eea7 0a80 	vfma.f32	s0, s15, s0
 800e180:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e184:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e188:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e18c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e190:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e194:	ee10 3a10 	vmov	r3, s0
 800e198:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e19c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e1a0:	da1f      	bge.n	800e1e2 <__ieee754_powf+0x552>
 800e1a2:	f000 fe67 	bl	800ee74 <scalbnf>
 800e1a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e1aa:	e589      	b.n	800dcc0 <__ieee754_powf+0x30>
 800e1ac:	4a1d      	ldr	r2, [pc, #116]	; (800e224 <__ieee754_powf+0x594>)
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	dd07      	ble.n	800e1c2 <__ieee754_powf+0x532>
 800e1b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ba:	bf4c      	ite	mi
 800e1bc:	2001      	movmi	r0, #1
 800e1be:	2000      	movpl	r0, #0
 800e1c0:	e61f      	b.n	800de02 <__ieee754_powf+0x172>
 800e1c2:	d108      	bne.n	800e1d6 <__ieee754_powf+0x546>
 800e1c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1c8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d0:	f6ff af78 	blt.w	800e0c4 <__ieee754_powf+0x434>
 800e1d4:	e7ed      	b.n	800e1b2 <__ieee754_powf+0x522>
 800e1d6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e1da:	f73f af73 	bgt.w	800e0c4 <__ieee754_powf+0x434>
 800e1de:	2000      	movs	r0, #0
 800e1e0:	e78c      	b.n	800e0fc <__ieee754_powf+0x46c>
 800e1e2:	ee00 3a10 	vmov	s0, r3
 800e1e6:	e7de      	b.n	800e1a6 <__ieee754_powf+0x516>
 800e1e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e1ec:	e568      	b.n	800dcc0 <__ieee754_powf+0x30>
 800e1ee:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e228 <__ieee754_powf+0x598>
 800e1f2:	e565      	b.n	800dcc0 <__ieee754_powf+0x30>
 800e1f4:	eeb0 0a48 	vmov.f32	s0, s16
 800e1f8:	e562      	b.n	800dcc0 <__ieee754_powf+0x30>
 800e1fa:	2700      	movs	r7, #0
 800e1fc:	e58d      	b.n	800dd1a <__ieee754_powf+0x8a>
 800e1fe:	bf00      	nop
 800e200:	007fffff 	.word	0x007fffff
 800e204:	35bfbe8c 	.word	0x35bfbe8c
 800e208:	3f317200 	.word	0x3f317200
 800e20c:	3f317218 	.word	0x3f317218
 800e210:	b5ddea0e 	.word	0xb5ddea0e
 800e214:	3331bb4c 	.word	0x3331bb4c
 800e218:	388ab355 	.word	0x388ab355
 800e21c:	bb360b61 	.word	0xbb360b61
 800e220:	3e2aaaab 	.word	0x3e2aaaab
 800e224:	43160000 	.word	0x43160000
 800e228:	00000000 	.word	0x00000000

0800e22c <__ieee754_sqrtf>:
 800e22c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e230:	4770      	bx	lr
 800e232:	0000      	movs	r0, r0
 800e234:	0000      	movs	r0, r0
	...

0800e238 <__kernel_cos>:
 800e238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e23c:	ec57 6b10 	vmov	r6, r7, d0
 800e240:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e244:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e248:	ed8d 1b00 	vstr	d1, [sp]
 800e24c:	da07      	bge.n	800e25e <__kernel_cos+0x26>
 800e24e:	ee10 0a10 	vmov	r0, s0
 800e252:	4639      	mov	r1, r7
 800e254:	f7f2 fc16 	bl	8000a84 <__aeabi_d2iz>
 800e258:	2800      	cmp	r0, #0
 800e25a:	f000 8088 	beq.w	800e36e <__kernel_cos+0x136>
 800e25e:	4632      	mov	r2, r6
 800e260:	463b      	mov	r3, r7
 800e262:	4630      	mov	r0, r6
 800e264:	4639      	mov	r1, r7
 800e266:	f7f2 f973 	bl	8000550 <__aeabi_dmul>
 800e26a:	4b51      	ldr	r3, [pc, #324]	; (800e3b0 <__kernel_cos+0x178>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	4604      	mov	r4, r0
 800e270:	460d      	mov	r5, r1
 800e272:	f7f2 f96d 	bl	8000550 <__aeabi_dmul>
 800e276:	a340      	add	r3, pc, #256	; (adr r3, 800e378 <__kernel_cos+0x140>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	4682      	mov	sl, r0
 800e27e:	468b      	mov	fp, r1
 800e280:	4620      	mov	r0, r4
 800e282:	4629      	mov	r1, r5
 800e284:	f7f2 f964 	bl	8000550 <__aeabi_dmul>
 800e288:	a33d      	add	r3, pc, #244	; (adr r3, 800e380 <__kernel_cos+0x148>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f1 ffa9 	bl	80001e4 <__adddf3>
 800e292:	4622      	mov	r2, r4
 800e294:	462b      	mov	r3, r5
 800e296:	f7f2 f95b 	bl	8000550 <__aeabi_dmul>
 800e29a:	a33b      	add	r3, pc, #236	; (adr r3, 800e388 <__kernel_cos+0x150>)
 800e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a0:	f7f1 ff9e 	bl	80001e0 <__aeabi_dsub>
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	462b      	mov	r3, r5
 800e2a8:	f7f2 f952 	bl	8000550 <__aeabi_dmul>
 800e2ac:	a338      	add	r3, pc, #224	; (adr r3, 800e390 <__kernel_cos+0x158>)
 800e2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b2:	f7f1 ff97 	bl	80001e4 <__adddf3>
 800e2b6:	4622      	mov	r2, r4
 800e2b8:	462b      	mov	r3, r5
 800e2ba:	f7f2 f949 	bl	8000550 <__aeabi_dmul>
 800e2be:	a336      	add	r3, pc, #216	; (adr r3, 800e398 <__kernel_cos+0x160>)
 800e2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c4:	f7f1 ff8c 	bl	80001e0 <__aeabi_dsub>
 800e2c8:	4622      	mov	r2, r4
 800e2ca:	462b      	mov	r3, r5
 800e2cc:	f7f2 f940 	bl	8000550 <__aeabi_dmul>
 800e2d0:	a333      	add	r3, pc, #204	; (adr r3, 800e3a0 <__kernel_cos+0x168>)
 800e2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d6:	f7f1 ff85 	bl	80001e4 <__adddf3>
 800e2da:	4622      	mov	r2, r4
 800e2dc:	462b      	mov	r3, r5
 800e2de:	f7f2 f937 	bl	8000550 <__aeabi_dmul>
 800e2e2:	4622      	mov	r2, r4
 800e2e4:	462b      	mov	r3, r5
 800e2e6:	f7f2 f933 	bl	8000550 <__aeabi_dmul>
 800e2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	460d      	mov	r5, r1
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	4639      	mov	r1, r7
 800e2f6:	f7f2 f92b 	bl	8000550 <__aeabi_dmul>
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4602      	mov	r2, r0
 800e2fe:	4629      	mov	r1, r5
 800e300:	4620      	mov	r0, r4
 800e302:	f7f1 ff6d 	bl	80001e0 <__aeabi_dsub>
 800e306:	4b2b      	ldr	r3, [pc, #172]	; (800e3b4 <__kernel_cos+0x17c>)
 800e308:	4598      	cmp	r8, r3
 800e30a:	4606      	mov	r6, r0
 800e30c:	460f      	mov	r7, r1
 800e30e:	dc10      	bgt.n	800e332 <__kernel_cos+0xfa>
 800e310:	4602      	mov	r2, r0
 800e312:	460b      	mov	r3, r1
 800e314:	4650      	mov	r0, sl
 800e316:	4659      	mov	r1, fp
 800e318:	f7f1 ff62 	bl	80001e0 <__aeabi_dsub>
 800e31c:	460b      	mov	r3, r1
 800e31e:	4926      	ldr	r1, [pc, #152]	; (800e3b8 <__kernel_cos+0x180>)
 800e320:	4602      	mov	r2, r0
 800e322:	2000      	movs	r0, #0
 800e324:	f7f1 ff5c 	bl	80001e0 <__aeabi_dsub>
 800e328:	ec41 0b10 	vmov	d0, r0, r1
 800e32c:	b003      	add	sp, #12
 800e32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e332:	4b22      	ldr	r3, [pc, #136]	; (800e3bc <__kernel_cos+0x184>)
 800e334:	4920      	ldr	r1, [pc, #128]	; (800e3b8 <__kernel_cos+0x180>)
 800e336:	4598      	cmp	r8, r3
 800e338:	bfcc      	ite	gt
 800e33a:	4d21      	ldrgt	r5, [pc, #132]	; (800e3c0 <__kernel_cos+0x188>)
 800e33c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e340:	2400      	movs	r4, #0
 800e342:	4622      	mov	r2, r4
 800e344:	462b      	mov	r3, r5
 800e346:	2000      	movs	r0, #0
 800e348:	f7f1 ff4a 	bl	80001e0 <__aeabi_dsub>
 800e34c:	4622      	mov	r2, r4
 800e34e:	4680      	mov	r8, r0
 800e350:	4689      	mov	r9, r1
 800e352:	462b      	mov	r3, r5
 800e354:	4650      	mov	r0, sl
 800e356:	4659      	mov	r1, fp
 800e358:	f7f1 ff42 	bl	80001e0 <__aeabi_dsub>
 800e35c:	4632      	mov	r2, r6
 800e35e:	463b      	mov	r3, r7
 800e360:	f7f1 ff3e 	bl	80001e0 <__aeabi_dsub>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	4640      	mov	r0, r8
 800e36a:	4649      	mov	r1, r9
 800e36c:	e7da      	b.n	800e324 <__kernel_cos+0xec>
 800e36e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e3a8 <__kernel_cos+0x170>
 800e372:	e7db      	b.n	800e32c <__kernel_cos+0xf4>
 800e374:	f3af 8000 	nop.w
 800e378:	be8838d4 	.word	0xbe8838d4
 800e37c:	bda8fae9 	.word	0xbda8fae9
 800e380:	bdb4b1c4 	.word	0xbdb4b1c4
 800e384:	3e21ee9e 	.word	0x3e21ee9e
 800e388:	809c52ad 	.word	0x809c52ad
 800e38c:	3e927e4f 	.word	0x3e927e4f
 800e390:	19cb1590 	.word	0x19cb1590
 800e394:	3efa01a0 	.word	0x3efa01a0
 800e398:	16c15177 	.word	0x16c15177
 800e39c:	3f56c16c 	.word	0x3f56c16c
 800e3a0:	5555554c 	.word	0x5555554c
 800e3a4:	3fa55555 	.word	0x3fa55555
 800e3a8:	00000000 	.word	0x00000000
 800e3ac:	3ff00000 	.word	0x3ff00000
 800e3b0:	3fe00000 	.word	0x3fe00000
 800e3b4:	3fd33332 	.word	0x3fd33332
 800e3b8:	3ff00000 	.word	0x3ff00000
 800e3bc:	3fe90000 	.word	0x3fe90000
 800e3c0:	3fd20000 	.word	0x3fd20000
 800e3c4:	00000000 	.word	0x00000000

0800e3c8 <__kernel_rem_pio2>:
 800e3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3cc:	ed2d 8b02 	vpush	{d8}
 800e3d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e3d4:	f112 0f14 	cmn.w	r2, #20
 800e3d8:	9308      	str	r3, [sp, #32]
 800e3da:	9101      	str	r1, [sp, #4]
 800e3dc:	4bc4      	ldr	r3, [pc, #784]	; (800e6f0 <__kernel_rem_pio2+0x328>)
 800e3de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e3e0:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e3e6:	9302      	str	r3, [sp, #8]
 800e3e8:	9b08      	ldr	r3, [sp, #32]
 800e3ea:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3ee:	bfa8      	it	ge
 800e3f0:	1ed4      	subge	r4, r2, #3
 800e3f2:	9306      	str	r3, [sp, #24]
 800e3f4:	bfb2      	itee	lt
 800e3f6:	2400      	movlt	r4, #0
 800e3f8:	2318      	movge	r3, #24
 800e3fa:	fb94 f4f3 	sdivge	r4, r4, r3
 800e3fe:	f06f 0317 	mvn.w	r3, #23
 800e402:	fb04 3303 	mla	r3, r4, r3, r3
 800e406:	eb03 0a02 	add.w	sl, r3, r2
 800e40a:	9b02      	ldr	r3, [sp, #8]
 800e40c:	9a06      	ldr	r2, [sp, #24]
 800e40e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e6e0 <__kernel_rem_pio2+0x318>
 800e412:	eb03 0802 	add.w	r8, r3, r2
 800e416:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e418:	1aa7      	subs	r7, r4, r2
 800e41a:	ae22      	add	r6, sp, #136	; 0x88
 800e41c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e420:	2500      	movs	r5, #0
 800e422:	4545      	cmp	r5, r8
 800e424:	dd13      	ble.n	800e44e <__kernel_rem_pio2+0x86>
 800e426:	9b08      	ldr	r3, [sp, #32]
 800e428:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e6e0 <__kernel_rem_pio2+0x318>
 800e42c:	aa22      	add	r2, sp, #136	; 0x88
 800e42e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e432:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e436:	f04f 0800 	mov.w	r8, #0
 800e43a:	9b02      	ldr	r3, [sp, #8]
 800e43c:	4598      	cmp	r8, r3
 800e43e:	dc2f      	bgt.n	800e4a0 <__kernel_rem_pio2+0xd8>
 800e440:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e444:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e448:	462f      	mov	r7, r5
 800e44a:	2600      	movs	r6, #0
 800e44c:	e01b      	b.n	800e486 <__kernel_rem_pio2+0xbe>
 800e44e:	42ef      	cmn	r7, r5
 800e450:	d407      	bmi.n	800e462 <__kernel_rem_pio2+0x9a>
 800e452:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e456:	f7f2 f811 	bl	800047c <__aeabi_i2d>
 800e45a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e45e:	3501      	adds	r5, #1
 800e460:	e7df      	b.n	800e422 <__kernel_rem_pio2+0x5a>
 800e462:	ec51 0b18 	vmov	r0, r1, d8
 800e466:	e7f8      	b.n	800e45a <__kernel_rem_pio2+0x92>
 800e468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e46c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e470:	f7f2 f86e 	bl	8000550 <__aeabi_dmul>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e47c:	f7f1 feb2 	bl	80001e4 <__adddf3>
 800e480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e484:	3601      	adds	r6, #1
 800e486:	9b06      	ldr	r3, [sp, #24]
 800e488:	429e      	cmp	r6, r3
 800e48a:	f1a7 0708 	sub.w	r7, r7, #8
 800e48e:	ddeb      	ble.n	800e468 <__kernel_rem_pio2+0xa0>
 800e490:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e494:	f108 0801 	add.w	r8, r8, #1
 800e498:	ecab 7b02 	vstmia	fp!, {d7}
 800e49c:	3508      	adds	r5, #8
 800e49e:	e7cc      	b.n	800e43a <__kernel_rem_pio2+0x72>
 800e4a0:	9b02      	ldr	r3, [sp, #8]
 800e4a2:	aa0e      	add	r2, sp, #56	; 0x38
 800e4a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4a8:	930d      	str	r3, [sp, #52]	; 0x34
 800e4aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e4ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e4b0:	9c02      	ldr	r4, [sp, #8]
 800e4b2:	930c      	str	r3, [sp, #48]	; 0x30
 800e4b4:	00e3      	lsls	r3, r4, #3
 800e4b6:	930a      	str	r3, [sp, #40]	; 0x28
 800e4b8:	ab9a      	add	r3, sp, #616	; 0x268
 800e4ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e4c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e4c6:	ab72      	add	r3, sp, #456	; 0x1c8
 800e4c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e4cc:	46c3      	mov	fp, r8
 800e4ce:	46a1      	mov	r9, r4
 800e4d0:	f1b9 0f00 	cmp.w	r9, #0
 800e4d4:	f1a5 0508 	sub.w	r5, r5, #8
 800e4d8:	dc77      	bgt.n	800e5ca <__kernel_rem_pio2+0x202>
 800e4da:	ec47 6b10 	vmov	d0, r6, r7
 800e4de:	4650      	mov	r0, sl
 800e4e0:	f000 fc2e 	bl	800ed40 <scalbn>
 800e4e4:	ec57 6b10 	vmov	r6, r7, d0
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e4ee:	ee10 0a10 	vmov	r0, s0
 800e4f2:	4639      	mov	r1, r7
 800e4f4:	f7f2 f82c 	bl	8000550 <__aeabi_dmul>
 800e4f8:	ec41 0b10 	vmov	d0, r0, r1
 800e4fc:	f000 fba0 	bl	800ec40 <floor>
 800e500:	4b7c      	ldr	r3, [pc, #496]	; (800e6f4 <__kernel_rem_pio2+0x32c>)
 800e502:	ec51 0b10 	vmov	r0, r1, d0
 800e506:	2200      	movs	r2, #0
 800e508:	f7f2 f822 	bl	8000550 <__aeabi_dmul>
 800e50c:	4602      	mov	r2, r0
 800e50e:	460b      	mov	r3, r1
 800e510:	4630      	mov	r0, r6
 800e512:	4639      	mov	r1, r7
 800e514:	f7f1 fe64 	bl	80001e0 <__aeabi_dsub>
 800e518:	460f      	mov	r7, r1
 800e51a:	4606      	mov	r6, r0
 800e51c:	f7f2 fab2 	bl	8000a84 <__aeabi_d2iz>
 800e520:	9004      	str	r0, [sp, #16]
 800e522:	f7f1 ffab 	bl	800047c <__aeabi_i2d>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	4630      	mov	r0, r6
 800e52c:	4639      	mov	r1, r7
 800e52e:	f7f1 fe57 	bl	80001e0 <__aeabi_dsub>
 800e532:	f1ba 0f00 	cmp.w	sl, #0
 800e536:	4606      	mov	r6, r0
 800e538:	460f      	mov	r7, r1
 800e53a:	dd6d      	ble.n	800e618 <__kernel_rem_pio2+0x250>
 800e53c:	1e62      	subs	r2, r4, #1
 800e53e:	ab0e      	add	r3, sp, #56	; 0x38
 800e540:	9d04      	ldr	r5, [sp, #16]
 800e542:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e546:	f1ca 0118 	rsb	r1, sl, #24
 800e54a:	fa40 f301 	asr.w	r3, r0, r1
 800e54e:	441d      	add	r5, r3
 800e550:	408b      	lsls	r3, r1
 800e552:	1ac0      	subs	r0, r0, r3
 800e554:	ab0e      	add	r3, sp, #56	; 0x38
 800e556:	9504      	str	r5, [sp, #16]
 800e558:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e55c:	f1ca 0317 	rsb	r3, sl, #23
 800e560:	fa40 fb03 	asr.w	fp, r0, r3
 800e564:	f1bb 0f00 	cmp.w	fp, #0
 800e568:	dd65      	ble.n	800e636 <__kernel_rem_pio2+0x26e>
 800e56a:	9b04      	ldr	r3, [sp, #16]
 800e56c:	2200      	movs	r2, #0
 800e56e:	3301      	adds	r3, #1
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	4615      	mov	r5, r2
 800e574:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e578:	4294      	cmp	r4, r2
 800e57a:	f300 809c 	bgt.w	800e6b6 <__kernel_rem_pio2+0x2ee>
 800e57e:	f1ba 0f00 	cmp.w	sl, #0
 800e582:	dd07      	ble.n	800e594 <__kernel_rem_pio2+0x1cc>
 800e584:	f1ba 0f01 	cmp.w	sl, #1
 800e588:	f000 80c0 	beq.w	800e70c <__kernel_rem_pio2+0x344>
 800e58c:	f1ba 0f02 	cmp.w	sl, #2
 800e590:	f000 80c6 	beq.w	800e720 <__kernel_rem_pio2+0x358>
 800e594:	f1bb 0f02 	cmp.w	fp, #2
 800e598:	d14d      	bne.n	800e636 <__kernel_rem_pio2+0x26e>
 800e59a:	4632      	mov	r2, r6
 800e59c:	463b      	mov	r3, r7
 800e59e:	4956      	ldr	r1, [pc, #344]	; (800e6f8 <__kernel_rem_pio2+0x330>)
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	f7f1 fe1d 	bl	80001e0 <__aeabi_dsub>
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	460f      	mov	r7, r1
 800e5aa:	2d00      	cmp	r5, #0
 800e5ac:	d043      	beq.n	800e636 <__kernel_rem_pio2+0x26e>
 800e5ae:	4650      	mov	r0, sl
 800e5b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e6e8 <__kernel_rem_pio2+0x320>
 800e5b4:	f000 fbc4 	bl	800ed40 <scalbn>
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	ec53 2b10 	vmov	r2, r3, d0
 800e5c0:	f7f1 fe0e 	bl	80001e0 <__aeabi_dsub>
 800e5c4:	4606      	mov	r6, r0
 800e5c6:	460f      	mov	r7, r1
 800e5c8:	e035      	b.n	800e636 <__kernel_rem_pio2+0x26e>
 800e5ca:	4b4c      	ldr	r3, [pc, #304]	; (800e6fc <__kernel_rem_pio2+0x334>)
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	4639      	mov	r1, r7
 800e5d2:	f7f1 ffbd 	bl	8000550 <__aeabi_dmul>
 800e5d6:	f7f2 fa55 	bl	8000a84 <__aeabi_d2iz>
 800e5da:	f7f1 ff4f 	bl	800047c <__aeabi_i2d>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	ec43 2b18 	vmov	d8, r2, r3
 800e5e6:	4b46      	ldr	r3, [pc, #280]	; (800e700 <__kernel_rem_pio2+0x338>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f7f1 ffb1 	bl	8000550 <__aeabi_dmul>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	f7f1 fdf3 	bl	80001e0 <__aeabi_dsub>
 800e5fa:	f7f2 fa43 	bl	8000a84 <__aeabi_d2iz>
 800e5fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e602:	f84b 0b04 	str.w	r0, [fp], #4
 800e606:	ec51 0b18 	vmov	r0, r1, d8
 800e60a:	f7f1 fdeb 	bl	80001e4 <__adddf3>
 800e60e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e612:	4606      	mov	r6, r0
 800e614:	460f      	mov	r7, r1
 800e616:	e75b      	b.n	800e4d0 <__kernel_rem_pio2+0x108>
 800e618:	d106      	bne.n	800e628 <__kernel_rem_pio2+0x260>
 800e61a:	1e63      	subs	r3, r4, #1
 800e61c:	aa0e      	add	r2, sp, #56	; 0x38
 800e61e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e622:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e626:	e79d      	b.n	800e564 <__kernel_rem_pio2+0x19c>
 800e628:	4b36      	ldr	r3, [pc, #216]	; (800e704 <__kernel_rem_pio2+0x33c>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	f7f2 fa16 	bl	8000a5c <__aeabi_dcmpge>
 800e630:	2800      	cmp	r0, #0
 800e632:	d13d      	bne.n	800e6b0 <__kernel_rem_pio2+0x2e8>
 800e634:	4683      	mov	fp, r0
 800e636:	2200      	movs	r2, #0
 800e638:	2300      	movs	r3, #0
 800e63a:	4630      	mov	r0, r6
 800e63c:	4639      	mov	r1, r7
 800e63e:	f7f2 f9ef 	bl	8000a20 <__aeabi_dcmpeq>
 800e642:	2800      	cmp	r0, #0
 800e644:	f000 80c0 	beq.w	800e7c8 <__kernel_rem_pio2+0x400>
 800e648:	1e65      	subs	r5, r4, #1
 800e64a:	462b      	mov	r3, r5
 800e64c:	2200      	movs	r2, #0
 800e64e:	9902      	ldr	r1, [sp, #8]
 800e650:	428b      	cmp	r3, r1
 800e652:	da6c      	bge.n	800e72e <__kernel_rem_pio2+0x366>
 800e654:	2a00      	cmp	r2, #0
 800e656:	f000 8089 	beq.w	800e76c <__kernel_rem_pio2+0x3a4>
 800e65a:	ab0e      	add	r3, sp, #56	; 0x38
 800e65c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e660:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e664:	2b00      	cmp	r3, #0
 800e666:	f000 80ad 	beq.w	800e7c4 <__kernel_rem_pio2+0x3fc>
 800e66a:	4650      	mov	r0, sl
 800e66c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e6e8 <__kernel_rem_pio2+0x320>
 800e670:	f000 fb66 	bl	800ed40 <scalbn>
 800e674:	ab9a      	add	r3, sp, #616	; 0x268
 800e676:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e67a:	ec57 6b10 	vmov	r6, r7, d0
 800e67e:	00ec      	lsls	r4, r5, #3
 800e680:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e684:	46aa      	mov	sl, r5
 800e686:	f1ba 0f00 	cmp.w	sl, #0
 800e68a:	f280 80d6 	bge.w	800e83a <__kernel_rem_pio2+0x472>
 800e68e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e6e0 <__kernel_rem_pio2+0x318>
 800e692:	462e      	mov	r6, r5
 800e694:	2e00      	cmp	r6, #0
 800e696:	f2c0 8104 	blt.w	800e8a2 <__kernel_rem_pio2+0x4da>
 800e69a:	ab72      	add	r3, sp, #456	; 0x1c8
 800e69c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e6a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e708 <__kernel_rem_pio2+0x340>
 800e6a4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e6a8:	f04f 0800 	mov.w	r8, #0
 800e6ac:	1baf      	subs	r7, r5, r6
 800e6ae:	e0ea      	b.n	800e886 <__kernel_rem_pio2+0x4be>
 800e6b0:	f04f 0b02 	mov.w	fp, #2
 800e6b4:	e759      	b.n	800e56a <__kernel_rem_pio2+0x1a2>
 800e6b6:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ba:	b955      	cbnz	r5, 800e6d2 <__kernel_rem_pio2+0x30a>
 800e6bc:	b123      	cbz	r3, 800e6c8 <__kernel_rem_pio2+0x300>
 800e6be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e6c2:	f8c8 3000 	str.w	r3, [r8]
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	3201      	adds	r2, #1
 800e6ca:	f108 0804 	add.w	r8, r8, #4
 800e6ce:	461d      	mov	r5, r3
 800e6d0:	e752      	b.n	800e578 <__kernel_rem_pio2+0x1b0>
 800e6d2:	1acb      	subs	r3, r1, r3
 800e6d4:	f8c8 3000 	str.w	r3, [r8]
 800e6d8:	462b      	mov	r3, r5
 800e6da:	e7f5      	b.n	800e6c8 <__kernel_rem_pio2+0x300>
 800e6dc:	f3af 8000 	nop.w
	...
 800e6ec:	3ff00000 	.word	0x3ff00000
 800e6f0:	0800f208 	.word	0x0800f208
 800e6f4:	40200000 	.word	0x40200000
 800e6f8:	3ff00000 	.word	0x3ff00000
 800e6fc:	3e700000 	.word	0x3e700000
 800e700:	41700000 	.word	0x41700000
 800e704:	3fe00000 	.word	0x3fe00000
 800e708:	0800f1c8 	.word	0x0800f1c8
 800e70c:	1e62      	subs	r2, r4, #1
 800e70e:	ab0e      	add	r3, sp, #56	; 0x38
 800e710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e714:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e718:	a90e      	add	r1, sp, #56	; 0x38
 800e71a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e71e:	e739      	b.n	800e594 <__kernel_rem_pio2+0x1cc>
 800e720:	1e62      	subs	r2, r4, #1
 800e722:	ab0e      	add	r3, sp, #56	; 0x38
 800e724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e728:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e72c:	e7f4      	b.n	800e718 <__kernel_rem_pio2+0x350>
 800e72e:	a90e      	add	r1, sp, #56	; 0x38
 800e730:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e734:	3b01      	subs	r3, #1
 800e736:	430a      	orrs	r2, r1
 800e738:	e789      	b.n	800e64e <__kernel_rem_pio2+0x286>
 800e73a:	3301      	adds	r3, #1
 800e73c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e740:	2900      	cmp	r1, #0
 800e742:	d0fa      	beq.n	800e73a <__kernel_rem_pio2+0x372>
 800e744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e746:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e74a:	446a      	add	r2, sp
 800e74c:	3a98      	subs	r2, #152	; 0x98
 800e74e:	920a      	str	r2, [sp, #40]	; 0x28
 800e750:	9a08      	ldr	r2, [sp, #32]
 800e752:	18e3      	adds	r3, r4, r3
 800e754:	18a5      	adds	r5, r4, r2
 800e756:	aa22      	add	r2, sp, #136	; 0x88
 800e758:	f104 0801 	add.w	r8, r4, #1
 800e75c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e760:	9304      	str	r3, [sp, #16]
 800e762:	9b04      	ldr	r3, [sp, #16]
 800e764:	4543      	cmp	r3, r8
 800e766:	da04      	bge.n	800e772 <__kernel_rem_pio2+0x3aa>
 800e768:	461c      	mov	r4, r3
 800e76a:	e6a3      	b.n	800e4b4 <__kernel_rem_pio2+0xec>
 800e76c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e76e:	2301      	movs	r3, #1
 800e770:	e7e4      	b.n	800e73c <__kernel_rem_pio2+0x374>
 800e772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e774:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e778:	f7f1 fe80 	bl	800047c <__aeabi_i2d>
 800e77c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e782:	46ab      	mov	fp, r5
 800e784:	461c      	mov	r4, r3
 800e786:	f04f 0900 	mov.w	r9, #0
 800e78a:	2600      	movs	r6, #0
 800e78c:	2700      	movs	r7, #0
 800e78e:	9b06      	ldr	r3, [sp, #24]
 800e790:	4599      	cmp	r9, r3
 800e792:	dd06      	ble.n	800e7a2 <__kernel_rem_pio2+0x3da>
 800e794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e796:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e79a:	f108 0801 	add.w	r8, r8, #1
 800e79e:	930a      	str	r3, [sp, #40]	; 0x28
 800e7a0:	e7df      	b.n	800e762 <__kernel_rem_pio2+0x39a>
 800e7a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e7a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e7aa:	f7f1 fed1 	bl	8000550 <__aeabi_dmul>
 800e7ae:	4602      	mov	r2, r0
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	4630      	mov	r0, r6
 800e7b4:	4639      	mov	r1, r7
 800e7b6:	f7f1 fd15 	bl	80001e4 <__adddf3>
 800e7ba:	f109 0901 	add.w	r9, r9, #1
 800e7be:	4606      	mov	r6, r0
 800e7c0:	460f      	mov	r7, r1
 800e7c2:	e7e4      	b.n	800e78e <__kernel_rem_pio2+0x3c6>
 800e7c4:	3d01      	subs	r5, #1
 800e7c6:	e748      	b.n	800e65a <__kernel_rem_pio2+0x292>
 800e7c8:	ec47 6b10 	vmov	d0, r6, r7
 800e7cc:	f1ca 0000 	rsb	r0, sl, #0
 800e7d0:	f000 fab6 	bl	800ed40 <scalbn>
 800e7d4:	ec57 6b10 	vmov	r6, r7, d0
 800e7d8:	4ba0      	ldr	r3, [pc, #640]	; (800ea5c <__kernel_rem_pio2+0x694>)
 800e7da:	ee10 0a10 	vmov	r0, s0
 800e7de:	2200      	movs	r2, #0
 800e7e0:	4639      	mov	r1, r7
 800e7e2:	f7f2 f93b 	bl	8000a5c <__aeabi_dcmpge>
 800e7e6:	b1f8      	cbz	r0, 800e828 <__kernel_rem_pio2+0x460>
 800e7e8:	4b9d      	ldr	r3, [pc, #628]	; (800ea60 <__kernel_rem_pio2+0x698>)
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	4639      	mov	r1, r7
 800e7f0:	f7f1 feae 	bl	8000550 <__aeabi_dmul>
 800e7f4:	f7f2 f946 	bl	8000a84 <__aeabi_d2iz>
 800e7f8:	4680      	mov	r8, r0
 800e7fa:	f7f1 fe3f 	bl	800047c <__aeabi_i2d>
 800e7fe:	4b97      	ldr	r3, [pc, #604]	; (800ea5c <__kernel_rem_pio2+0x694>)
 800e800:	2200      	movs	r2, #0
 800e802:	f7f1 fea5 	bl	8000550 <__aeabi_dmul>
 800e806:	460b      	mov	r3, r1
 800e808:	4602      	mov	r2, r0
 800e80a:	4639      	mov	r1, r7
 800e80c:	4630      	mov	r0, r6
 800e80e:	f7f1 fce7 	bl	80001e0 <__aeabi_dsub>
 800e812:	f7f2 f937 	bl	8000a84 <__aeabi_d2iz>
 800e816:	1c65      	adds	r5, r4, #1
 800e818:	ab0e      	add	r3, sp, #56	; 0x38
 800e81a:	f10a 0a18 	add.w	sl, sl, #24
 800e81e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e822:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e826:	e720      	b.n	800e66a <__kernel_rem_pio2+0x2a2>
 800e828:	4630      	mov	r0, r6
 800e82a:	4639      	mov	r1, r7
 800e82c:	f7f2 f92a 	bl	8000a84 <__aeabi_d2iz>
 800e830:	ab0e      	add	r3, sp, #56	; 0x38
 800e832:	4625      	mov	r5, r4
 800e834:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e838:	e717      	b.n	800e66a <__kernel_rem_pio2+0x2a2>
 800e83a:	ab0e      	add	r3, sp, #56	; 0x38
 800e83c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e840:	f7f1 fe1c 	bl	800047c <__aeabi_i2d>
 800e844:	4632      	mov	r2, r6
 800e846:	463b      	mov	r3, r7
 800e848:	f7f1 fe82 	bl	8000550 <__aeabi_dmul>
 800e84c:	4b84      	ldr	r3, [pc, #528]	; (800ea60 <__kernel_rem_pio2+0x698>)
 800e84e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e852:	2200      	movs	r2, #0
 800e854:	4630      	mov	r0, r6
 800e856:	4639      	mov	r1, r7
 800e858:	f7f1 fe7a 	bl	8000550 <__aeabi_dmul>
 800e85c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e860:	4606      	mov	r6, r0
 800e862:	460f      	mov	r7, r1
 800e864:	e70f      	b.n	800e686 <__kernel_rem_pio2+0x2be>
 800e866:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e86a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e86e:	f7f1 fe6f 	bl	8000550 <__aeabi_dmul>
 800e872:	4602      	mov	r2, r0
 800e874:	460b      	mov	r3, r1
 800e876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e87a:	f7f1 fcb3 	bl	80001e4 <__adddf3>
 800e87e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e882:	f108 0801 	add.w	r8, r8, #1
 800e886:	9b02      	ldr	r3, [sp, #8]
 800e888:	4598      	cmp	r8, r3
 800e88a:	dc01      	bgt.n	800e890 <__kernel_rem_pio2+0x4c8>
 800e88c:	45b8      	cmp	r8, r7
 800e88e:	ddea      	ble.n	800e866 <__kernel_rem_pio2+0x49e>
 800e890:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e894:	ab4a      	add	r3, sp, #296	; 0x128
 800e896:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e89a:	ed87 7b00 	vstr	d7, [r7]
 800e89e:	3e01      	subs	r6, #1
 800e8a0:	e6f8      	b.n	800e694 <__kernel_rem_pio2+0x2cc>
 800e8a2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	dc0b      	bgt.n	800e8c0 <__kernel_rem_pio2+0x4f8>
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	dc35      	bgt.n	800e918 <__kernel_rem_pio2+0x550>
 800e8ac:	d059      	beq.n	800e962 <__kernel_rem_pio2+0x59a>
 800e8ae:	9b04      	ldr	r3, [sp, #16]
 800e8b0:	f003 0007 	and.w	r0, r3, #7
 800e8b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e8b8:	ecbd 8b02 	vpop	{d8}
 800e8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e8c2:	2b03      	cmp	r3, #3
 800e8c4:	d1f3      	bne.n	800e8ae <__kernel_rem_pio2+0x4e6>
 800e8c6:	ab4a      	add	r3, sp, #296	; 0x128
 800e8c8:	4423      	add	r3, r4
 800e8ca:	9306      	str	r3, [sp, #24]
 800e8cc:	461c      	mov	r4, r3
 800e8ce:	469a      	mov	sl, r3
 800e8d0:	9502      	str	r5, [sp, #8]
 800e8d2:	9b02      	ldr	r3, [sp, #8]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f1aa 0a08 	sub.w	sl, sl, #8
 800e8da:	dc6b      	bgt.n	800e9b4 <__kernel_rem_pio2+0x5ec>
 800e8dc:	46aa      	mov	sl, r5
 800e8de:	f1ba 0f01 	cmp.w	sl, #1
 800e8e2:	f1a4 0408 	sub.w	r4, r4, #8
 800e8e6:	f300 8085 	bgt.w	800e9f4 <__kernel_rem_pio2+0x62c>
 800e8ea:	9c06      	ldr	r4, [sp, #24]
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	3408      	adds	r4, #8
 800e8f0:	2100      	movs	r1, #0
 800e8f2:	2d01      	cmp	r5, #1
 800e8f4:	f300 809d 	bgt.w	800ea32 <__kernel_rem_pio2+0x66a>
 800e8f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e8fc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e900:	f1bb 0f00 	cmp.w	fp, #0
 800e904:	f040 809b 	bne.w	800ea3e <__kernel_rem_pio2+0x676>
 800e908:	9b01      	ldr	r3, [sp, #4]
 800e90a:	e9c3 5600 	strd	r5, r6, [r3]
 800e90e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e912:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e916:	e7ca      	b.n	800e8ae <__kernel_rem_pio2+0x4e6>
 800e918:	3408      	adds	r4, #8
 800e91a:	ab4a      	add	r3, sp, #296	; 0x128
 800e91c:	441c      	add	r4, r3
 800e91e:	462e      	mov	r6, r5
 800e920:	2000      	movs	r0, #0
 800e922:	2100      	movs	r1, #0
 800e924:	2e00      	cmp	r6, #0
 800e926:	da36      	bge.n	800e996 <__kernel_rem_pio2+0x5ce>
 800e928:	f1bb 0f00 	cmp.w	fp, #0
 800e92c:	d039      	beq.n	800e9a2 <__kernel_rem_pio2+0x5da>
 800e92e:	4602      	mov	r2, r0
 800e930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e934:	9c01      	ldr	r4, [sp, #4]
 800e936:	e9c4 2300 	strd	r2, r3, [r4]
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e942:	f7f1 fc4d 	bl	80001e0 <__aeabi_dsub>
 800e946:	ae4c      	add	r6, sp, #304	; 0x130
 800e948:	2401      	movs	r4, #1
 800e94a:	42a5      	cmp	r5, r4
 800e94c:	da2c      	bge.n	800e9a8 <__kernel_rem_pio2+0x5e0>
 800e94e:	f1bb 0f00 	cmp.w	fp, #0
 800e952:	d002      	beq.n	800e95a <__kernel_rem_pio2+0x592>
 800e954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e958:	4619      	mov	r1, r3
 800e95a:	9b01      	ldr	r3, [sp, #4]
 800e95c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e960:	e7a5      	b.n	800e8ae <__kernel_rem_pio2+0x4e6>
 800e962:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e966:	eb0d 0403 	add.w	r4, sp, r3
 800e96a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e96e:	2000      	movs	r0, #0
 800e970:	2100      	movs	r1, #0
 800e972:	2d00      	cmp	r5, #0
 800e974:	da09      	bge.n	800e98a <__kernel_rem_pio2+0x5c2>
 800e976:	f1bb 0f00 	cmp.w	fp, #0
 800e97a:	d002      	beq.n	800e982 <__kernel_rem_pio2+0x5ba>
 800e97c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e980:	4619      	mov	r1, r3
 800e982:	9b01      	ldr	r3, [sp, #4]
 800e984:	e9c3 0100 	strd	r0, r1, [r3]
 800e988:	e791      	b.n	800e8ae <__kernel_rem_pio2+0x4e6>
 800e98a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e98e:	f7f1 fc29 	bl	80001e4 <__adddf3>
 800e992:	3d01      	subs	r5, #1
 800e994:	e7ed      	b.n	800e972 <__kernel_rem_pio2+0x5aa>
 800e996:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e99a:	f7f1 fc23 	bl	80001e4 <__adddf3>
 800e99e:	3e01      	subs	r6, #1
 800e9a0:	e7c0      	b.n	800e924 <__kernel_rem_pio2+0x55c>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	e7c5      	b.n	800e934 <__kernel_rem_pio2+0x56c>
 800e9a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e9ac:	f7f1 fc1a 	bl	80001e4 <__adddf3>
 800e9b0:	3401      	adds	r4, #1
 800e9b2:	e7ca      	b.n	800e94a <__kernel_rem_pio2+0x582>
 800e9b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800e9b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e9bc:	9b02      	ldr	r3, [sp, #8]
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	9302      	str	r3, [sp, #8]
 800e9c2:	4632      	mov	r2, r6
 800e9c4:	463b      	mov	r3, r7
 800e9c6:	4640      	mov	r0, r8
 800e9c8:	4649      	mov	r1, r9
 800e9ca:	f7f1 fc0b 	bl	80001e4 <__adddf3>
 800e9ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	460b      	mov	r3, r1
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	4649      	mov	r1, r9
 800e9da:	f7f1 fc01 	bl	80001e0 <__aeabi_dsub>
 800e9de:	4632      	mov	r2, r6
 800e9e0:	463b      	mov	r3, r7
 800e9e2:	f7f1 fbff 	bl	80001e4 <__adddf3>
 800e9e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e9ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9ee:	ed8a 7b00 	vstr	d7, [sl]
 800e9f2:	e76e      	b.n	800e8d2 <__kernel_rem_pio2+0x50a>
 800e9f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e9f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	4632      	mov	r2, r6
 800ea00:	463b      	mov	r3, r7
 800ea02:	4649      	mov	r1, r9
 800ea04:	f7f1 fbee 	bl	80001e4 <__adddf3>
 800ea08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	460b      	mov	r3, r1
 800ea10:	4640      	mov	r0, r8
 800ea12:	4649      	mov	r1, r9
 800ea14:	f7f1 fbe4 	bl	80001e0 <__aeabi_dsub>
 800ea18:	4632      	mov	r2, r6
 800ea1a:	463b      	mov	r3, r7
 800ea1c:	f7f1 fbe2 	bl	80001e4 <__adddf3>
 800ea20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea28:	ed84 7b00 	vstr	d7, [r4]
 800ea2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea30:	e755      	b.n	800e8de <__kernel_rem_pio2+0x516>
 800ea32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ea36:	f7f1 fbd5 	bl	80001e4 <__adddf3>
 800ea3a:	3d01      	subs	r5, #1
 800ea3c:	e759      	b.n	800e8f2 <__kernel_rem_pio2+0x52a>
 800ea3e:	9b01      	ldr	r3, [sp, #4]
 800ea40:	9a01      	ldr	r2, [sp, #4]
 800ea42:	601d      	str	r5, [r3, #0]
 800ea44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ea48:	605c      	str	r4, [r3, #4]
 800ea4a:	609f      	str	r7, [r3, #8]
 800ea4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ea50:	60d3      	str	r3, [r2, #12]
 800ea52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea56:	6110      	str	r0, [r2, #16]
 800ea58:	6153      	str	r3, [r2, #20]
 800ea5a:	e728      	b.n	800e8ae <__kernel_rem_pio2+0x4e6>
 800ea5c:	41700000 	.word	0x41700000
 800ea60:	3e700000 	.word	0x3e700000
 800ea64:	00000000 	.word	0x00000000

0800ea68 <__kernel_sin>:
 800ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6c:	ed2d 8b04 	vpush	{d8-d9}
 800ea70:	eeb0 8a41 	vmov.f32	s16, s2
 800ea74:	eef0 8a61 	vmov.f32	s17, s3
 800ea78:	ec55 4b10 	vmov	r4, r5, d0
 800ea7c:	b083      	sub	sp, #12
 800ea7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ea82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ea86:	9001      	str	r0, [sp, #4]
 800ea88:	da06      	bge.n	800ea98 <__kernel_sin+0x30>
 800ea8a:	ee10 0a10 	vmov	r0, s0
 800ea8e:	4629      	mov	r1, r5
 800ea90:	f7f1 fff8 	bl	8000a84 <__aeabi_d2iz>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d051      	beq.n	800eb3c <__kernel_sin+0xd4>
 800ea98:	4622      	mov	r2, r4
 800ea9a:	462b      	mov	r3, r5
 800ea9c:	4620      	mov	r0, r4
 800ea9e:	4629      	mov	r1, r5
 800eaa0:	f7f1 fd56 	bl	8000550 <__aeabi_dmul>
 800eaa4:	4682      	mov	sl, r0
 800eaa6:	468b      	mov	fp, r1
 800eaa8:	4602      	mov	r2, r0
 800eaaa:	460b      	mov	r3, r1
 800eaac:	4620      	mov	r0, r4
 800eaae:	4629      	mov	r1, r5
 800eab0:	f7f1 fd4e 	bl	8000550 <__aeabi_dmul>
 800eab4:	a341      	add	r3, pc, #260	; (adr r3, 800ebbc <__kernel_sin+0x154>)
 800eab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaba:	4680      	mov	r8, r0
 800eabc:	4689      	mov	r9, r1
 800eabe:	4650      	mov	r0, sl
 800eac0:	4659      	mov	r1, fp
 800eac2:	f7f1 fd45 	bl	8000550 <__aeabi_dmul>
 800eac6:	a33f      	add	r3, pc, #252	; (adr r3, 800ebc4 <__kernel_sin+0x15c>)
 800eac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eacc:	f7f1 fb88 	bl	80001e0 <__aeabi_dsub>
 800ead0:	4652      	mov	r2, sl
 800ead2:	465b      	mov	r3, fp
 800ead4:	f7f1 fd3c 	bl	8000550 <__aeabi_dmul>
 800ead8:	a33c      	add	r3, pc, #240	; (adr r3, 800ebcc <__kernel_sin+0x164>)
 800eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eade:	f7f1 fb81 	bl	80001e4 <__adddf3>
 800eae2:	4652      	mov	r2, sl
 800eae4:	465b      	mov	r3, fp
 800eae6:	f7f1 fd33 	bl	8000550 <__aeabi_dmul>
 800eaea:	a33a      	add	r3, pc, #232	; (adr r3, 800ebd4 <__kernel_sin+0x16c>)
 800eaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf0:	f7f1 fb76 	bl	80001e0 <__aeabi_dsub>
 800eaf4:	4652      	mov	r2, sl
 800eaf6:	465b      	mov	r3, fp
 800eaf8:	f7f1 fd2a 	bl	8000550 <__aeabi_dmul>
 800eafc:	a337      	add	r3, pc, #220	; (adr r3, 800ebdc <__kernel_sin+0x174>)
 800eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb02:	f7f1 fb6f 	bl	80001e4 <__adddf3>
 800eb06:	9b01      	ldr	r3, [sp, #4]
 800eb08:	4606      	mov	r6, r0
 800eb0a:	460f      	mov	r7, r1
 800eb0c:	b9eb      	cbnz	r3, 800eb4a <__kernel_sin+0xe2>
 800eb0e:	4602      	mov	r2, r0
 800eb10:	460b      	mov	r3, r1
 800eb12:	4650      	mov	r0, sl
 800eb14:	4659      	mov	r1, fp
 800eb16:	f7f1 fd1b 	bl	8000550 <__aeabi_dmul>
 800eb1a:	a325      	add	r3, pc, #148	; (adr r3, 800ebb0 <__kernel_sin+0x148>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	f7f1 fb5e 	bl	80001e0 <__aeabi_dsub>
 800eb24:	4642      	mov	r2, r8
 800eb26:	464b      	mov	r3, r9
 800eb28:	f7f1 fd12 	bl	8000550 <__aeabi_dmul>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4620      	mov	r0, r4
 800eb32:	4629      	mov	r1, r5
 800eb34:	f7f1 fb56 	bl	80001e4 <__adddf3>
 800eb38:	4604      	mov	r4, r0
 800eb3a:	460d      	mov	r5, r1
 800eb3c:	ec45 4b10 	vmov	d0, r4, r5
 800eb40:	b003      	add	sp, #12
 800eb42:	ecbd 8b04 	vpop	{d8-d9}
 800eb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4a:	4b1b      	ldr	r3, [pc, #108]	; (800ebb8 <__kernel_sin+0x150>)
 800eb4c:	ec51 0b18 	vmov	r0, r1, d8
 800eb50:	2200      	movs	r2, #0
 800eb52:	f7f1 fcfd 	bl	8000550 <__aeabi_dmul>
 800eb56:	4632      	mov	r2, r6
 800eb58:	ec41 0b19 	vmov	d9, r0, r1
 800eb5c:	463b      	mov	r3, r7
 800eb5e:	4640      	mov	r0, r8
 800eb60:	4649      	mov	r1, r9
 800eb62:	f7f1 fcf5 	bl	8000550 <__aeabi_dmul>
 800eb66:	4602      	mov	r2, r0
 800eb68:	460b      	mov	r3, r1
 800eb6a:	ec51 0b19 	vmov	r0, r1, d9
 800eb6e:	f7f1 fb37 	bl	80001e0 <__aeabi_dsub>
 800eb72:	4652      	mov	r2, sl
 800eb74:	465b      	mov	r3, fp
 800eb76:	f7f1 fceb 	bl	8000550 <__aeabi_dmul>
 800eb7a:	ec53 2b18 	vmov	r2, r3, d8
 800eb7e:	f7f1 fb2f 	bl	80001e0 <__aeabi_dsub>
 800eb82:	a30b      	add	r3, pc, #44	; (adr r3, 800ebb0 <__kernel_sin+0x148>)
 800eb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb88:	4606      	mov	r6, r0
 800eb8a:	460f      	mov	r7, r1
 800eb8c:	4640      	mov	r0, r8
 800eb8e:	4649      	mov	r1, r9
 800eb90:	f7f1 fcde 	bl	8000550 <__aeabi_dmul>
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	4630      	mov	r0, r6
 800eb9a:	4639      	mov	r1, r7
 800eb9c:	f7f1 fb22 	bl	80001e4 <__adddf3>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4620      	mov	r0, r4
 800eba6:	4629      	mov	r1, r5
 800eba8:	f7f1 fb1a 	bl	80001e0 <__aeabi_dsub>
 800ebac:	e7c4      	b.n	800eb38 <__kernel_sin+0xd0>
 800ebae:	bf00      	nop
 800ebb0:	55555549 	.word	0x55555549
 800ebb4:	3fc55555 	.word	0x3fc55555
 800ebb8:	3fe00000 	.word	0x3fe00000
 800ebbc:	5acfd57c 	.word	0x5acfd57c
 800ebc0:	3de5d93a 	.word	0x3de5d93a
 800ebc4:	8a2b9ceb 	.word	0x8a2b9ceb
 800ebc8:	3e5ae5e6 	.word	0x3e5ae5e6
 800ebcc:	57b1fe7d 	.word	0x57b1fe7d
 800ebd0:	3ec71de3 	.word	0x3ec71de3
 800ebd4:	19c161d5 	.word	0x19c161d5
 800ebd8:	3f2a01a0 	.word	0x3f2a01a0
 800ebdc:	1110f8a6 	.word	0x1110f8a6
 800ebe0:	3f811111 	.word	0x3f811111

0800ebe4 <with_errnof>:
 800ebe4:	b513      	push	{r0, r1, r4, lr}
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ebec:	f7fe fcde 	bl	800d5ac <__errno>
 800ebf0:	ed9d 0a01 	vldr	s0, [sp, #4]
 800ebf4:	6004      	str	r4, [r0, #0]
 800ebf6:	b002      	add	sp, #8
 800ebf8:	bd10      	pop	{r4, pc}

0800ebfa <xflowf>:
 800ebfa:	b130      	cbz	r0, 800ec0a <xflowf+0x10>
 800ebfc:	eef1 7a40 	vneg.f32	s15, s0
 800ec00:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ec04:	2022      	movs	r0, #34	; 0x22
 800ec06:	f7ff bfed 	b.w	800ebe4 <with_errnof>
 800ec0a:	eef0 7a40 	vmov.f32	s15, s0
 800ec0e:	e7f7      	b.n	800ec00 <xflowf+0x6>

0800ec10 <__math_uflowf>:
 800ec10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ec18 <__math_uflowf+0x8>
 800ec14:	f7ff bff1 	b.w	800ebfa <xflowf>
 800ec18:	10000000 	.word	0x10000000

0800ec1c <__math_oflowf>:
 800ec1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ec24 <__math_oflowf+0x8>
 800ec20:	f7ff bfeb 	b.w	800ebfa <xflowf>
 800ec24:	70000000 	.word	0x70000000

0800ec28 <fabs>:
 800ec28:	ec51 0b10 	vmov	r0, r1, d0
 800ec2c:	ee10 2a10 	vmov	r2, s0
 800ec30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ec34:	ec43 2b10 	vmov	d0, r2, r3
 800ec38:	4770      	bx	lr
 800ec3a:	0000      	movs	r0, r0
 800ec3c:	0000      	movs	r0, r0
	...

0800ec40 <floor>:
 800ec40:	ec51 0b10 	vmov	r0, r1, d0
 800ec44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ec4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ec50:	2e13      	cmp	r6, #19
 800ec52:	ee10 5a10 	vmov	r5, s0
 800ec56:	ee10 8a10 	vmov	r8, s0
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	dc32      	bgt.n	800ecc4 <floor+0x84>
 800ec5e:	2e00      	cmp	r6, #0
 800ec60:	da14      	bge.n	800ec8c <floor+0x4c>
 800ec62:	a333      	add	r3, pc, #204	; (adr r3, 800ed30 <floor+0xf0>)
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	f7f1 fabc 	bl	80001e4 <__adddf3>
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	2300      	movs	r3, #0
 800ec70:	f7f1 fefe 	bl	8000a70 <__aeabi_dcmpgt>
 800ec74:	b138      	cbz	r0, 800ec86 <floor+0x46>
 800ec76:	2c00      	cmp	r4, #0
 800ec78:	da57      	bge.n	800ed2a <floor+0xea>
 800ec7a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ec7e:	431d      	orrs	r5, r3
 800ec80:	d001      	beq.n	800ec86 <floor+0x46>
 800ec82:	4c2d      	ldr	r4, [pc, #180]	; (800ed38 <floor+0xf8>)
 800ec84:	2500      	movs	r5, #0
 800ec86:	4621      	mov	r1, r4
 800ec88:	4628      	mov	r0, r5
 800ec8a:	e025      	b.n	800ecd8 <floor+0x98>
 800ec8c:	4f2b      	ldr	r7, [pc, #172]	; (800ed3c <floor+0xfc>)
 800ec8e:	4137      	asrs	r7, r6
 800ec90:	ea01 0307 	and.w	r3, r1, r7
 800ec94:	4303      	orrs	r3, r0
 800ec96:	d01f      	beq.n	800ecd8 <floor+0x98>
 800ec98:	a325      	add	r3, pc, #148	; (adr r3, 800ed30 <floor+0xf0>)
 800ec9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec9e:	f7f1 faa1 	bl	80001e4 <__adddf3>
 800eca2:	2200      	movs	r2, #0
 800eca4:	2300      	movs	r3, #0
 800eca6:	f7f1 fee3 	bl	8000a70 <__aeabi_dcmpgt>
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d0eb      	beq.n	800ec86 <floor+0x46>
 800ecae:	2c00      	cmp	r4, #0
 800ecb0:	bfbe      	ittt	lt
 800ecb2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ecb6:	fa43 f606 	asrlt.w	r6, r3, r6
 800ecba:	19a4      	addlt	r4, r4, r6
 800ecbc:	ea24 0407 	bic.w	r4, r4, r7
 800ecc0:	2500      	movs	r5, #0
 800ecc2:	e7e0      	b.n	800ec86 <floor+0x46>
 800ecc4:	2e33      	cmp	r6, #51	; 0x33
 800ecc6:	dd0b      	ble.n	800ece0 <floor+0xa0>
 800ecc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eccc:	d104      	bne.n	800ecd8 <floor+0x98>
 800ecce:	ee10 2a10 	vmov	r2, s0
 800ecd2:	460b      	mov	r3, r1
 800ecd4:	f7f1 fa86 	bl	80001e4 <__adddf3>
 800ecd8:	ec41 0b10 	vmov	d0, r0, r1
 800ecdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ece0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ece4:	f04f 33ff 	mov.w	r3, #4294967295
 800ece8:	fa23 f707 	lsr.w	r7, r3, r7
 800ecec:	4207      	tst	r7, r0
 800ecee:	d0f3      	beq.n	800ecd8 <floor+0x98>
 800ecf0:	a30f      	add	r3, pc, #60	; (adr r3, 800ed30 <floor+0xf0>)
 800ecf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf6:	f7f1 fa75 	bl	80001e4 <__adddf3>
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f7f1 feb7 	bl	8000a70 <__aeabi_dcmpgt>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	d0bf      	beq.n	800ec86 <floor+0x46>
 800ed06:	2c00      	cmp	r4, #0
 800ed08:	da02      	bge.n	800ed10 <floor+0xd0>
 800ed0a:	2e14      	cmp	r6, #20
 800ed0c:	d103      	bne.n	800ed16 <floor+0xd6>
 800ed0e:	3401      	adds	r4, #1
 800ed10:	ea25 0507 	bic.w	r5, r5, r7
 800ed14:	e7b7      	b.n	800ec86 <floor+0x46>
 800ed16:	2301      	movs	r3, #1
 800ed18:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ed1c:	fa03 f606 	lsl.w	r6, r3, r6
 800ed20:	4435      	add	r5, r6
 800ed22:	4545      	cmp	r5, r8
 800ed24:	bf38      	it	cc
 800ed26:	18e4      	addcc	r4, r4, r3
 800ed28:	e7f2      	b.n	800ed10 <floor+0xd0>
 800ed2a:	2500      	movs	r5, #0
 800ed2c:	462c      	mov	r4, r5
 800ed2e:	e7aa      	b.n	800ec86 <floor+0x46>
 800ed30:	8800759c 	.word	0x8800759c
 800ed34:	7e37e43c 	.word	0x7e37e43c
 800ed38:	bff00000 	.word	0xbff00000
 800ed3c:	000fffff 	.word	0x000fffff

0800ed40 <scalbn>:
 800ed40:	b570      	push	{r4, r5, r6, lr}
 800ed42:	ec55 4b10 	vmov	r4, r5, d0
 800ed46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	462b      	mov	r3, r5
 800ed4e:	b99a      	cbnz	r2, 800ed78 <scalbn+0x38>
 800ed50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ed54:	4323      	orrs	r3, r4
 800ed56:	d036      	beq.n	800edc6 <scalbn+0x86>
 800ed58:	4b39      	ldr	r3, [pc, #228]	; (800ee40 <scalbn+0x100>)
 800ed5a:	4629      	mov	r1, r5
 800ed5c:	ee10 0a10 	vmov	r0, s0
 800ed60:	2200      	movs	r2, #0
 800ed62:	f7f1 fbf5 	bl	8000550 <__aeabi_dmul>
 800ed66:	4b37      	ldr	r3, [pc, #220]	; (800ee44 <scalbn+0x104>)
 800ed68:	429e      	cmp	r6, r3
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	460d      	mov	r5, r1
 800ed6e:	da10      	bge.n	800ed92 <scalbn+0x52>
 800ed70:	a32b      	add	r3, pc, #172	; (adr r3, 800ee20 <scalbn+0xe0>)
 800ed72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed76:	e03a      	b.n	800edee <scalbn+0xae>
 800ed78:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ed7c:	428a      	cmp	r2, r1
 800ed7e:	d10c      	bne.n	800ed9a <scalbn+0x5a>
 800ed80:	ee10 2a10 	vmov	r2, s0
 800ed84:	4620      	mov	r0, r4
 800ed86:	4629      	mov	r1, r5
 800ed88:	f7f1 fa2c 	bl	80001e4 <__adddf3>
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	460d      	mov	r5, r1
 800ed90:	e019      	b.n	800edc6 <scalbn+0x86>
 800ed92:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ed96:	460b      	mov	r3, r1
 800ed98:	3a36      	subs	r2, #54	; 0x36
 800ed9a:	4432      	add	r2, r6
 800ed9c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eda0:	428a      	cmp	r2, r1
 800eda2:	dd08      	ble.n	800edb6 <scalbn+0x76>
 800eda4:	2d00      	cmp	r5, #0
 800eda6:	a120      	add	r1, pc, #128	; (adr r1, 800ee28 <scalbn+0xe8>)
 800eda8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edac:	da1c      	bge.n	800ede8 <scalbn+0xa8>
 800edae:	a120      	add	r1, pc, #128	; (adr r1, 800ee30 <scalbn+0xf0>)
 800edb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edb4:	e018      	b.n	800ede8 <scalbn+0xa8>
 800edb6:	2a00      	cmp	r2, #0
 800edb8:	dd08      	ble.n	800edcc <scalbn+0x8c>
 800edba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800edbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800edc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800edc6:	ec45 4b10 	vmov	d0, r4, r5
 800edca:	bd70      	pop	{r4, r5, r6, pc}
 800edcc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800edd0:	da19      	bge.n	800ee06 <scalbn+0xc6>
 800edd2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800edd6:	429e      	cmp	r6, r3
 800edd8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800eddc:	dd0a      	ble.n	800edf4 <scalbn+0xb4>
 800edde:	a112      	add	r1, pc, #72	; (adr r1, 800ee28 <scalbn+0xe8>)
 800ede0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1e2      	bne.n	800edae <scalbn+0x6e>
 800ede8:	a30f      	add	r3, pc, #60	; (adr r3, 800ee28 <scalbn+0xe8>)
 800edea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edee:	f7f1 fbaf 	bl	8000550 <__aeabi_dmul>
 800edf2:	e7cb      	b.n	800ed8c <scalbn+0x4c>
 800edf4:	a10a      	add	r1, pc, #40	; (adr r1, 800ee20 <scalbn+0xe0>)
 800edf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d0b8      	beq.n	800ed70 <scalbn+0x30>
 800edfe:	a10e      	add	r1, pc, #56	; (adr r1, 800ee38 <scalbn+0xf8>)
 800ee00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee04:	e7b4      	b.n	800ed70 <scalbn+0x30>
 800ee06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee0a:	3236      	adds	r2, #54	; 0x36
 800ee0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ee14:	4620      	mov	r0, r4
 800ee16:	4b0c      	ldr	r3, [pc, #48]	; (800ee48 <scalbn+0x108>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	e7e8      	b.n	800edee <scalbn+0xae>
 800ee1c:	f3af 8000 	nop.w
 800ee20:	c2f8f359 	.word	0xc2f8f359
 800ee24:	01a56e1f 	.word	0x01a56e1f
 800ee28:	8800759c 	.word	0x8800759c
 800ee2c:	7e37e43c 	.word	0x7e37e43c
 800ee30:	8800759c 	.word	0x8800759c
 800ee34:	fe37e43c 	.word	0xfe37e43c
 800ee38:	c2f8f359 	.word	0xc2f8f359
 800ee3c:	81a56e1f 	.word	0x81a56e1f
 800ee40:	43500000 	.word	0x43500000
 800ee44:	ffff3cb0 	.word	0xffff3cb0
 800ee48:	3c900000 	.word	0x3c900000

0800ee4c <fabsf>:
 800ee4c:	ee10 3a10 	vmov	r3, s0
 800ee50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee54:	ee00 3a10 	vmov	s0, r3
 800ee58:	4770      	bx	lr

0800ee5a <finitef>:
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800ee60:	9801      	ldr	r0, [sp, #4]
 800ee62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ee66:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ee6a:	bfac      	ite	ge
 800ee6c:	2000      	movge	r0, #0
 800ee6e:	2001      	movlt	r0, #1
 800ee70:	b002      	add	sp, #8
 800ee72:	4770      	bx	lr

0800ee74 <scalbnf>:
 800ee74:	ee10 3a10 	vmov	r3, s0
 800ee78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ee7c:	d025      	beq.n	800eeca <scalbnf+0x56>
 800ee7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ee82:	d302      	bcc.n	800ee8a <scalbnf+0x16>
 800ee84:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ee88:	4770      	bx	lr
 800ee8a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ee8e:	d122      	bne.n	800eed6 <scalbnf+0x62>
 800ee90:	4b2a      	ldr	r3, [pc, #168]	; (800ef3c <scalbnf+0xc8>)
 800ee92:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ef40 <scalbnf+0xcc>
 800ee96:	4298      	cmp	r0, r3
 800ee98:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ee9c:	db16      	blt.n	800eecc <scalbnf+0x58>
 800ee9e:	ee10 3a10 	vmov	r3, s0
 800eea2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eea6:	3a19      	subs	r2, #25
 800eea8:	4402      	add	r2, r0
 800eeaa:	2afe      	cmp	r2, #254	; 0xfe
 800eeac:	dd15      	ble.n	800eeda <scalbnf+0x66>
 800eeae:	ee10 3a10 	vmov	r3, s0
 800eeb2:	eddf 7a24 	vldr	s15, [pc, #144]	; 800ef44 <scalbnf+0xd0>
 800eeb6:	eddf 6a24 	vldr	s13, [pc, #144]	; 800ef48 <scalbnf+0xd4>
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	eeb0 7a67 	vmov.f32	s14, s15
 800eec0:	bfb8      	it	lt
 800eec2:	eef0 7a66 	vmovlt.f32	s15, s13
 800eec6:	ee27 0a27 	vmul.f32	s0, s14, s15
 800eeca:	4770      	bx	lr
 800eecc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800ef4c <scalbnf+0xd8>
 800eed0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800eed4:	4770      	bx	lr
 800eed6:	0dd2      	lsrs	r2, r2, #23
 800eed8:	e7e6      	b.n	800eea8 <scalbnf+0x34>
 800eeda:	2a00      	cmp	r2, #0
 800eedc:	dd06      	ble.n	800eeec <scalbnf+0x78>
 800eede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eee2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800eee6:	ee00 3a10 	vmov	s0, r3
 800eeea:	4770      	bx	lr
 800eeec:	f112 0f16 	cmn.w	r2, #22
 800eef0:	da1a      	bge.n	800ef28 <scalbnf+0xb4>
 800eef2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eef6:	4298      	cmp	r0, r3
 800eef8:	ee10 3a10 	vmov	r3, s0
 800eefc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ef00:	dd0a      	ble.n	800ef18 <scalbnf+0xa4>
 800ef02:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ef44 <scalbnf+0xd0>
 800ef06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ef48 <scalbnf+0xd4>
 800ef0a:	eef0 7a40 	vmov.f32	s15, s0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	bf18      	it	ne
 800ef12:	eeb0 0a47 	vmovne.f32	s0, s14
 800ef16:	e7db      	b.n	800eed0 <scalbnf+0x5c>
 800ef18:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ef4c <scalbnf+0xd8>
 800ef1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ef50 <scalbnf+0xdc>
 800ef20:	eef0 7a40 	vmov.f32	s15, s0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	e7f3      	b.n	800ef10 <scalbnf+0x9c>
 800ef28:	3219      	adds	r2, #25
 800ef2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ef32:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ef54 <scalbnf+0xe0>
 800ef36:	ee07 3a10 	vmov	s14, r3
 800ef3a:	e7c4      	b.n	800eec6 <scalbnf+0x52>
 800ef3c:	ffff3cb0 	.word	0xffff3cb0
 800ef40:	4c000000 	.word	0x4c000000
 800ef44:	7149f2ca 	.word	0x7149f2ca
 800ef48:	f149f2ca 	.word	0xf149f2ca
 800ef4c:	0da24260 	.word	0x0da24260
 800ef50:	8da24260 	.word	0x8da24260
 800ef54:	33000000 	.word	0x33000000

0800ef58 <_init>:
 800ef58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef5a:	bf00      	nop
 800ef5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef5e:	bc08      	pop	{r3}
 800ef60:	469e      	mov	lr, r3
 800ef62:	4770      	bx	lr

0800ef64 <_fini>:
 800ef64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef66:	bf00      	nop
 800ef68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef6a:	bc08      	pop	{r3}
 800ef6c:	469e      	mov	lr, r3
 800ef6e:	4770      	bx	lr
